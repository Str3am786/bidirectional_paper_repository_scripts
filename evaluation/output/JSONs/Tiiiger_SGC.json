{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 18:52:38"}, "code_repository": [{"result": {"value": "https://github.com/Tiiiger/SGC", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "Tiiiger", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2019-01-30T05:50:17Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-20T03:03:43Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "The MIT License\n\nCopyright (c) 2019 Tianyi Zhang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/LICENSE"}], "description": [{"result": {"value": "official implementation for the paper \"Simplifying Graph Convolutional Networks\"", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "* As pointed out by #23, there was a subtle bug in our preprocessing code for the reddit dataset. After fixing this bug, SGC achieves a F1 score of 95.0 (previously, it was 94.9).\n* Practical advice: it is often very helpful to normalize the features to have zero mean with standard deviation one to accelerate the convergence of SGC (and many other linear models). For example, we apply this normalization for [the reddit dataset](./utils.py#L119). Please consider doing this when applying SGC to other datasets. For some relevant discussions, see [Ross et al, 2013](https://arxiv.org/pdf/1305.6646.pdf) and [Li and Zhang, 1998](https://www.jstor.org/stable/25051187?seq=1#metadata_info_tab_contents).\n \n", "original_header": "Updates"}, "confidence": 0.9984721193606299, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "This repo contains an example implementation of the Simple Graph Convolution\n(SGC) model, described in the ICML2019 paper [Simplifying Graph Convolutional Networks](https://arxiv.org/abs/1902.07153). \nSGC removes the nonlinearities and collapes the weight matrices in Graph Convolutional Networks (GCNs) and is essentially a linear model. \nFor an illustration, ![](./model.jpg \"SGC\") \nSGC achieves competitive performance while saving much training time. For reference, on a GTX 1080 Ti, \nThis home repo contains the implementation for citation networks (Cora, Citeseer, and Pubmed) and social network (Reddit).\nWe have a work-in-progress branch [ablation](https://github.com/Tiiiger/SGC/tree/ablation), containing additional codebase for our ablation studies. \n", "original_header": "Overview"}, "confidence": 0.9366920708643098, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "We provide the citation network datasets under `data/`, which corresponds to [the public data splits](https://github.com/tkipf/gcn/tree/master/gcn/data).\nDue to space limit, please download reddit dataset from [FastGCN](https://github.com/matenure/FastGCN/issues/9) and put `reddit_adj.npz`, `reddit.npz` under `data/`.\n \n", "original_header": "Data"}, "confidence": 0.8590166917925892, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "We collect the code base for downstream tasks under `downstream`. Currently, we\nare releasing only SGC implementation for text classification.\n \n", "original_header": "Downstream"}, "confidence": 0.9801401352752009, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "name": [{"result": {"value": "SGC", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "Tiiiger/SGC", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/Tiiiger/SGC/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/Tiiiger/SGC/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 794, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "graph, machine-learning", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 148, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/Tiiiger/SGC/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 46892}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "citation": [{"result": {"value": "Other reference implementations can be found in the follwing libraries. Note that in\nthese examples, the hyperparameters are potentially different and\nthe results would be different from the paper reported ones.\n\n- *Deep Graph Library*: [example](https://github.com/dmlc/dgl/tree/master/examples/pytorch/sgc).\n- *PyTorch Geometric*:\n[documentation](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SGConv)\nand [example](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/sgc.py). \n- *Spektral*: [example](https://github.com/danielegrattarola/spektral/blob/master/examples/node_classification_simple_gc.py)\n- *StellarGraph*: [example](https://github.com/stellargraph/stellargraph/blob/develop/demos/node-classification/sgc/sgc-node-classification-example.ipynb)\n- *tf_geometric*: [example](https://github.com/CrawlScript/tf_geometric/blob/master/demo/demo_sgc.py)\n", "type": "Text_excerpt", "original_header": "Other reference implementations", "parent_header": ["Simplifying Graph Convolutional Networks", "Overview"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}, {"result": {"value": "@InProceedings{pmlr-v97-wu19e,\n  title = \t {Simplifying Graph Convolutional Networks},\n  author = \t {Wu, Felix and Souza, Amauri and Zhang, Tianyi and Fifty, Christopher and Yu, Tao and Weinberger, Kilian},\n  booktitle = \t {Proceedings of the 36th International Conference on Machine Learning},\n  pages = \t {6861--6871},\n  year = \t {2019},\n  publisher = \t {PMLR},\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "requirements": [{"result": {"value": "Our implementation works with PyTorch>=1.0.0 Install other dependencies: `$ pip install -r requirement.txt`\n", "type": "Text_excerpt", "original_header": "Dependencies", "parent_header": ["Simplifying Graph Convolutional Networks"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "usage": [{"result": {"value": "Citation Networks: We tune the only hyperparameter, weight decay, with hyperopt and put the resulting hyperparameter under `SGC-tuning`. \nSee `tuning.py` for more details on hyperparameter optimization.\n```\n$ python citation.py --dataset cora --tuned\n$ python citation.py --dataset citeseer --tuned --epochs 150 \n$ python citation.py --dataset pubmed --tuned\n```\n\nReddit:\n```\n$ python reddit.py --inductive --test\n```", "type": "Text_excerpt", "original_header": "Usage", "parent_header": ["Simplifying Graph Convolutional Networks"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "acknowledgement": [{"result": {"value": "This repo is modified from [pygcn](https://github.com/tkipf/pygcn), and [FastGCN](https://github.com/matenure/FastGCN).\n\nWe thank *Deep Graph Library* team for helping providing a reference implementation of SGC and benchmarking SGC in *Deep Graph Library*.\nWe thank Matthias Fey, author of *PyTorch Geometric*, for his help on providing a reference implementation of SGC within *PyTorch Geometric*.\nWe thank Daniele Grattarola, author of *Spektral*, for his help on providing a reference implementation of SGC within *Spektral*.\n", "type": "Text_excerpt", "original_header": "Acknowledgement", "parent_header": ["Simplifying Graph Convolutional Networks"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Graphs"}, "confidence": 0.9013150805478926, "technique": "supervised_classification"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "Dataset | Metric | Training Time \n:------:|:------:|:-----------:|\nCora    | Acc: 81.0 %     | 0.13s\nCiteseer| Acc: 71.9 %     | 0.14s\nPubmed  | Acc: 78.9 %     | 0.29s\nReddit  | F1:  94.9 %     | 2.7s \n", "original_header": "Overview"}, "confidence": 0.8092533475228536, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "full_title": [{"result": {"type": "String", "value": ""}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "related_documentation": [{"result": {"type": "Url", "value": "https://pytorch-geometric.readthedocs.io/", "format": "readthedocs"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "image": [{"result": {"type": "Url", "value": "https://raw.githubusercontent.com/Tiiiger/SGC/master/./model.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/pdf/1305.6646.pdf"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1902.07153"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Tiiiger/SGC/master/README.md"}]}