{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 18:44:51"}, "code_repository": [{"result": {"value": "https://github.com/keithito/tacotron", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "keithito", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2017-07-08T17:03:31Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-20T17:05:35Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Copyright (c) 2017 Keith Ito\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/LICENSE"}], "description": [{"result": {"value": "A TensorFlow implementation of Google's Tacotron speech synthesis with pre-trained model (unofficial)", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "An implementation of Tacotron speech synthesis in TensorFlow. \n", "original_header": "Tacotron"}, "confidence": 0.8995872138656487, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "2. @begeekmyfriend created a [fork](https://github.com/begeekmyfriend/tacotron) that adds location-sensitive attention and the stop token from the [Tacotron 2](https://arxiv.org/abs/1712.05884) paper. This can greatly reduce the amount of data required to train a model. \n", "original_header": "Recent Updates"}, "confidence": 0.9073311597970475, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "In April 2017, Google published a paper, [Tacotron: Towards End-to-End Speech Synthesis](https://arxiv.org/pdf/1703.10135.pdf),\nwhere they present a neural text-to-speech model that learns to synthesize speech directly from\n(text, audio) pairs. However, they didn't release their source code or training data. This is an\nindependent attempt to provide an open-source implementation of the model described in their paper. \nThe quality isn't as good as Google's demo yet, but hopefully it will get there someday :-).\nPull requests are welcome! \n", "original_header": "Background"}, "confidence": 0.915148819735228, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "  * Occasionally, you may see a spike in loss and the model will forget how to attend (the\n    alignments will no longer make sense). Although it will recover eventually, it may\n    save time to restart at a checkpoint prior to the spike by passing the\n    `--restore_step=150000` flag to train.py (replacing 150000 with a step number prior to the\n    spike). **Update**: a recent [fix](https://github.com/keithito/tacotron/pull/7) to gradient\n    clipping by @candlewill may have fixed this.\n    \n  * During eval and training, audio length is limited to `max_iters * outputs_per_step * frame_shift_ms`\n    milliseconds. With the defaults (max_iters=200, outputs_per_step=5, frame_shift_ms=12.5), this is\n    12.5 seconds.\n    \n    If your training examples are longer, you will see an error like this:\n    `Incompatible shapes: [32,1340,80] vs. [32,1000,80]`\n    \n    To fix this, you can set a larger value of `max_iters` by passing `--hparams=\"max_iters=300\"` to\n    train.py (replace \"300\" with a value based on how long your audio is and the formula above).\n    \n  * Here is the expected loss curve when training on LJ Speech with the default hyperparameters:\n    ![Loss curve](https://user-images.githubusercontent.com/1945356/36077599-c0513e4a-0f21-11e8-8525-07347847720c.png) \n", "original_header": "Notes and Common Issues"}, "confidence": 0.951020179563896, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "name": [{"result": {"value": "tacotron", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "keithito/tacotron", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/keithito/tacotron/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/keithito/tacotron/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 2878, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "machine-learning, python, speech-synthesis, tacotron, tensorflow, tts", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 966, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/keithito/tacotron/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 63929}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/keithito/tacotron/releases/7732416", "tag": "v0.2.0", "name": "Faster synthesis, better support for non-English training data", "author": {"name": "keithito", "type": "User"}, "description": "- PR https://github.com/keithito/tacotron/pull/41 adds a TensorFlow implementation of Griffin-Lim.\r\n  - Audio can be generated at 7.5x real-time on a GTX 1080Ti.\r\n- PR https://github.com/keithito/tacotron/pull/40 makes the text processing pipeline more configurable\r\n  - This can make it easier to train on non-English data.\r\n  - See [TRAINING_DATA.md](https://github.com/keithito/tacotron/blob/master/TRAINING_DATA.md) for details.\r\n- TensorFlow 1.3 is now required.\r\n", "tarball_url": "https://api.github.com/repos/keithito/tacotron/tarball/v0.2.0", "zipball_url": "https://api.github.com/repos/keithito/tacotron/zipball/v0.2.0", "html_url": "https://github.com/keithito/tacotron/releases/tag/v0.2.0", "url": "https://api.github.com/repos/keithito/tacotron/releases/7732416", "release_id": 7732416, "date_created": "2017-09-13T03:58:42Z", "date_published": "2017-09-13T04:09:08Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/keithito/tacotron/releases/7632395", "tag": "v0.1.0", "name": "Initial version", "author": {"name": "keithito", "type": "User"}, "tarball_url": "https://api.github.com/repos/keithito/tacotron/tarball/v0.1.0", "zipball_url": "https://api.github.com/repos/keithito/tacotron/zipball/v0.1.0", "html_url": "https://github.com/keithito/tacotron/releases/tag/v0.1.0", "url": "https://api.github.com/repos/keithito/tacotron/releases/7632395", "release_id": 7632395, "date_created": "2017-08-22T21:42:26Z", "date_published": "2017-09-05T04:47:32Z"}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "installation": [{"result": {"value": "1. Install Python 3.\n\n2. Install the latest version of [TensorFlow](https://www.tensorflow.org/install/) for your platform. For better\n   performance, install with GPU support if it's available. This code works with TensorFlow 1.3 and later.\n\n3. Install requirements:\n   ```\n   pip install -r requirements.txt\n   ```\n\n", "type": "Text_excerpt", "original_header": "Installing dependencies", "parent_header": ["Tacotron", "Quick Start"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "  * [TCMalloc](http://goog-perftools.sourceforge.net/doc/tcmalloc.html) seems to improve\n    training speed and avoids occasional slowdowns seen with the default allocator. You\n    can enable it by installing it and setting `LD_PRELOAD=/usr/lib/libtcmalloc.so`. With TCMalloc,\n    you can get around 1.1 sec/step on a GTX 1080Ti. \n", "original_header": "Notes and Common Issues"}, "confidence": 0.8580506925505607, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "  * By Alex Barron: https://github.com/barronalex/Tacotron\n  * By Kyubyong Park: https://github.com/Kyubyong/tacotron\n \n", "original_header": "Other Implementations"}, "confidence": 0.8917558479162611, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "requirements": [{"result": {"value": "1. Install Python 3.\n\n2. Install the latest version of [TensorFlow](https://www.tensorflow.org/install/) for your platform. For better\n   performance, install with GPU support if it's available. This code works with TensorFlow 1.3 and later.\n\n3. Install requirements:\n   ```\n   pip install -r requirements.txt\n   ```\n\n", "type": "Text_excerpt", "original_header": "Installing dependencies", "parent_header": ["Tacotron", "Quick Start"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "usage": [{"result": {"value": "1. **Download and unpack a model**:\n   ```\n   curl https://data.keithito.com/data/speech/tacotron-20180906.tar.gz | tar xzC /tmp\n   ```\n\n2. **Run the demo server**:\n   ```\n   python3 demo_server.py --checkpoint /tmp/tacotron-20180906/model.ckpt\n   ```\n\n3. **Point your browser at localhost:9000**\n   * Type what you want to synthesize\n\n\n", "type": "Text_excerpt", "original_header": "Using a pre-trained model", "parent_header": ["Tacotron", "Quick Start"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}, {"result": {"value": "*Note: you need at least 40GB of free disk space to train a model.*\n\n1. **Download a speech dataset.**\n\n   The following are supported out of the box:\n    * [LJ Speech](https://keithito.com/LJ-Speech-Dataset/) (Public Domain)\n    * [Blizzard 2012](http://www.cstr.ed.ac.uk/projects/blizzard/2012/phase_one) (Creative Commons Attribution Share-Alike)\n\n   You can use other datasets if you convert them to the right format. See [TRAINING_DATA.md](TRAINING_DATA.md) for more info.\n\n\n2. **Unpack the dataset into `~/tacotron`**\n\n   After unpacking, your tree should look like this for LJ Speech:\n   ```\n   tacotron\n     |- LJSpeech-1.1\n         |- metadata.csv\n         |- wavs\n   ```\n\n   or like this for Blizzard 2012:\n   ```\n   tacotron\n     |- Blizzard2012\n         |- ATrampAbroad\n         |   |- sentence_index.txt\n         |   |- lab\n         |   |- wav\n         |- TheManThatCorruptedHadleyburg\n             |- sentence_index.txt\n             |- lab\n             |- wav\n   ```\n\n3. **Preprocess the data**\n   ```\n   python3 preprocess.py --dataset ljspeech\n   ```\n     * Use `--dataset blizzard` for Blizzard data\n\n4. **Train a model**\n   ```\n   python3 train.py\n   ```\n\n   Tunable hyperparameters are found in [hparams.py](hparams.py). You can adjust these at the command\n   line using the `--hparams` flag, for example `--hparams=\"batch_size=16,outputs_per_step=2\"`.\n   Hyperparameters should generally be set to the same values at both training and eval time.\n   The default hyperparameters are recommended for LJ Speech and other English-language data.\n   See [TRAINING_DATA.md](TRAINING_DATA.md) for other languages.\n\n\n5. **Monitor with Tensorboard** (optional)\n   ```\n   tensorboard --logdir ~/tacotron/logs-tacotron\n   ```\n\n   The trainer dumps audio and alignments every 1000 steps. You can find these in\n   `~/tacotron/logs-tacotron`.\n\n6. **Synthesize from a checkpoint**\n   ```\n   python3 demo_server.py --checkpoint ~/tacotron/logs-tacotron/model.ckpt-185000\n   ```\n   Replace \"185000\" with the checkpoint number that you want to use, then open a browser\n   to `localhost:9000` and type what you want to speak. Alternately, you can\n   run [eval.py](eval.py) at the command line:\n   ```\n   python3 eval.py --checkpoint ~/tacotron/logs-tacotron/model.ckpt-185000\n   ```\n   If you set the `--hparams` flag when training, set the same value here.\n\n", "type": "Text_excerpt", "original_header": "Training", "parent_header": ["Tacotron", "Quick Start"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Audio"}, "confidence": 0.9143687022595726, "technique": "supervised_classification"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "  * You can train with [CMUDict](http://www.speech.cs.cmu.edu/cgi-bin/cmudict) by downloading the\n    dictionary to ~/tacotron/training and then passing the flag `--hparams=\"use_cmudict=True\"` to\n    train.py. This will allow you to pass ARPAbet phonemes enclosed in curly braces at eval\n    time to force a particular pronunciation, e.g. `Turn left on {HH AW1 S S T AH0 N} Street.` \n", "original_header": "Notes and Common Issues"}, "confidence": 0.8204386229604606, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "Tacotron"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "documentation": [{"result": {"type": "Url", "value": "https://github.com/keithito/tacotron/wiki", "format": "wiki"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "image": [{"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/1945356/36077599-c0513e4a-0f21-11e8-8525-07347847720c.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/abs/1712.05884"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/pdf/1703.10135.pdf"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/keithito/tacotron/master/README.md"}]}