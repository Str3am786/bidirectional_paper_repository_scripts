{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 18:47:12"}, "code_repository": [{"result": {"value": "https://github.com/loshchil/AdamW-and-SGDW", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "loshchil", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2017-11-07T08:59:51Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-21T10:46:36Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/bsd-3-clause", "type": "License", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "url": "https://api.github.com/licenses/bsd-3-clause", "spdx_id": "BSD-3-Clause"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Copyright (c) 2017, Xavier Gastaldi. \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name NetShake nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/LICENSE"}], "description": [{"result": {"value": "Decoupled Weight Decay Regularization (ICLR 2019)", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "This method aims at helping computer vision practitioners faced with an overfit problem. The idea is to replace, in a 3-branch ResNet, the standard summation of residual branches by a stochastic affine combination. The largest tested model improves on the best single shot published result on CIFAR-10 by reaching 2.72% test error.\n\n![shake-shake](https://s3.eu-central-1.amazonaws.com/github-xg/architecture3.png)\n\nFigure 1: **Left:** Forward training pass. **Center:** Backward training pass. **Right:** At test time.\n", "type": "Text_excerpt", "original_header": "Introduction", "parent_header": ["Shake-Shake regularization of 3-branch residual networks"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "This repository contains the code for the paper [Shake-Shake regularization of 3-branch residual networks](https://openreview.net/forum?id=HkO-PCmYl&noteId=HkO-PCmYl).  \nThe code is based on [fb.resnet.torch] (https://github.com/facebook/fb.resnet.torch).\n \n", "original_header": "Shake-Shake regularization of 3-branch residual networks"}, "confidence": 0.896802607588856, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "The base network is a 26 2x32d ResNet (i.e. the network has a depth of 26, 2 residual branches and the first residual block has a width of 32). \"Shake\" means that all scaling coefficients are overwritten with new random numbers before the pass. \"Even\" means that all scaling coefficients are set to 0.5 before the pass. \"Keep\" means that we keep, for the backward pass, the scaling coefficients used during the forward pass. \"Batch\" means that, for each residual block, we apply the same scaling coefficient for all the images in the mini-batch. \"Image\" means that, for each residual block, we apply a different scaling coefficient for each image in the mini-batch. The numbers in the Table below represent the average of 3 runs except for the 96d models which were run 5 times. \n", "original_header": "Results"}, "confidence": 0.9782560823046296, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}], "name": [{"result": {"value": "AdamW-and-SGDW", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "loshchil/AdamW-and-SGDW", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/loshchil/AdamW-and-SGDW/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/loshchil/AdamW-and-SGDW/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 242, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 28, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/loshchil/AdamW-and-SGDW/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Lua", "name": "Lua", "type": "Programming_language", "size": 79605}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "installation": [{"result": {"value": "This repository contains the code for the paper Decoupled Weight Decay Regularization (old title: Fixing Weight Decay Regularization in Adam) by Ilya Loshchilov and Frank Hutter, ICLR 2019 [arXiv](https://arxiv.org/abs/1711.05101). \n\nThe code represents a tiny modification of the source code provided for the Shake-Shake regularization by Xavier Gastaldi [arXiv](https://arxiv.org/abs/1705.07485). Since the usage of both is very similar, the introduction and description of the original Shake-Shake code is given below. Please consider to  *first* run the Shake-Shake code and then our code. \n\nFind below a few examples to train a 26 2x96d \"Shake-Shake-Image\" ResNet on CIFAR-10 with 1 GPU.\nTo run on 4 GPUs, set `CUDA_VISIBLE_DEVICES=0,1,2,3` and `-nGPU 4`.\nFor test purposes you may reduce `-nEpochs` from 1500 to e.g. 150 and set `-widenFactor` to 4 to use a smaller network. \nTo run on ImageNet32x32, set `-dataset` to imagenet32 and reduce `-nEpochs` to 150.\nYou may consider to use `-weightDecay=0.05` for CIFAR-10. \n\nImportantly, please copy with replacement `adam.lua` and `sgd.lua` from `UPDATETORCHFILES` to `YOURTORCHFOLDER/install/share/lua/5.1/optim/`\n\nTo run AdamW for `nEpochs=1500` epochs without restarts with initial learning rate `LR=0.001`, normalized weight decay `weightDecay=0.025`   \n\n```\nCUDA_VISIBLE_DEVICES=0 th main.lua -algorithmType ADAMW -nEpochs 1500 -Te 1500 -Tmult 2 -widenFactor 6 -LR 0.001 -weightDecay 0.025 -dataset cifar10 -nGPU 1 -depth 26 -irun 1 -batchSize 128 -momentum 0.9 -shareGradInput false -optnet true -netType shakeshake -forwardShake true -backwardShake true -shakeImage true -lrShape cosine -LRdec true\n```\n\nTo run AdamW for `nEpochs=1500` epochs with restarts, where the first restart will happen after `Te=100` epochs and the second restart after 200 more epochs because `100*Tmult=200`. \n\n```\nCUDA_VISIBLE_DEVICES=0 th main.lua -algorithmType ADAMW -nEpochs 1500 -Te 100 -Tmult 2 -widenFactor 6 -LR 0.001 -weightDecay 0.025 -dataset cifar10 -nGPU 1 -depth 26 -irun 1 -batchSize 128 -momentum 0.9 -shareGradInput false -optnet true -netType shakeshake -forwardShake true -backwardShake true -shakeImage true -lrShape cosine -LRdec true\n```\n\nTo run SGDW for `nEpochs=150` epochs without restarts with initial learning rate `LR=0.05`, normalized weight decay `weightDecay=0.025`   \n\n```\nCUDA_VISIBLE_DEVICES=0 th main.lua -algorithmType SGDW -nEpochs 1500 -Te 1500 -Tmult 2 -widenFactor 6 -LR 0.05 -weightDecay 0.025 -dataset cifar10 -nGPU 1 -depth 26 -irun 1 -batchSize 128 -momentum 0.9 -shareGradInput false -optnet true -netType shakeshake -forwardShake true -backwardShake true -shakeImage true -lrShape cosine -LRdec true\n```\n\nTo run SGDW for `nEpochs=150` epochs with restarts, where the first restart will happen after `Te=100` epochs and the second restart after 200 more epochs because `100*Tmult=200`. \n\n```\nCUDA_VISIBLE_DEVICES=0 th main.lua -algorithmType SGDW -nEpochs 1500 -Te 100 -Tmult 2 -widenFactor 6 -LR 0.001 -weightDecay 0.025 -dataset cifar10 -nGPU 1 -depth 26 -irun 1 -batchSize 128 -momentum 0.9 -shareGradInput false -optnet true -netType shakeshake -forwardShake true -backwardShake true -shakeImage true -lrShape cosine -LRdec true\n```\n\nAcknowledgments: We thank Patryk Chrabaszcz for creating functions dealing with ImageNet32x32 dataset.\n\n", "type": "Text_excerpt", "original_header": "Decoupled Weight Decay Regularization (old title: Fixing Weight Decay Regularization in Adam)"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}], "usage": [{"result": {"value": "0. Install [fb.resnet.torch] (https://github.com/facebook/fb.resnet.torch), [optnet](https://github.com/fmassa/optimize-net) and [lua-stdlib](https://github.com/lua-stdlib/lua-stdlib).\n1. Download Shake-Shake\n```\ngit clone https://github.com/xgastaldi/shake-shake.git\n```\n2. Copy the elements in the shake-shake folder and paste them in the fb.resnet.torch folder. This will overwrite 5 files (*main.lua*, *train.lua*, *opts.lua*, *checkpoints.lua* and *models/init.lua*) and add 3 new files (*models/shakeshake.lua*, *models/shakeshakeblock.lua* and *models/mulconstantslices.lua*).\n3. You can train a 26 2x32d \"Shake-Shake-Image\" ResNet on CIFAR-10+ using\n\n```\nth main.lua -dataset cifar10 -nGPU 1 -batchSize 128 -depth 26 -shareGradInput false -optnet true -nEpochs 1800 -netType shakeshake -lrShape cosine -widenFactor 2 -LR 0.2 -forwardShake true -backwardShake true -shakeImage true\n``` \n\nYou can train a 26 2x96d \"Shake-Shake-Image\" ResNet on 2 GPUs using\n\n```\nCUDA_VISIBLE_DEVICES=0,1 th main.lua -dataset cifar10 -nGPU 2 -batchSize 128 -depth 26 -shareGradInput false -optnet true -nEpochs 1800 -netType shakeshake -lrShape cosine -widenFactor 6 -LR 0.2 -forwardShake true -backwardShake true -shakeImage true\n```\n\nA widenFactor of 2 corresponds to 32d, 4 to 64d, etc..\n", "type": "Text_excerpt", "original_header": "Usage", "parent_header": ["Shake-Shake regularization of 3-branch residual networks"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}, {"result": {"value": "Changes made to fb.resnet.torch files:\n\n*main.lua*  \nLn 17, 54-59, 81-88: Adds a log (courtesy of Sergey Zagoruyko)  \n\n*train.lua*  \nLn 36-38 58-60 206-213: Adds the cosine learning rate function  \nLn 88-89: Adds the learning rate to the elements printed on screen  \n\n*opts.lua*  \nLn 57-62: Adds Shake-Shake options  \n\n*checkpoints.lua*  \nLn 15-16: Adds require 'models/shakeshakeblock' and require 'std'  \nLn 60-61: Avoids using the fb.renet.torch deepcopy (it doesn't seem to be compatible with the BN in shakeshakeblock) and replaces it with the deepcopy from stdlib  \nLn 67-81: Saves only the best model  \n\n*init.lua*  \nLn 91-92: Adds require 'models/mulconstantslices' and require 'models/shakeshakeblock'  \n\nThe main model is in *shakeshake.lua*. The residual block model is in *shakeshakeblock.lua*. *mulconstantslices.lua* is just an extension of nn.mulconstant that multiplies elements of a vector with image slices of a mini-batch tensor.\n", "type": "Text_excerpt", "original_header": "Note", "parent_header": ["Shake-Shake regularization of 3-branch residual networks", "Usage"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}], "contact": [{"result": {"value": "xgastaldi.mba2011 at london.edu  \nAny discussions, suggestions and questions are welcome!\n\n", "type": "Text_excerpt", "original_header": "Contact", "parent_header": ["Shake-Shake regularization of 3-branch residual networks"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Computer Vision"}, "confidence": 0.9660265642892604, "technique": "supervised_classification"}], "full_title": [{"result": {"type": "String", "value": "Decoupled Weight Decay Regularization (old title: Fixing Weight Decay Regularization in Adam)"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}], "image": [{"result": {"type": "Url", "value": "https://s3.eu-central-1.amazonaws.com/github-xg/architecture3.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/abs/1705.07485"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1711.05101"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/loshchil/AdamW-and-SGDW/master/README.md"}]}