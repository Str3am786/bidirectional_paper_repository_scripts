{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:29:33"}, "code_repository": [{"result": {"value": "https://github.com/RIAEvangelist/node-ipc", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "RIAEvangelist", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2023-01-13T09:35:34Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-07T16:41:10Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "MIT License\n\nCopyright (c) 2020 Brandon Nozaki Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/licence"}, {"result": {"value": "I'm sorry.\n", "type": "Text_excerpt", "original_header": "Licensed under MIT license", "parent_header": ["node-ipc", "Basic Examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}], "name": [{"result": {"value": "node-ipc", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "RIAEvangelist/node-ipc", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/RIAEvangelist/node-ipc/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/RIAEvangelist/node-ipc/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 25, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 7, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/RIAEvangelist/node-ipc/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "JavaScript", "name": "JavaScript", "type": "Programming_language", "size": 94065}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/RIAEvangelist/node-ipc/releases/89352311", "tag": "10.1.0", "name": "10.1.0", "author": {"name": "RIAEvangelist", "type": "User"}, "description": "Stable", "tarball_url": "https://api.github.com/repos/RIAEvangelist/node-ipc/tarball/10.1.0", "zipball_url": "https://api.github.com/repos/RIAEvangelist/node-ipc/zipball/10.1.0", "html_url": "https://github.com/RIAEvangelist/node-ipc/releases/tag/10.1.0", "url": "https://api.github.com/repos/RIAEvangelist/node-ipc/releases/89352311", "release_id": 89352311, "date_created": "2023-01-18T07:10:35Z", "date_published": "2023-01-18T07:19:24Z"}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "usage": [{"result": {"value": "Sometimes you might need explicit and independent instances of node-ipc. Just for such scenarios we have exposed the core IPC class on the IPC singleton.\n\n```javascript\n\n    import {IPCModule} from 'node-ipc';\n\n    const ipc=new RawIPC;\n    const someOtherExplicitIPC=new RawIPC;\n\n\n    //OR\n\n    const ipc=from 'node-ipc');\n    const someOtherExplicitIPC=new ipc.IPC;\n\n\n    //setting explicit configs\n\n    //keep one silent and the other verbose\n    ipc.config.silent=true;\n    someOtherExplicitIPC.config.silent=true;\n\n    //make one a raw binary and the other json based ipc\n    ipc.config.rawBuffer=false;\n\n    someOtherExplicitIPC.config.rawBuffer=true;\n    someOtherExplicitIPC.config.encoding='hex';\n\n```\n\n\n----", "type": "Text_excerpt", "original_header": "Multiple IPC Instances", "parent_header": ["node-ipc"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "```javascript\n\n    import ipc from 'node-ipc';\n\n    ipc.config.id   = 'world';\n    ipc.config.retry= 1500;\n\n    ipc.serve(\n        function(){\n            ipc.server.on(\n                'message',\n                function(data,socket){\n                    ipc.log('got a message : '.debug, data);\n                    ipc.server.emit(\n                        socket,\n                        'message',  //this can be anything you want so long as\n                                    //your client knows.\n                        data+' world!'\n                    );\n                }\n            );\n\t\t\tipc.server.on(\n\t\t\t\t'socket.disconnected',\n\t\t\t\tfunction(socket, destroyedSocketID) {\n\t\t\t\t\tipc.log('client ' + destroyedSocketID + ' has disconnected!');\n\t\t\t\t}\n\t\t\t);\n        }\n    );\n\n    ipc.server.start();\n\n```\n", "type": "Text_excerpt", "original_header": "Server for Unix Sockets, Windows Sockets &amp; TCP Sockets", "parent_header": ["node-ipc", "Basic Examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "```javascript\n\n    import ipc from 'node-ipc';\n\n    ipc.config.id   = 'hello';\n    ipc.config.retry= 1500;\n\n    ipc.connectTo(\n        'world',\n        function(){\n            ipc.of.world.on(\n                'connect',\n                function(){\n                    ipc.log('## connected to world ##'.rainbow, ipc.config.delay);\n                    ipc.of.world.emit(\n                        'message',  //any event or message type your server listens for\n                        'hello'\n                    )\n                }\n            );\n            ipc.of.world.on(\n                'disconnect',\n                function(){\n                    ipc.log('disconnected from world'.notice);\n                }\n            );\n            ipc.of.world.on(\n                'message',  //any event or message type your server listens for\n                function(data){\n                    ipc.log('got a message from world : '.debug, data);\n                }\n            );\n        }\n    );\n\n```\n", "type": "Text_excerpt", "original_header": "Client for Unix Sockets &amp; TCP Sockets", "parent_header": ["node-ipc", "Basic Examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "This means a UDP Client and Server are the same thing because in order to receive data, a UDP Socket must have its own port to receive data on, and only one process can use this port at a time. It also means that in order to `emit` or `broadcast` data the UDP server will need to know the host and port of the Socket it intends to broadcast the data to.\n\nThis is the most basic example which will work for both local and remote UDP Sockets.\n", "type": "Text_excerpt", "original_header": "Server &amp; Client for UDP Sockets", "parent_header": ["node-ipc", "Basic Examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "```javascript\n\n    import ipc from 'node-ipc';\n\n    ipc.config.id   = 'world';\n    ipc.config.retry= 1500;\n\n    ipc.serveNet(\n        'udp4',\n        function(){\n            console.log(123);\n            ipc.server.on(\n                'message',\n                function(data,socket){\n                    ipc.log('got a message from '.debug, data.from.variable ,' : '.debug, data.message.variable);\n                    ipc.server.emit(\n                        socket,\n                        'message',\n                        {\n                            from    : ipc.config.id,\n                            message : data.message+' world!'\n                        }\n                    );\n                }\n            );\n\n            console.log(ipc.server);\n        }\n    );\n\n    ipc.server.start();\n\n```\n", "type": "Text_excerpt", "original_header": "UDP Server 1 - \"World\"", "parent_header": ["node-ipc", "Basic Examples", "Server &amp; Client for UDP Sockets"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "```javascript\n\n    ipc.config.id   = 'hello';\n    ipc.config.retry= 1500;\n\n    ipc.serveNet(\n        8001,\n        'udp4',\n        function(){\n            ipc.server.on(\n                'message',\n                function(data){\n                    ipc.log('got Data');\n                    ipc.log('got a message from '.debug, data.from.variable ,' : '.debug, data.message.variable);\n                }\n            );\n            ipc.server.emit(\n                {\n                    address : '127.0.0.1', //any hostname will work\n                    port    : ipc.config.networkPort\n                },\n                'message',\n                {\n                    from    : ipc.config.id,\n                    message : 'Hello'\n                }\n            );\n        }\n    );\n\n    ipc.server.start();\n\n```\n", "type": "Text_excerpt", "original_header": "UDP Server 2 - \"Hello\"", "parent_header": ["node-ipc", "Basic Examples", "Server &amp; Client for UDP Sockets"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "When setting up a rawBuffer socket you must specify it as such :\n\n```javascript\n\n    ipc.config.rawBuffer=true;\n\n```\n\nYou can also specify its encoding type. The default is ` utf8 `\n\n```javascript\n\n    ipc.config.encoding='utf8';\n\n```\n\nemit string buffer :\n\n```javascript\n\n    //server\n    ipc.server.emit(\n        socket,\n        'hello'\n    );\n\n    //client\n    ipc.of.world.emit(\n        'hello'\n    )\n\n```\n\nemit byte array buffer :\n\n```javascript\n\n    //hex encoding may work best for this.\n    ipc.config.encoding='hex';\n\n    //server\n    ipc.server.emit(\n        socket,\n        [10,20,30]\n    );\n\n    //client\n    ipc.server.emit(\n        [10,20,30]\n    );\n\n```\n\nemit binary or hex array buffer, this is best for real time data transfer, especially whan connecting to C or C++ processes, or embedded systems :\n\n```javascript\n\n    ipc.config.encoding='hex';\n\n    //server\n    ipc.server.emit(\n        socket,\n        [0x05,0x6d,0x5c]\n    );\n\n    //client\n    ipc.server.emit(\n        [0x05,0x6d,0x5c]\n    );\n\n```\n\nWriting explicit buffers, int types, doubles, floats etc. as well as big endian and little endian data to raw buffer nostly valuable when connecting to C or C++ processes, or embedded systems (see more detailed info on buffers as well as UInt, Int, double etc. here)[https://nodejs.org/api/buffer.html]:\n\n```javascript\n\n    ipc.config.encoding='hex';\n\n    //make a 6 byte buffer for example\n    const myBuffer=Buffer.alloc(6).fill(0);\n\n    //fill the first 2 bytes with a 16 bit (2 byte) short unsigned int\n\n    //write a UInt16 (2 byte or short) as Big Endian\n    myBuffer.writeUInt16BE(\n        2, //value to write\n        0 //offset in bytes\n    );\n    //OR\n    myBuffer.writeUInt16LE(0x2,0);\n    //OR\n    myBuffer.writeUInt16LE(0x02,0);\n\n    //fill the remaining 4 bytes with a 32 bit (4 byte) long unsigned int\n\n    //write a UInt32 (4 byte or long) as Big Endian\n    myBuffer.writeUInt32BE(\n        16772812, //value to write\n        2 //offset in bytes\n    );\n    //OR\n    myBuffer.writeUInt32BE(0xffeecc,0)\n\n    //server\n    ipc.server.emit(\n        socket,\n        myBuffer\n    );\n\n    //client\n    ipc.server.emit(\n        myBuffer\n    );\n\n```\n", "type": "Text_excerpt", "original_header": "Raw Buffer or Binary Sockets", "parent_header": ["node-ipc", "Basic Examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "##### Server\n\n```javascript\n\n    import fs  from 'fs';\n    import ipc from 'node-ipc';\n    import {cpus}  from 'os';\n    import cluster  from 'cluster';\n    \n    const cpuCount=cpus().length;\n\n    const socketPath='/tmp/ipc.sock';\n\n    ipc.config.unlink = false;\n\n    if (cluster.isMaster) {\n       if (fs.existsSync(socketPath)) {\n           fs.unlinkSync(socketPath);\n       }\n\n       for (let i = 0; i < cpuCount; i++) {\n           cluster.fork();\n       }\n    }else{\n       ipc.serve(\n         socketPath,\n         function() {\n           ipc.server.on(\n             'currentDate',\n             function(data,socket) {\n               console.log(`pid ${process.pid} got: `, data);\n             }\n           );\n         }\n      );\n\n      ipc.server.start();\n      console.log(`pid ${process.pid} listening on ${socketPath}`);\n    }\n\n```\n", "type": "Text_excerpt", "original_header": "Server", "parent_header": ["node-ipc", "Basic Examples", "Server with the `cluster` Module"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"value": "```javascript\n\n    import fs  from 'fs';\n    import ipc  from 'node-ipc';\n\n    const socketPath = '/tmp/ipc.sock';\n\n    //loop forever so you can see the pid of the cluster sever change in the logs\n    setInterval(\n      function() {\n        ipc.connectTo(\n          'world',\n          socketPath,\n          connecting\n         );\n      },\n      2000\n    );\n\n    function connecting(socket) {\n      ipc.of.world.on(\n        'connect',\n        function() {\n          ipc.of.world.emit(\n            'currentDate',\n            {\n                 message: new Date().toISOString()\n            }\n          );\n          ipc.disconnect('world');\n        }\n      );\n    }\n\n```\n", "type": "Text_excerpt", "original_header": "Client", "parent_header": ["node-ipc", "Basic Examples", "Server with the `cluster` Module"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}], "description": [{"result": {"type": "Text_excerpt", "value": "*a nodejs module for local and remote Inter Process Communication* with full support for Linux, Mac and Windows. It also supports all forms of socket communication from low level unix and windows sockets to UDP and secure TLS and TCP sockets. \nA great solution for complex multiprocess **Neural Networking** in Node.JS \n", "original_header": "node-ipc"}, "confidence": 0.9292988784593676, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Testing done with [vanilla-test](https://github.com/RIAEvangelist/vanilla-test)  \n`vanilla-test` integrates with [c8](https://github.com/bcoe/c8) for native ESM coverage without the need to transpile your code. At the time of writing, this is the only way to natively test ESM, and it is amazing! \nPackage details websites :\n* [GitHub.io site](http://riaevangelist.github.io/node-ipc/ \"node-ipc documentation\"). A prettier version of this site.\n* [NPM Module](https://www.npmjs.org/package/node-ipc \"node-ipc npm module\"). The npm page for the node-ipc module. \nThis work is licenced via the MIT Licence.\n \n", "original_header": "NPM Stats"}, "confidence": 0.9468966967612498, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "the latest versions of `node-ipc` may work with the --harmony flag. Officially though, we support node v4 and newer with es5 and es6\n \n", "original_header": "Older versions of node"}, "confidence": 0.9468425033799533, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "| Type      | Stability |Definition |\n|-----------|-----------|-----------|\n|Unix Socket or Windows Socket| Stable    | Gives Linux, Mac, and Windows lightning fast communication and avoids the network card to reduce overhead and latency. [Local Unix and Windows Socket examples ](https://github.com/RIAEvangelist/node-ipc/tree/master/example/unixWindowsSocket/ \"Unix and Windows Socket Node IPC examples\")  |\n|TCP Socket | Stable    | Gives the most reliable communication across the network. Can be used for local IPC as well, but is slower than #1's Unix Socket Implementation because TCP sockets go through the network card while Unix Sockets and Windows Sockets do not. [Local or remote network TCP Socket examples ](https://github.com/RIAEvangelist/node-ipc/tree/master/example/TCPSocket/ \"TCP Socket Node IPC examples\") |\n|TLS Socket | Stable    | Configurable and secure network socket over SSL. Equivalent to https. [TLS/SSL documentation](https://github.com/RIAEvangelist/node-ipc/tree/master/example/TLSSocket) |\n|UDP Sockets| Stable    | Gives the **fastest network communication**. UDP is less reliable but much faster than TCP. It is best used for streaming non critical data like sound, video, or multiplayer game data as it can drop packets depending on network connectivity and other factors. UDP can be used for local IPC as well, but is slower than #1's Unix Socket or Windows Socket Implementation because UDP sockets go through the network card while Unix and Windows Sockets do not. [Local or remote network UDP Socket examples ](https://github.com/RIAEvangelist/node-ipc/tree/master/example/UDPSocket/ \"UDP Socket Node IPC examples\") |   \n", "original_header": "Types of IPC Sockets"}, "confidence": 0.9265400187252195, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "| variable | documentation |\n|----------|---------------|\n| appspace | used for Unix Socket (Unix Domain Socket) namespacing. If not set specifically, the Unix Domain Socket will combine the socketRoot, appspace, and id to form the Unix Socket Path for creation or binding. This is available in case you have many apps running on your system, you may have several sockets with the same id, but if you change the appspace, you will still have app specic unique sockets.|\n| socketRoot| the directory in which to create or bind to a Unix Socket |\n| id       | the id of this socket or service |\n| networkHost| the local or remote host on which TCP, TLS or UDP Sockets should connect |\n| networkPort| the default port on which TCP, TLS, or UDP sockets should connect |\n| readableAll| makes the pipe readable for all users including windows services |\n| writableAll| makes the pipe writable for all users including windows services |\n| encoding | the default encoding for data sent on sockets. Mostly used if rawBuffer is set to true. Valid values are : ` ascii` ` utf8 ` ` utf16le` ` ucs2` ` base64` ` hex ` . |\n| rawBuffer| if true, data will be sent and received as a raw node ` Buffer ` __NOT__ an ` Object ` as JSON. This is great for Binary or hex IPC, and communicating with other processes in languages like C and C++  |\n| delimiter| the delimiter at the end of each data packet. |\n| sync     | synchronous requests. Clients will not send new requests until the server answers. |\n| silent   | turn on/off logging default is false which means logging is on |\n| logInColor   | turn on/off util.inspect colors for ipc.log |\n| logDepth   | set the depth for util.inspect during ipc.log |\n| logger   | the function which receives the output from ipc.log; should take a single string argument |\n| maxConnections| this is the max number of connections allowed to a socket. It is currently only being set on Unix Sockets. Other Socket types are using the system defaults. |\n| retry    | this is the time in milliseconds a client will wait before trying to reconnect to a server if the connection is lost. This does not effect UDP sockets since they do not have a client server relationship like Unix Sockets and TCP Sockets. |\n| maxRetries    | if set, it represents the maximum number of retries after each disconnect before giving up and completely killing a specific connection |\n| stopRetrying| Defaults to false meaning clients will continue to retry to connect to servers indefinitely at the retry interval. If set to any number the client will stop retrying when that number is exceeded after each disconnect. If set to true in real time it will immediately stop trying to connect regardless of maxRetries. If set to 0, the client will ***NOT*** try to reconnect. |\n| unlink| Defaults to true meaning that the module will take care of deleting the IPC socket prior to startup.  If you use `node-ipc` in a clustered environment where there will be multiple listeners on the same socket, you must set this to `false` and then take care of deleting the socket in your own code. |\n| interfaces| primarily used when specifying which interface a client should connect through. see the [socket.connect documentation in the node.js api](https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener) | \n", "original_header": "IPC Config"}, "confidence": 0.9823660250221834, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Used for connecting as a client to local Unix Sockets and Windows Sockets. ***This is the fastest way for processes on the same machine to communicate*** because it bypasses the network card which TCP and UDP must both use. \n| variable | required | definition |\n|----------|----------|------------|\n| id       | required |  is the string id of the socket being connected to. The socket with this id is added to the ipc.of object when created. |\n| path     | optional | is the path of the Unix Domain Socket File, if the System is Windows, this will automatically be converted to an appropriate pipe with the same information as the Unix Domain Socket File. If not set this will default to ` ipc.config.socketRoot `+` ipc.config.appspace `+` id ` |\n| callback | optional | this is the function to execute when the socket has been created. | \n", "original_header": "connectTo"}, "confidence": 0.9034189137095463, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Used to connect as a client to a TCP or [TLS socket](https://github.com/RIAEvangelist/node-ipc/tree/master/example/TLSSocket) via the network card. This can be local or remote, if local, it is recommended that you use the Unix and Windows Socket Implementaion of `connectTo` instead as it is much faster since it avoids the network card altogether. \nFor TLS and SSL Sockets see the [node-ipc TLS and SSL docs](https://github.com/RIAEvangelist/node-ipc/tree/master/example/TLSSocket). They have a few additional requirements, and things to know about and so have their own doc. \n| variable | required | definition |\n|----------|----------|------------|\n| id       | required | is the string id of the socket being connected to. For TCP & TLS sockets, this id is added to the `ipc.of` object when the socket is created with a reference to the socket. |\n| host     | optional | is the host on which the TCP or TLS socket resides.  This will default to  `ipc.config.networkHost` if not specified. |\n| port     | optional | the port on which the TCP or TLS socket resides. |\n| callback | optional | this is the function to execute when the socket has been created. | \n", "original_header": "connectToNet"}, "confidence": 0.9432366906893218, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Used to disconnect a client from a Unix, Windows, TCP or TLS socket. The socket and its refrence will be removed from memory and the `ipc.of` scope. This can be local or remote. UDP clients do not maintain connections and so there are no Clients and this method has no value to them. \n| variable | required | definition |\n|----------|----------|------------|\n| id       | required | is the string id of the socket from which to disconnect. | \n", "original_header": "disconnect"}, "confidence": 0.8990411716092446, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Used to create local Unix Socket Server or Windows Socket Server to which Clients can bind. The server can `emit` events to specific Client Sockets, or `broadcast` events to all known Client Sockets.    \n", "original_header": "serve"}, "confidence": 0.8988542201945193, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Used to create TCP, TLS or UDP Socket Server to which Clients can bind or other servers can send data to. The server can `emit` events to specific Client Sockets, or `broadcast` events to all known Client Sockets. \n", "original_header": "serveNet"}, "confidence": 0.945924449965081, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "| variable  | definition |\n|-----------|------------|\n| ipc.of    | This is where socket connection refrences will be stored when connecting to them as a client via the `ipc.connectTo` or `iupc.connectToNet`. They will be stored based on the ID used to create them, eg : ipc.of.mySocket|\n| ipc.server| This is a refrence to the server created by `ipc.serve` or `ipc.serveNet`| \n", "original_header": "IPC Stores and Default Variables"}, "confidence": 0.9769792189267289, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}], "installation": [{"result": {"type": "Text_excerpt", "value": "`npm install node-ipc`\n \n", "original_header": "node-ipc"}, "confidence": 0.991777711358645, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "`npm install node-ipc@^9.0.0`\n \n", "original_header": "for node &lt;v14"}, "confidence": 0.991777711358645, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "npm info :  [See npm trends and stats for node-ipc](http://npm-stat.com/charts.html?package=node-ipc&author=&from=&to=)   \n[![NPM](https://nodei.co/npm/node-ipc.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-ipc/)\n[![Package Quality](http://npm.packagequality.com/badge/node-ipc.png)](http://packagequality.com/#?package=node-ipc)  \n![node-ipc npm version](https://img.shields.io/npm/v/node-ipc.svg) ![supported node version for node-ipc](https://img.shields.io/node/v/node-ipc.svg) ![total npm downloads for node-ipc](https://img.shields.io/npm/dt/node-ipc.svg) ![monthly npm downloads for node-ipc](https://img.shields.io/npm/dm/node-ipc.svg) ![npm licence for node-ipc](https://img.shields.io/npm/l/node-ipc.svg)  \n", "original_header": "NPM Stats"}, "confidence": 0.8062637673058635, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "You may want to install jasmine and istanbul globally with ` sudo npm install -g jasmine istanbul ` \n", "original_header": "Testing"}, "confidence": 0.9926873898705071, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "| OS  | Supported Sockets  |\n|-----|--------------------|\n|Linux| Unix, Posix, TCP, TLS, UDP|\n|Mac  | Unix, Posix, TCP, TLS, UDP|\n|Win  | Windows, TCP, TLS, UDP      |   \n", "original_header": "Types of IPC Sockets"}, "confidence": 0.9061772755439043, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "Set these variables in the `ipc.config` scope to overwrite or set default values.\n```javascript\n\n    {\n        appspace        : 'app.',\n        socketRoot      : '/tmp/',\n        id              : os.hostname(),\n        networkHost     : 'localhost', //should resolve to 127.0.0.1 or ::1 see the table below related to this\n        networkPort     : 8000,\n        readableAll     : false,\n        writableAll     : false,\n        encoding        : 'utf8',\n        rawBuffer       : false,\n        delimiter       : '\\f',\n        sync            : false,\n        silent          : false,\n        logInColor      : true,\n        logDepth        : 5,\n        logger          : console.log,\n        maxConnections  : 100,\n        retry           : 500,\n        maxRetries      : false,\n        stopRetrying    : false,\n        unlink          : true,\n        interfaces      : {\n            localAddress: false,\n            localPort   : false,\n            family      : false,\n            hints       : false,\n            lookup      : false\n        }\n    }\n\n```\n \n", "original_header": "IPC Config"}, "confidence": 0.832473815091722, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "The log also uses util.inspect You can control if it should log in color, the log depth, and the destination via ` ipc.config `\n```javascript\n\n    ipc.config.logInColor=true; //default\n    ipc.config.logDepth=5; //default    \n    ipc.config.logger=console.log.bind(console); // default\n\n```\n \n", "original_header": "log"}, "confidence": 0.8036743213001264, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "node-ipc"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}], "logo": [{"result": {"type": "Url", "value": "https://nodei.co/npm/node-ipc.png?downloads=true&amp;downloadRank=true&amp;stars=true"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}], "image": [{"result": {"type": "Url", "value": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master//coverage/lcov.svg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/RIAEvangelist/node-ipc/master/README.md"}]}