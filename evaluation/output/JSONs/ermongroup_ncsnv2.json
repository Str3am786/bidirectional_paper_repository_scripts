{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:17:22"}, "code_repository": [{"result": {"value": "https://github.com/ermongroup/ncsnv2", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "ermongroup", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2020-06-17T08:50:11Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-20T03:53:23Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "MIT License\n\nCopyright (c) 2020 Yang Song (yangsong@cs.stanford.edu)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/LICENSE"}], "description": [{"result": {"value": "The official PyTorch implementation for NCSNv2 (NeurIPS 2020)", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "This repo contains the official implementation for the paper [Improved Techniques for Training Score-Based Generative Models](http://arxiv.org/abs/2006.09011).  \nWe significantly improve the method proposed in [Generative Modeling by Estimating Gradients of the Data Distribution](https://arxiv.org/abs/1907.05600). Score-based generative models are flexible neural networks trained to capture the score function of an underlying data distribution\u2014a vector field pointing to directions where the data density increases most rapidly. We present new techniques to improve the performance of score-based generative models, scaling them to *high resolution images* that are previously impossible. *Without requiring adversarial training*, they can produce sharp and diverse image samples that rival GANs. \n(**From left to right**: Our samples on FFHQ 256px, LSUN bedroom 128px, LSUN tower 128px, LSUN church_outdoor 96px, and CelebA 64px.)\n \n", "original_header": "Improved Techniques for Training Score-Based Generative Models"}, "confidence": 0.9749633252258906, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "You can produce samples using it on all datasets we tested in the paper. It assumes the `--exp` argument is set to `exp`.\n \n", "original_header": "Pretrained Checkpoints"}, "confidence": 0.9587915663700881, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}], "name": [{"result": {"value": "ncsnv2", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "ermongroup/ncsnv2", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/ermongroup/ncsnv2/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/ermongroup/ncsnv2/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 230, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "diffusion-models, generative-models, neurips-2020, score-based-generative-modeling, score-matching", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 51, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/ermongroup/ncsnv2/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 142935}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "requirements": [{"result": {"value": "Run the following to install all necessary python packages for our code.\n\n```bash\npip install -r requirements.txt\n```\n", "type": "Text_excerpt", "original_header": "Dependencies", "parent_header": ["Improved Techniques for Training Score-Based Generative Models", "Running Experiments"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}], "run": [{"result": {"value": "`main.py` is the file that you should run for both training and sampling. Execute ```python main.py --help``` to get its usage description:\n\n```\nusage: main.py [-h] --config CONFIG [--seed SEED] [--exp EXP] --doc DOC\n               [--comment COMMENT] [--verbose VERBOSE] [--test] [--sample]\n               [--fast_fid] [--resume_training] [-i IMAGE_FOLDER] [--ni]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --config CONFIG       Path to the config file\n  --seed SEED           Random seed\n  --exp EXP             Path for saving running related data.\n  --doc DOC             A string for documentation purpose. Will be the name\n                        of the log folder.\n  --comment COMMENT     A string for experiment comment\n  --verbose VERBOSE     Verbose level: info | debug | warning | critical\n  --test                Whether to test the model\n  --sample              Whether to produce samples from the model\n  --fast_fid            Whether to do fast fid test\n  --resume_training     Whether to resume training\n  -i IMAGE_FOLDER, --image_folder IMAGE_FOLDER\n                        The folder name of samples\n  --ni                  No interaction. Suitable for Slurm Job launcher\n```\n\nConfiguration files are in `config/`. You don't need to include the prefix `config/` when specifying  `--config` . All files generated when running the code is under the directory specified by `--exp`. They are structured as:\n\n```bash\n<exp> # a folder named by the argument `--exp` given to main.py\n\u251c\u2500\u2500 datasets # all dataset files\n\u251c\u2500\u2500 logs # contains checkpoints and samples produced during training\n\u2502   \u2514\u2500\u2500 <doc> # a folder named by the argument `--doc` specified to main.py\n\u2502      \u251c\u2500\u2500 checkpoint_x.pth # the checkpoint file saved at the x-th training iteration\n\u2502      \u251c\u2500\u2500 config.yml # the configuration file for training this model\n\u2502      \u251c\u2500\u2500 stdout.txt # all outputs to the console during training\n\u2502      \u2514\u2500\u2500 samples # all samples produced during training\n\u251c\u2500\u2500 fid_samples # contains all samples generated for fast fid computation\n\u2502   \u2514\u2500\u2500 <i> # a folder named by the argument `-i` specified to main.py\n\u2502      \u2514\u2500\u2500 ckpt_x # a folder of image samples generated from checkpoint_x.pth\n\u251c\u2500\u2500 image_samples # contains generated samples\n\u2502   \u2514\u2500\u2500 <i>\n\u2502       \u2514\u2500\u2500 image_grid_x.png # samples generated from checkpoint_x.pth       \n\u2514\u2500\u2500 tensorboard # tensorboard files for monitoring training\n    \u2514\u2500\u2500 <doc> # this is the log_dir of tensorboard\n```\n", "type": "Text_excerpt", "original_header": "Project structure", "parent_header": ["Improved Techniques for Training Score-Based Generative Models", "Running Experiments"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}, {"result": {"value": "For example, we can train an NCSNv2 on LSUN bedroom by running the following\n\n```bash\npython main.py --config bedroom.yml --doc bedroom\n```\n\nLog files will be saved in `<exp>/logs/bedroom`.\n", "type": "Text_excerpt", "original_header": "Training", "parent_header": ["Improved Techniques for Training Score-Based Generative Models", "Running Experiments"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}, {"result": {"value": "If we want to sample from NCSNv2 on LSUN bedroom, we can edit `bedroom.yml` to specify the `ckpt_id` under the group `sampling`, and then run the following\n\n```bash\npython main.py --sample --config bedroom.yml -i bedroom\n```\n\nSamples will be saved in `<exp>/image_samples/bedroom`.\n\nWe can interpolate between different samples (see more details in the paper). Just set `interpolation` to `true` and an appropriate `n_interpolations` under the group of `sampling` in `bedroom.yml`. We can also perform other tasks such as inpainting. Usages should be quite obvious if you read the code and configuration files carefully.\n", "type": "Text_excerpt", "original_header": "Sampling", "parent_header": ["Improved Techniques for Training Score-Based Generative Models", "Running Experiments"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}, {"result": {"value": "We can specify `begin_ckpt` and `end_ckpt` under the `fast_fid` group in the configuration file. For example, by running the following command, we can generate a small number of samples per checkpoint within the range `begin_ckpt`-`end_ckpt` for a quick (and rough) FID evaluation.\n\n```shell\npython main.py --fast_fid --config bedroom.yml -i bedroom\n```\n\nYou can find samples in `<exp>/fid_samples/bedroom`.\n", "type": "Text_excerpt", "original_header": "Computing FID values quickly for a range of checkpoints", "parent_header": ["Improved Techniques for Training Score-Based Generative Models", "Running Experiments"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}], "citation": [{"result": {"value": "If you find the code/idea useful for your research, please consider citing\n\n```bib\n@inproceedings{song2020improved,\n  author    = {Yang Song and Stefano Ermon},\n  editor    = {Hugo Larochelle and\n               Marc'Aurelio Ranzato and\n               Raia Hadsell and\n               Maria{-}Florina Balcan and\n               Hsuan{-}Tien Lin},\n  title     = {Improved Techniques for Training Score-Based Generative Models},\n  booktitle = {Advances in Neural Information Processing Systems 33: Annual Conference\n               on Neural Information Processing Systems 2020, NeurIPS 2020, December\n               6-12, 2020, virtual},\n  year      = {2020}\n}\n```\n\nand/or our previous work\n\n```bib\n@inproceedings{song2019generative,\n  title={Generative Modeling by Estimating Gradients of the Data Distribution},\n  author={Song, Yang and Ermon, Stefano},\n  booktitle={Advances in Neural Information Processing Systems},\n  pages={11895--11907},\n  year={2019}\n}\n```\n\n", "type": "Text_excerpt", "original_header": "References", "parent_header": ["Improved Techniques for Training Score-Based Generative Models"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}, {"result": {"value": "@inproceedings{song2020improved,\n  author    = {Yang Song and Stefano Ermon},\n  editor    = {Hugo Larochelle and\n               Marc'Aurelio Ranzato and\n               Raia Hadsell and\n               Maria{-}Florina Balcan and\n               Hsuan{-}Tien Lin},\n  title     = {Improved Techniques for Training Score-Based Generative Models},\n  booktitle = {Advances in Neural Information Processing Systems 33: Annual Conference\n               on Neural Information Processing Systems 2020, NeurIPS 2020, December\n               6-12, 2020, virtual},\n  year      = {2020}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}, {"result": {"value": "@inproceedings{song2019generative,\n  title={Generative Modeling by Estimating Gradients of the Data Distribution},\n  author={Song, Yang and Ermon, Stefano},\n  booktitle={Advances in Neural Information Processing Systems},\n  pages={11895--11907},\n  year={2019}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Computer Vision"}, "confidence": 0.8630360210370351, "technique": "supervised_classification"}], "full_title": [{"result": {"type": "String", "value": "Improved Techniques for Training Score-Based Generative Models"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}], "image": [{"result": {"type": "Url", "value": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/assets/samples.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/abs/2011.13456"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1907.05600"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ermongroup/ncsnv2/master/README.md"}]}