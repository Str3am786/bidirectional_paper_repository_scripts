{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:11:24"}, "code_repository": [{"result": {"value": "https://github.com/renatahodovan/picireny", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "renatahodovan", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2016-07-16T08:41:56Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-07-27T05:06:02Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": null, "type": "License", "name": "Other", "url": null, "spdx_id": "NOASSERTION"}, "confidence": 1, "technique": "GitHub_API"}], "description": [{"result": {"value": "Hierarchical Delta Debugging Framework", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "*Picireny* is a Python implementation of the Hierarchical Delta Debugging\n(HDD in short) algorithm adapted to use ANTLR_ v4 for parsing both the input\nand the grammar(s) describing the format of the input. It relies on Picire_\nto provide the implementation of the core Delta Debugging algorithm along\nwith various tweaks like parallelization. Just like the *Picire* framework,\n*Picireny* can also be used either as a command line tool or as a library. \nBoth Hierarchical Delta Debugging and Delta Debugging automatically reduce\n\"interesting\" tests while keeping their \"interesting\" behaviour. (E.g.,\n\"interestingness\" may mean failure-inducing input to a system-under-test.)\nHowever, HDD is an improvement that tries to investigate less test cases during\nthe reduction process by making use of knowledge on the structure of the input. \nThe tool (and the algorithm) works iteratively in several ways. As a first\nstep, it splits up the input into tokens and organizes them in a tree structure\nas defined by a grammar. Then, iteratively, it invokes Delta Debugging on each\nlevel of the tree from top to bottom, and DD is an iterative process itself,\ntoo. Finally, the nodes kept in the tree are \"unparsed\" to yield a reduced but\nstill \"interesting\" output. \n"}, "confidence": 0.9290023032276921, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}], "name": [{"result": {"value": "picireny", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "renatahodovan/picireny", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/renatahodovan/picireny/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/renatahodovan/picireny/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 49, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "antlr4, delta-debugging, hacktoberfest, test-automation, test-reduction", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 5, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/renatahodovan/picireny/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 115711}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "ANTLR", "name": "ANTLR", "type": "Programming_language", "size": 22596}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Java", "name": "Java", "type": "Programming_language", "size": 16629}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 351}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Batchfile", "name": "Batchfile", "type": "Programming_language", "size": 341}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/renatahodovan/picireny/master/tests/resources/test-json-obj-arr-baz.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/renatahodovan/picireny/master/tests/resources/test-inijson-str-arr-87.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/renatahodovan/picireny/master/tests/resources/test-json-obj-arr-bar.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/renatahodovan/picireny/master/tests/resources/test-json-obj-arr-87.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/renatahodovan/picireny/master/tests/resources/test-json-obj-arr-foo.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "requirements": [{"result": {"value": "* Python_ >= 3.7\n* Java_ SE >= 11 JRE or JDK (the latter is optional, only needed if Java is used\n  as the parser language)\n\n.. _Python: https://www.python.org\n.. _Java: https://www.oracle.com/java/\n\n", "type": "Text_excerpt", "original_header": "Requirements"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}], "installation": [{"result": {"value": "To use *Picireny* in another project, it can be added to ``setup.cfg`` as an\ninstall requirement (if using setuptools_ with declarative config):\n\n.. code-block:: ini\n\n    [options]\n    install_requires =\n        picireny\n\nTo install *Picireny* manually, e.g., into a virtual environment, use pip_::\n\n    pip install picireny\n\nThe above approaches install the latest release of *Picireny* from PyPI_.\nAlternatively, for the development version, clone the project and perform a\nlocal install::\n\n    pip install .\n\n.. _setuptools: https://github.com/pypa/setuptools\n.. _pip: https://pip.pypa.io\n.. _PyPI: https://pypi.org/\n\n", "type": "Text_excerpt", "original_header": "Install"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}, {"result": {"type": "Text_excerpt", "value": ".. image:: https://img.shields.io/pypi/v/picireny?logo=python&logoColor=white\n   :target: https://pypi.org/project/picireny/\n.. image:: https://img.shields.io/pypi/l/picireny?logo=open-source-initiative&logoColor=white\n   :target: https://pypi.org/project/picireny/\n.. image:: https://img.shields.io/github/actions/workflow/status/renatahodovan/picireny/main.yml?branch=master&logo=github&logoColor=white\n   :target: https://github.com/renatahodovan/picireny/actions\n.. image:: https://img.shields.io/coveralls/github/renatahodovan/picireny/master?logo=coveralls&logoColor=white\n   :target: https://coveralls.io/github/renatahodovan/picireny \n"}, "confidence": 0.8641954991554377, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}], "usage": [{"result": {"value": "*Picireny* uses the same CLI as *Picire* and hence accepts the same\noptions_.\nOn top of the inherited ones, *Picireny* accepts several further arguments:\n\n* ``--grammar`` (optional): List of grammars describing the input format. (You\n  can write them by hand or simply download them from the\n  `ANTLR v4 grammars repository`_.)\n* ``--start`` (optional): Name of the start rule (optionally prefixed with a\n  grammar name) as ``[grammarname:]rulename``.\n* ``--replacements`` (optional): Json file containing rule names and minimal\n  replacement strings (otherwise these are calculated automatically) (see\n  schema__).\n* ``--format`` (optional): Json file describing the input format (see schema__\n  and example_). This descriptor can incorporate all the above (``--grammar``,\n  ``--start`` and ``--replacements``) properties, along with the possibility of\n  island grammar definitions. If both ``--format`` and the aforementioned\n  arguments are present, then the latter will override the appropriate values of\n  the format file.\n* ``--antlr`` (optional): Path to the ANTLR tool jar.\n* ``--parser`` (optional): Language of the generated parser. Currently 'python'\n  (default) and 'java' targets (faster, but needs JDK) are supported.\n\nNote: although, all the arguments are optional, the grammar files and the start\nrule of the top-level parser must be defined with an arbitrary combination of the\n``--format``, ``--grammars``, and ``--start`` arguments.\n\n.. _options: https://github.com/renatahodovan/picire/tree/master/README.rst#usage\n.. _`ANTLR v4 grammars repository`: https://github.com/antlr/grammars-v4\n.. __: schemas/replacements.json\n.. __: schemas/format.json\n.. _example: tests/resources/inijson.json\n\nExample usage to reduce an HTML file::\n\n    picireny --input=<path/to/the/input.html> --test=<path/to/the/tester> \\\n             --grammar HTMLLexer.g4 HTMLParser.g4 --start htmlDocument \\\n             --parallel --subset-iterator=skip --complement-iterator=backward\n\n", "type": "Text_excerpt", "original_header": "Usage"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}], "acknowledgement": [{"result": {"value": "*Picireny* is motivated by the idea of Hierarchical Delta Debugging:\n\n* Ghassan Misherghi and Zhendong Su. HDD: Hierarchical Delta Debugging.\n  In Proceedings of the 28th International Conference on Software Engineering\n  (ICSE '06), pages 142-151, Shanghai, China, May 2006. ACM.\n  https://doi.org/10.1145/1134285.1134307\n\nThe details of the modernized re-implementation and further improvements are\npublished in:\n\n* Renata Hodovan and Akos Kiss. Modernizing Hierarchical Delta Debugging.\n  In Proceedings of the 7th International Workshop on Automating Test Case\n  Design, Selection, and Evaluation (A-TEST 2016), pages 31-37, Seattle,\n  Washington, USA, November 2016. ACM.\n  https://doi.org/10.1145/2994291.2994296\n* Renata Hodovan, Akos Kiss, and Tibor Gyimothy. Tree Preprocessing and Test\n  Outcome Caching for Efficient Hierarchical Delta Debugging.\n  In Proceedings of the 12th IEEE/ACM International Workshop on Automation of\n  Software Testing (AST 2017), pages 23-29, Buenos Aires, Argentina, May 2017.\n  IEEE.\n  https://doi.org/10.1109/AST.2017.4\n* Renata Hodovan, Akos Kiss, and Tibor Gyimothy. Coarse Hierarchical Delta\n  Debugging.\n  In Proceedings of the 33rd IEEE International Conference on Software\n  Maintenance and Evolution (ICSME 2017), pages 194-203, Shanghai, China,\n  September 2017. IEEE.\n  https://doi.org/10.1109/ICSME.2017.26\n* Akos Kiss, Renata Hodovan, and Tibor Gyimothy. HDDr: A Recursive Variant of\n  the Hierarchical Delta Debugging Algorithm.\n  In Proceedings of the 9th ACM SIGSOFT International Workshop on Automating\n  Test Case Design, Selection, and Evaluation (A-TEST 2018), pages 16-22, Lake\n  Buena Vista, Florida, USA, November 2018. ACM.\n  https://doi.org/10.1145/3278186.3278189\n* Daniel Vince, Renata Hodovan, Daniella Barsony, and Akos Kiss. Extending\n  Hierarchical Delta Debugging with Hoisting.\n  In Proceedings of the 2nd ACM/IEEE International Conference on Automation of\n  Software Test (AST 2021), pages 60-69, Madrid, Spain (Virtual), May 2021.\n  IEEE.\n  https://doi.org/10.1109/AST52587.2021.00015\n* Daniel Vince, Renata Hodovan, Daniella Barsony, and Akos Kiss. The effect of\n  hoisting on variants of Hierarchical Delta Debugging.\n  Journal of Software: Evolution and Process, 34(11):e2483,1-26, November 2022.\n  Wiley.\n  https://doi.org/10.1002/smr.2483\n\n", "type": "Text_excerpt", "original_header": "Acknowledgement and Citations"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}], "citation": [{"result": {"value": "*Picireny* is motivated by the idea of Hierarchical Delta Debugging:\n\n* Ghassan Misherghi and Zhendong Su. HDD: Hierarchical Delta Debugging.\n  In Proceedings of the 28th International Conference on Software Engineering\n  (ICSE '06), pages 142-151, Shanghai, China, May 2006. ACM.\n  https://doi.org/10.1145/1134285.1134307\n\nThe details of the modernized re-implementation and further improvements are\npublished in:\n\n* Renata Hodovan and Akos Kiss. Modernizing Hierarchical Delta Debugging.\n  In Proceedings of the 7th International Workshop on Automating Test Case\n  Design, Selection, and Evaluation (A-TEST 2016), pages 31-37, Seattle,\n  Washington, USA, November 2016. ACM.\n  https://doi.org/10.1145/2994291.2994296\n* Renata Hodovan, Akos Kiss, and Tibor Gyimothy. Tree Preprocessing and Test\n  Outcome Caching for Efficient Hierarchical Delta Debugging.\n  In Proceedings of the 12th IEEE/ACM International Workshop on Automation of\n  Software Testing (AST 2017), pages 23-29, Buenos Aires, Argentina, May 2017.\n  IEEE.\n  https://doi.org/10.1109/AST.2017.4\n* Renata Hodovan, Akos Kiss, and Tibor Gyimothy. Coarse Hierarchical Delta\n  Debugging.\n  In Proceedings of the 33rd IEEE International Conference on Software\n  Maintenance and Evolution (ICSME 2017), pages 194-203, Shanghai, China,\n  September 2017. IEEE.\n  https://doi.org/10.1109/ICSME.2017.26\n* Akos Kiss, Renata Hodovan, and Tibor Gyimothy. HDDr: A Recursive Variant of\n  the Hierarchical Delta Debugging Algorithm.\n  In Proceedings of the 9th ACM SIGSOFT International Workshop on Automating\n  Test Case Design, Selection, and Evaluation (A-TEST 2018), pages 16-22, Lake\n  Buena Vista, Florida, USA, November 2018. ACM.\n  https://doi.org/10.1145/3278186.3278189\n* Daniel Vince, Renata Hodovan, Daniella Barsony, and Akos Kiss. Extending\n  Hierarchical Delta Debugging with Hoisting.\n  In Proceedings of the 2nd ACM/IEEE International Conference on Automation of\n  Software Test (AST 2021), pages 60-69, Madrid, Spain (Virtual), May 2021.\n  IEEE.\n  https://doi.org/10.1109/AST52587.2021.00015\n* Daniel Vince, Renata Hodovan, Daniella Barsony, and Akos Kiss. The effect of\n  hoisting on variants of Hierarchical Delta Debugging.\n  Journal of Software: Evolution and Process, 34(11):e2483,1-26, November 2022.\n  Wiley.\n  https://doi.org/10.1002/smr.2483\n\n", "type": "Text_excerpt", "original_header": "Acknowledgement and Citations"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}], "full_title": [{"result": {"type": "String", "value": "Requirements"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/renatahodovan/picireny/master/README.rst"}]}