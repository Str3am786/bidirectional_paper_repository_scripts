{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:22:34"}, "code_repository": [{"result": {"value": "https://github.com/microsoft/SEAL", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "microsoft", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2018-11-09T00:33:14Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-21T08:08:18Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "    MIT License\n\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/LICENSE"}], "description": [{"result": {"value": "Microsoft SEAL is an easy-to-use and powerful homomorphic encryption library.", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Microsoft SEAL is an easy-to-use open-source ([MIT licensed](LICENSE)) homomorphic encryption library developed by the Cryptography and Privacy Research Group at Microsoft.\nMicrosoft SEAL is written in modern standard C++ and is easy to compile and run in many different environments.\nFor more information about the Microsoft SEAL project, see [sealcrypto.org](https://www.microsoft.com/en-us/research/project/microsoft-seal).\n\nThis document pertains to Microsoft SEAL version 4.1.\nUsers of previous versions of the library should look at the [list of changes](CHANGES.md).\n", "type": "Text_excerpt", "original_header": "Microsoft SEAL", "parent_header": ["Microsoft SEAL", "Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "Most encryption schemes consist of three functionalities: key generation, encryption, and decryption.\nSymmetric-key encryption schemes use the same secret key for both encryption and decryption; public-key encryption schemes use separately a public key for encryption and a secret key for decryption.\nTherefore, public-key encryption schemes allow anyone who knows the public key to encrypt data, but only those who know the secret key can decrypt and read the data.\nSymmetric-key encryption can be used for efficiently encrypting very large amounts of data, and enables secure outsourced cloud storage.\nPublic-key encryption is a fundamental concept that enables secure online communication today, but is typically much less efficient than symmetric-key encryption.\n\nWhile traditional symmetric- and public-key encryption can be used for secure storage and communication, any outsourced computation will necessarily require such encryption layers to be removed before computation can take place.\nTherefore, cloud services providing outsourced computation capabilities must have access to the secret keys, and implement access policies to prevent unauthorized employees from getting access to these keys.\n", "type": "Text_excerpt", "original_header": "Core Concepts", "parent_header": ["Microsoft SEAL", "Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "Homomorphic encryption refers to encryption schemes that allow the cloud to compute directly on the encrypted data, without requiring the data to be decrypted first.\nThe results of such encrypted computations remain encrypted, and can be only decrypted with the secret key (by the data owner).\nMultiple homomorphic encryption schemes with different capabilities and trade-offs have been invented over the past decade; most of these are public-key encryption schemes, although the public-key functionality may not always be needed.\n\nHomomorphic encryption is not a generic technology: only some computations on encrypted data are possible.\nIt also comes with a substantial performance overhead, so computations that are already very costly to perform on unencrypted data are likely to be infeasible on encrypted data.\nMoreover, data encrypted with homomorphic encryption is many times larger than unencrypted data, so it may not make sense to encrypt, e.g., entire large databases, with this technology.\nInstead, meaningful use-cases are in scenarios where strict privacy requirements prohibit unencrypted cloud computation altogether, but the computations themselves are fairly lightweight.\n\nTypically, homomorphic encryption schemes have a single secret key which is held by the data owner.\nFor scenarios where multiple different private data owners wish to engage in collaborative computation, homomorphic encryption is probably not a reasonable solution.\n\nHomomorphic encryption cannot be used to enable data scientists to circumvent GDPR.\nFor example, there is no way for a cloud service to use homomorphic encryption to draw insights from encrypted customer data.\nInstead, results of encrypted computations remain encrypted and can only be decrypted by the owner of the data, e.g., a cloud service customer.\n\nMost homomorphic encryption schemes provide weaker security guarantees than traditional encryption schemes. You need to read [SECURITY.md](SECURITY.md) if you are thinking of building production software using Microsoft SEAL.\n\n### Microsoft SEAL\n\nMicrosoft SEAL is a homomorphic encryption library that allows additions and multiplications to be performed on encrypted integers or real numbers.\nOther operations, such as encrypted comparison, sorting, or regular expressions, are in most cases not feasible to evaluate on encrypted data using this technology.\nTherefore, only specific privacy-critical cloud computation parts of programs should be implemented with Microsoft SEAL.\n\nIt is not always easy or straightforward to translate an unencrypted computation into a computation on encrypted data, for example, it is not possible to branch on encrypted data.\nMicrosoft SEAL itself has a steep learning curve and requires the user to understand many homomorphic encryption specific concepts, even though in the end the API is not too complicated.\nEven if a user is able to program and run a specific computation using Microsoft SEAL, the difference between efficient and inefficient implementations can be several orders of magnitude, and it can be hard for new users to know how to improve the performance of their computation.\n\nMicrosoft SEAL comes with two different homomorphic encryption schemes with very different properties.\nThe BFV and BGV schemes allow modular arithmetic to be performed on encrypted integers.\nThe CKKS scheme allows additions and multiplications on encrypted real or complex numbers, but yields only approximate results.\nIn applications such as summing up encrypted real numbers, evaluating machine learning models on encrypted data, or computing distances of encrypted locations CKKS is going to be by far the best choice.\nFor applications where exact values are necessary, the BFV and BGV schemes are more suitable.\n", "type": "Text_excerpt", "original_header": "Homomorphic Encryption", "parent_header": ["Microsoft SEAL", "Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The [BGV scheme](https://eprint.iacr.org/2011/277) is now available in Microsoft SEAL.\nImplementation details are described in [this paper](https://eprint.iacr.org/2020/1481.pdf).\nWe truly appreciate [Alibaba Gemini Lab](https://alibaba-gemini-lab.github.io/) for making massive efforts to develop the BGV scheme and integrate it in Microsoft SEAL. And we would like to thank Privacy Technologies Research, Intel Labs, for continuous testing and reporting issues. \nStarting from version 3.7.2, Microsoft SEAL will push new changes to the `main`, `master`, and `contrib` branches without creating a new version.\nWe adopt this approach to merge community contribution and resolve issues in a timely manner.\nThese branches will stay ahead of the latest version branch/tag.\nNew versions will be created when there are important bug fixes or new features. \nThe [EVA compiler for CKKS](https://arxiv.org/abs/1912.11951) is available at [GitHub.com/Microsoft/EVA](https://GitHub.com/Microsoft/EVA). See [CKKS Programming with EVA](#ckks-programming-with-eva) below for more information. \nThe [APSI library for Asymmetric PSI](https://eprint.iacr.org/2021/1116) is available at [Github.com/Microsoft/APSI](https://github.com/microsoft/APSI).\n \n", "original_header": "News"}, "confidence": 0.9408050084232568, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The native libraries generated through these methods are meant to be called only through the .NET library described in the following sections.\nSpecifically, they do not contain any wrappers that can be used from Java (for Android) or Objective C (for iOS).\n \n", "original_header": "Building for Android and iOS"}, "confidence": 0.9442616342627816, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Building will generate two output files, `seal_wasm.js` and `seal_wasm.wasm`, in the `build/bin/` directory.\nThe file sizes for the artifacts are very small.\nThis is because that the optimization flags perform dead code elimination (DCE) as there are no bindings generated to JavaScript.\nDefining these bindings is **necessary** in order to call into WebAssembly from the JavaScript domain; however, Microsoft SEAL does not include any definitions at this time.\nThe build flag `--bind` expects the bindings to be specified using the [embind](https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html) syntax.\n \n", "original_header": "Building for WebAssembly"}, "confidence": 0.9667849373646814, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The following options can be used with CMake to configure the build. The default value for each option is denoted with boldface in the **Values** column. \n| CMake option           | Values                                                       | Information                                                                                                                                                                                            |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| CMAKE_BUILD_TYPE       | **Release**</br>Debug</br>RelWithDebInfo</br>MinSizeRel</br> | `Debug` and `MinSizeRel` have worse run-time performance. `Debug` inserts additional assertion code. Set to `Release` unless you are developing Microsoft SEAL itself or debugging some complex issue. |\n| SEAL_BUILD_EXAMPLES    | ON / **OFF**                                                 | Build the C++ examples in [native/examples](native/examples).                                                                                                                                          |\n| SEAL_BUILD_TESTS       | ON / **OFF**                                                 | Build the tests to check that Microsoft SEAL works correctly.                                                                                                                                          |\n| SEAL_BUILD_BENCH       | ON / **OFF**                                                 | Build the performance benchmark.                                                                                                                                                                       |\n| SEAL_BUILD_DEPS        | **ON** / OFF                                                 | Set to `ON` to automatically download and build [optional dependencies](#optional-dependencies); otherwise CMake will attempt to locate pre-installed dependencies.                                    |\n| SEAL_USE_INTEL_HEXL    | ON / **OFF**                                                 | Set to `ON` to use Intel HEXL for low-level kernels.                                                                                                                                            |\n| SEAL_USE_MSGSL         | **ON** / OFF                                                 | Build with Microsoft GSL support.                                                                                                                                                                      |\n| SEAL_USE_ZLIB          | **ON** / OFF                                                 | Build with ZLIB support.                                                                                                                                                                               |\n| SEAL_USE_ZSTD          | **ON** / OFF                                                 | Build with Zstandard support.                                                                                                                                                                          |\n| BUILD_SHARED_LIBS      | ON / **OFF**                                                 | Set to `ON` to build a shared library instead of a static library. Not supported in Windows.                                                                                                           |\n| SEAL_BUILD_SEAL_C      | ON / **OFF**                                                 | Build the C wrapper library SEAL_C. This is used by the C# wrapper and most users should have no reason to build it.                                                                                   |\n| SEAL_USE_CXX17         | **ON** / OFF                                                 | Set to `ON` to build Microsoft SEAL as C++17 for a positive performance impact.                                                                                                                        |\n| SEAL_USE_INTRIN        | **ON** / OFF                                                 | Set to `ON` to use compiler intrinsics for improved performance. CMake will automatically detect which intrinsics are available and enable them accordingly.                                           | \n", "original_header": "Basic CMake Options"}, "confidence": 0.8098604541343168, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The following options can be used with CMake to further configure the build. Most users should have no reason to change these, which is why they are marked as advanced. \n| CMake option                         | Values                    | Information                                                                                                                                                                                                                                                                                              |\n| ------------------------------------ | ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT | **ON** / OFF              | Set to `ON` to throw an exception when Microsoft SEAL produces a ciphertext with no key-dependent component. For example, subtracting a ciphertext from itself, or multiplying a ciphertext with a plaintext zero yield identically zero ciphertexts that should not be considered as valid ciphertexts. |\n| SEAL_BUILD_STATIC_SEAL_C             | ON / **OFF**              | Set to `ON` to build SEAL_C as a static library instead of a shared library.                                                                                                                                                                                                                             |\n| SEAL_DEFAULT_PRNG                    | **Blake2xb**</br>Shake256 | Microsoft SEAL supports both Blake2xb and Shake256 XOFs for generating random bytes. Blake2xb is much faster, but it is not standardized, whereas Shake256 is a FIPS standard.                                                                                                                           |\n| SEAL_USE_GAUSSIAN_NOISE              | ON / **OFF**              | Set to `ON` to use a non-constant time rounded continuous Gaussian for the error distribution; otherwise a centered binomial distribution &ndash; with slightly larger standard deviation &ndash; is used.                                                                                               |\n| SEAL_AVOID_BRANCHING                 | ON / **OFF**              | Set to `ON` to eliminate branching in critical functions when compiler has maliciously inserted flags; otherwise assume `cmov` is used.                                                                                               |\n| SEAL_SECURE_COMPILE_OPTIONS          | ON / **OFF**              | Set to `ON` to compile/link with Control-Flow Guard (`/guard:cf`) and Spectre mitigations (`/Qspectre`). This has an effect only when compiling with MSVC.                                                                                                                                               |\n| SEAL_USE_ALIGNED_ALLOC                    | **ON** / OFF              | Set to `ON` to use 64-byte aligned memory allocations. This can improve performance of AVX512 primitives when Intel HEXL is enabled. This depends on C++17 and is disabled on Android.                                                                                               |\n \n", "original_header": "Advanced CMake Options"}, "confidence": 0.9322505279520183, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Microsoft SEAL provides a .NET Standard library that wraps the functionality in Microsoft SEAL for use in .NET development.\nUsing the existing [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) is highly recommended, unless development of Microsoft SEAL or building a custom NuGet package is intended.\nPrior to building .NET components, the C wrapper library SEAL_C must be built following [Building C++ Components](#building-c-components).\nThe SEAL_C library is meant to be used only by the .NET library, not by end-users. \n", "original_header": "Building .NET Components"}, "confidence": 0.9539903520572689, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "While it is possible to build your own custom NuGet package for Android or iOS (see [Building for Android and iOS](#building-for-android-and-ios) for the native component), this is not easy and is not recommended. Instead, please add a reference to the multiplatform [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) to your [Xamarin](https://dotnet.microsoft.com/apps/xamarin) project.\n \n", "original_header": "Android and iOS"}, "confidence": 0.9938360569116361, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "1. Add a reference in your project to `SEALNet.dll`;\n1. Ensure the native shared library is available for your application when run.\nThe easiest way to ensure this is to copy the native shared library to the same directory where your application's executable is located.\n \n", "original_header": "Using Microsoft SEAL for .NET"}, "confidence": 0.9670416122727664, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "name": [{"result": {"value": "SEAL", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "microsoft/SEAL", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/microsoft/SEAL/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/microsoft/SEAL/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 3260, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "cryptography, encryption, homomorphic-encryption", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 667, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/Microsoft/SEAL/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "C++", "name": "C++", "type": "Programming_language", "size": 2565408}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "C#", "name": "C#", "type": "Programming_language", "size": 1039532}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "C", "name": "C", "type": "Programming_language", "size": 83730}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "CMake", "name": "CMake", "type": "Programming_language", "size": 72235}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 1995}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Makefile", "name": "Makefile", "type": "Programming_language", "size": 384}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/88228395", "tag": "v4.1.1", "name": "Release 4.1.1", "author": {"name": "kimlaine", "type": "User"}, "description": "### Bug Fixes\r\n\r\n- Fixed detection of intrinsics on M1 Macs [(PR #597)](https://github.com/microsoft/SEAL/pull/597).\r\n- Fixed old dependency version numbers in [README.md](README.md) [(PR #596)](https://github.com/microsoft/SEAL/pull/596).\r\n- Fixed release date typo in [README.md](README.md).", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v4.1.1", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v4.1.1", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v4.1.1", "url": "https://api.github.com/repos/microsoft/SEAL/releases/88228395", "release_id": 88228395, "date_created": "2023-01-11T00:25:58Z", "date_published": "2023-01-11T04:54:10Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/87847922", "tag": "v4.1.0", "name": "Release 4.1.0", "author": {"name": "kimlaine", "type": "User"}, "description": "### Features\r\n\r\n- The BGV scheme now keeps ciphertexts in NTT form. BGV ciphertext multiplication is much faster than version 4.0.0.\r\n- When a BGV ciphertext saved by previous versions is loaded in the current version, it is automatically converted to NTT form.\r\n- Increased `SEAL_COEFF_MOD_COUNT_MAX`, the maximum number of primes that define the coefficient modulus, from 64 to 256.\r\n\r\n### Other Fixes\r\n\r\n- Fixed typos [(PR #590)](https://github.com/microsoft/SEAL/pull/590).\r\n- Added $schema to cgmanifest.json [(PR #558)](https://github.com/microsoft/SEAL/pull/558).\r\n- Fixed typos [(PR #512)](https://github.com/microsoft/SEAL/pull/512).\r\n- Fixed typos [(PR #530)](https://github.com/microsoft/SEAL/pull/530).\r\n- Fixed typos [(PR #509)](https://github.com/microsoft/SEAL/pull/509).\r\n- Added missing `const` qualifiers [(PR #556)](https://github.com/microsoft/SEAL/pull/556).\r\n- Added vcpkg installation instructions [(PR #562)](https://github.com/microsoft/SEAL/pull/562).\r\n- Fixed an issue in specific environments where allocation fails without throwing `std::bad_alloc`.\r\n- Fixed comments (C++) and C/.NET wrapper implementation of an exception thrown by `invariant_noise_budget`.\r\n\r\n### Major API Changes\r\n\r\n- Added new public methods `mod_reduce_xxx(...)` (native) and `ModReduceXxx(...)` (dotnet) to the class `Evaluator`.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v4.1.0", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v4.1.0", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v4.1.0", "url": "https://api.github.com/repos/microsoft/SEAL/releases/87847922", "release_id": 87847922, "date_created": "2023-01-04T05:24:42Z", "date_published": "2023-01-04T06:11:28Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/62131403", "tag": "v4.0.0", "name": "Release 4.0.0", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "### Features\r\n\r\n- Added BGV scheme [(PR 283)](https://github.com/microsoft/SEAL/pull/283). Thanks, [Alibaba Gemini Lab](https://alibaba-gemini-lab.github.io/)!\r\n- Added a new example \"BGV basics\" to native and dotnet.\r\n- Loading objects serialized by Microsoft SEAL v3.4+ are supported.\r\n- Updated versions of dependencies: GoogleTest from 1.10.0 to 1.11.0 and GoogleBenchmark from 1.5.2 to 1.6.0.\r\n\r\n### Other Fixes\r\n\r\n- Fixed an ambiguous comment [(PR 375)](https://github.com/microsoft/SEAL/pull/375).\r\n\r\n### Major API Changes\r\n\r\n- Added `seal::scheme_type::bgv`.\r\n- Added a new public method `parms_id()` (native) to the class `EncryptionParameters`.\r\n- Added a new public method `Create(...)` (native and dotnet) with three inputs in the class `CoeffModulus`.\r\n- Added a new public method `correction_factor()` (native) or `CorrectionFactor()` (dotnet) to the class `Ciphertext`.\r\n- Removed the friendship of the class `EncryptionParameters` to the class `SEALContext`.\r\n\r\n### File Changes\r\n\r\n- `native/bench/bgv.cpp` is added.\r\n- Examples are renamed and extended.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v4.0.0", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v4.0.0", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v4.0.0", "url": "https://api.github.com/repos/microsoft/SEAL/releases/62131403", "release_id": 62131403, "date_created": "2022-03-17T19:29:24Z", "date_published": "2022-03-17T19:31:06Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/62067458", "tag": "v3.7.3", "name": "Release 3.7.3", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "### Features\r\n\r\n- All output files including downloaded thirdparty dependencies and Visual Studio project and solution files will be created in the build directory [(PR 427)](https://github.com/microsoft/SEAL/pull/427).\r\n- Reduced `util::try_minimal_primitive_root` search iterations by half [(PR 430)](https://github.com/microsoft/SEAL/pull/430). Thanks, [zirconium-n](https://github.com/zirconium-n)!\r\n- Updated .Net SDK version to 6.0.x and supported Visual Studio version to 17 2022.\r\n- Added `SEAL_AVOID_BRANCHING` option to eleminate branching in critical functions when Microsoft SEAL is built with maliciously inserted compiler flags.\r\n\r\n### Bug Fixes\r\n\r\n- Removed exceptions in `KeyGenerator::CreateGaloisKeys` when inputs do not include steps so that even when `EncryptionParameterQualifiers::using_batching` is false Galois automorphisms are still available.\r\n\r\n### File Changes\r\n\r\n- `dotnet/SEALNet.sln` is removed.\r\n- `dotnet/SEALNet.sln.in` is added.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.7.3", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.7.3", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.7.3", "url": "https://api.github.com/repos/microsoft/SEAL/releases/62067458", "release_id": 62067458, "date_created": "2022-03-17T00:33:12Z", "date_published": "2022-03-17T04:15:01Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/53273195", "tag": "v3.7.2", "name": "Release 3.7.2", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "### Bug Fixes\r\n\r\n- Fixed a bug when Intel HEXL is used [(Issue 411)](https://github.com/microsoft/SEAL/issues/411) [(PR414)](https://github.com/microsoft/SEAL/pull/414).\r\n- Fixed an abnormal benchmark case due to AVX512 transitions when Intel HEXL is used [(PR 416)](https://github.com/microsoft/SEAL/pull/416).", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.7.2", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.7.2", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.7.2", "url": "https://api.github.com/repos/microsoft/SEAL/releases/53273195", "release_id": 53273195, "date_created": "2021-11-12T11:05:39Z", "date_published": "2021-11-12T21:46:16Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/50087209", "tag": "v3.7.1", "name": "Release 3.7.1", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "### Bug Fixes\r\n\r\n- Fixed compiler and linker errors in downstream projects when Microsoft SEAL is built with `SEAL_BUILD_DEPS=ON` and `SEAL_USE_INTEL_HEXL=ON`.\r\n- Updated CMake minimum requirement to 3.13.\r\n\r\n### File Changes\r\n\r\n- `native/src/seal/util/intel_seal_ext.h` is removed.\r\n- `native/src/seal/util/intel_seal_ext.cpp` is removed.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.7.1", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.7.1", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.7.1", "url": "https://api.github.com/repos/microsoft/SEAL/releases/50087209", "release_id": 50087209, "date_created": "2021-10-25T21:44:17Z", "date_published": "2021-10-25T22:23:42Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/49577765", "tag": "v3.7.0", "name": "Release 3.7.0", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "### Features\r\n\r\n- Improved the performance of `Evaluator::multiply`, `Evaluator::multiply_inplace`, and `Evaluator::square` in the BFV scheme for default parameters with degree `4096` or higher.\r\n- Improved the performance of decryption [(PR 363)](https://github.com/microsoft/SEAL/pull/363).\r\n- Updated to HEXL version 1.2.1 [(PR 375)](https://github.com/microsoft/SEAL/pull/375).\r\n- Added more benchmark cases [(PR 379)](https://github.com/microsoft/SEAL/pull/379).\r\n\r\n### Minor API Changes\r\n\r\n- `const` methods in `SEALContext` and `SEALContext::ContextData` classes that used to return a pointer or reference now have a preceeding `const` qualifier.\r\n\r\n### Bug Fixes\r\n\r\n- Fixed failed tests on PowerPC architecture [(Issue 360)](https://github.com/microsoft/SEAL/issues/360).", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.7.0", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.7.0", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.7.0", "url": "https://api.github.com/repos/microsoft/SEAL/releases/49577765", "release_id": 49577765, "date_created": "2021-09-17T07:20:16Z", "date_published": "2021-09-17T07:40:49Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/44620587", "tag": "v3.6.6", "name": "Release 3.6.6", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "### Bug Fixes\r\n\r\n- Fixed an error when loading seeded ciphertexts serialized by v3.4.x from v3.5.0+.\r\n- Fixed failed tests on ARM64 architecture [(Issue 347)](https://github.com/microsoft/SEAL/issues/347).\r\n\r\n### Other\r\n\r\n- Improved HEXL NTT integration [(PR 349)](https://github.com/microsoft/SEAL/pull/349).\r\n- Improved CKKS ciphertext multiplication [(PR 346)](https://github.com/microsoft/SEAL/pull/346).\r\n- Improved CKKS ciphertext square [(PR 353)](https://github.com/microsoft/SEAL/pull/353), except that with GNU G++ compiler and `1024` degree there is a huge penalty in execution time. Users should switch from GNU G++ in this specific parameter setting if CKKS square is used.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.6.6", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.6.6", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.6.6", "url": "https://api.github.com/repos/microsoft/SEAL/releases/44620587", "release_id": 44620587, "date_created": "2021-06-15T05:25:53Z", "date_published": "2021-06-15T06:06:18Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/43157957", "tag": "v3.6.5", "name": "Release 3.6.5", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "### New Features\r\n\r\n- Updated the dependency Intel HEXL to v1.1.0 [(PR 332)](https://github.com/microsoft/SEAL/pull/332).\r\n- Integrated more optimizations from Intel HEXL to Microsoft SEAL.\r\n- Intel HEXL now uses Microsoft SEAL's memory pool, so that memory allocation reported by Microsoft SEAL is more accurate.\r\n\r\n### Bug Fixes\r\n\r\n- Fixed typos in comments [(PR 328)](https://github.com/microsoft/SEAL/pull/328).\r\n- Fixed a bug in `DWTHandler` [(Issue 330)](https://github.com/microsoft/SEAL/issues/330).\r\n- Fixed failing tests when `SEAL_USE_ZLIB=OFF` and `SEAL_USE_ZTD=OFF` [(PR 332)](https://github.com/microsoft/SEAL/pull/332).\r\n- Fixed shared library build when `SEAL_USE_HEXL=ON` [(PR 332)](https://github.com/microsoft/SEAL/pull/332).\r\n- Added missing `const` qualifiers to several members of `BatchEncoder` and `Evaluator` [(PR 334)](https://github.com/microsoft/SEAL/pull/334).", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.6.5", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.6.5", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.6.5", "url": "https://api.github.com/repos/microsoft/SEAL/releases/43157957", "release_id": 43157957, "date_created": "2021-05-18T19:24:46Z", "date_published": "2021-05-18T20:15:19Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/41387702", "tag": "v3.6.4", "name": "Release 3.6.4", "author": {"name": "kimlaine", "type": "User"}, "description": "### New Features\r\n\r\n- Enabled [AddressSanitizer](https://github.com/google/sanitizers/wiki/AddressSanitizer) and [LeakSanitizer](https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer) when building Microsoft SEAL [tests](native/tests/CMakeLists.txt) in Debug mode on Unix-like systems, based on [(PR 318)](https://github.com/microsoft/SEAL/pull/318).\r\n\r\n### Bug Fixes\r\n\r\n- Fixed `alloc-dealloc-mismatch` issues resolved by [(PR 318)](https://github.com/microsoft/SEAL/pull/318).\r\n- Fixed wrong descriptions in [serializable.h](native/src/seal/serializable.h) and [Serializable.cs](dotnet/src/Serializable.cs) reported in [(Issue 316)](https://github.com/microsoft/SEAL/issues/316).", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.6.4", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.6.4", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.6.4", "url": "https://api.github.com/repos/microsoft/SEAL/releases/41387702", "release_id": 41387702, "date_created": "2021-05-04T00:21:16Z", "date_published": "2021-05-04T00:28:19Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/41031641", "tag": "v3.6.3", "name": "Release 3.6.3", "author": {"name": "kimlaine", "type": "User"}, "description": "### New Features\r\n\r\n- Added support to build Microsoft SEAL out of the box with [emscripten](https://emscripten.org/) [(PR 306)](https://github.com/microsoft/SEAL/pull/306).\r\n- Added support to build Microsoft SEAL with [Intel HEXL](https://github.com/intel/hexl) as an optional dependency [(PR 312)](https://github.com/microsoft/SEAL/pull/312).\r\n\r\n### Other\r\n\r\n- Improved the error message when attempting to configure with `BUILD_SHARED_LIBS=ON` and `SEAL_BUILD_SEAL_C=ON` [(Issue 284)](https://github.com/microsoft/SEAL/issues/284).\r\n- Added `seal::random_bytes` function in [randomgen.h](native/src/seal/randomgen.h).\r\n- Removed redundant `is_metadata_valid_for` invocations reported in [(Issue 313)](https://github.com/microsoft/SEAL/issues/313).\r\n- Minor bug fixes\r\n\r\n### File Changes\r\n\r\n- [cmake/ExternalIntelHEXL.cmake](cmake/ExternalIntelHEXL.cmake)\r\n- [native/src/seal/util/intel_seal_ext.h](native/src/seal/util/intel_seal_ext.h)", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.6.3", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.6.3", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.6.3", "url": "https://api.github.com/repos/microsoft/SEAL/releases/41031641", "release_id": 41031641, "date_created": "2021-04-08T05:08:47Z", "date_published": "2021-04-08T08:03:49Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/38001828", "tag": "v3.6.2", "name": "Release 3.6.2", "author": {"name": "kimlaine", "type": "User"}, "description": "### Hotfix - 2/18/2021\r\n\r\n- Merged pull request [(PR 282)](https://github.com/microsoft/SEAL/pull/282) with typo and minor bug fixes.\r\n\r\n### Bug Fixes\r\n\r\n- Fixed an issue [(Issue 278)](https://github.com/microsoft/SEAL/issues/278) in finding ZLIB header files when building SEAL with `BUILD_SHARED_LIBS=ON`.\r\n- Fixed a member variable initialization order bug in [SafeByteBuffer](native/src/seal/util/streambuf.h).\r\n\r\n### New Features\r\n\r\n- Added benchmarks that depend on Google Benchmark in [native/bench](native/bench).\r\n\r\n### Other\r\n\r\n- Changed low-level code that reduces the runtime difference among code generated by msvc, gcc, and clang.\r\n- Using ARM64 intrinsics for better performance [(PR 269)](https://github.com/microsoft/SEAL/pull/269).", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.6.2", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.6.2", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.6.2", "url": "https://api.github.com/repos/microsoft/SEAL/releases/38001828", "release_id": 38001828, "date_created": "2021-02-19T01:01:36Z", "date_published": "2021-02-19T01:05:40Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/35014936", "tag": "v3.6.1", "name": "Release 3.6.1", "author": {"name": "kimlaine", "type": "User"}, "description": "- Fixed a bug reported in [(Issue 248)](https://github.com/microsoft/SEAL/issues/248) and [(Issue 249)](https://github.com/microsoft/SEAL/issues/249): in in-place Zstandard compression the input buffer head location was not correctly updated, resulting in huge memory use.\r\n", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.6.1", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.6.1", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.6.1", "url": "https://api.github.com/repos/microsoft/SEAL/releases/35014936", "release_id": 35014936, "date_created": "2020-12-08T03:15:47Z", "date_published": "2020-12-08T23:24:49Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/33946144", "tag": "v3.6.0", "name": "Release 3.6.0", "author": {"name": "kimlaine", "type": "User"}, "description": "### Hotfix - 12/2/2020\r\n\r\n- Fixed an issue with CMake system where a shared Zstandard was not correctly handled (it is not supported).\r\n\r\n### Hotfix - 11/17/2020\r\n\r\n- Fixed issue with CMake system where `BUILD_SHARED_LIBS=ON` and `SEAL_BUILD_DEPS=ON` resulted in Zstandard header files not being visible to the build [(Issue 242)](https://github.com/microsoft/SEAL/issues/242).\r\n\r\n### Hotfix - 11/16/2020\r\n\r\n- Fixed issues with CMake system overwriting existing `FETCHCONTENT_BASE_DIR` [(Issue 242)](https://github.com/microsoft/SEAL/issues/242).\r\n- Corrected mistakes and typos in [README.md](README.md).\r\n\r\n### New Features\r\n\r\n- Added support for [Zstandard](https://github.com/facebook/zstd) compression as a much more efficient alternative to ZLIB.\r\nThe performance improvement is around 20&ndash;30x.\r\n- Added support for iOS in the [NuGet package of Microsoft SEAL](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\r\n- The build system is unified for all platforms.\r\nThere is no longer a Visual Studio solution file (`seal.sln`) for Windows.\r\nThere is a separate solution file for the dotnet library ([dotnet/SEALNet.sln](dotnet/SEALNet.sln)).\r\n- Added support for Shake256 (FIPS-202) XOF for pseudo-random number generation in addition to the default Blake2xb (faster).\r\n- Microsoft SEAL 3.6 is backwards compatible with 3.4 and 3.5 when deserializing, but it does not support serializing in the old formats.\r\n\r\n### Major API Changes\r\n\r\n- All C++ `enum` labels are consistently in lowercase. Most importantly, `scheme_type::BFV` and `scheme_type::CKKS` are changed to `scheme_type::bfv` and `scheme_type::ckks`.\r\n- Changed `seal::SEAL_BYTE` to `seal::seal_byte`; all uppercase names are used only for preprocessor macros.\r\n- Removed `BatchEncoder` API for encoding and decoding `Plaintext` objects inplace.\r\nThis is because a `Plaintext` object with slot-data written into the coefficients is (confusingly) not valid to be used for encryption.\r\n- Removed `IntegerEncoder` and `BigUInt` classes.\r\n`IntegerEncoder` results in inefficient homomorphic evaluation and lacks sane correctness properties, so it was basically impossible to use in real applications.\r\nThe `BigUInt` class was only used by the `IntegerEncoder`.\r\n- All `Encryptor::encrypt` variants have now two overloads: one that takes a `Ciphertext` out-parameter, and one that returns a `Serializable<Ciphertext>`.\r\n- Changed the names of the public key generation functions to clearly express that a new key is created each time, e.g., `KeyGenerator::create_public_key`.\r\n- Removed the `KeyGenerator::relin_keys_local` and `KeyGenerator::galois_keys_local` functions.\r\nThese were poorly named and have been replaced with overloads of `KeyGenerator::create_relin_keys` and `KeyGenerator::create_galois_keys` that take an out-parameter of type `RelinKeys` or `GaloisKeys`.\r\n- Renamed `IntArray` to `DynArray` (dynamic array) and removed unnecessary limitations on the object type template parameter.\r\n- Added public API for modular reduction to the `Modulus` class.\r\n- Added API for creating `DynArray` and `Plaintext` objects from a `gsl::span<std::uint64_t>` (C++) or `IEnumerable<ulong>` (C#).\r\n\r\n### Minor API Changes\r\n\r\n- Added `std::hash` implementation for `EncryptionParameters` (in addition to `parms_id_type`) so it is possible to create e.g. `std::unordered_map` of `EncryptionParameters`.\r\n- Added API to `UniformRandomGeneratorFactory` to find whether the factory uses a default seed and to retrieve that seed.\r\n- Added const overloads for `DynArray::begin` and `DynArray::end`.\r\n- Added a `Shake256PRNG` and `Shake256PRNGFactory` classes.\r\nRenamed `BlakePRNG` class to `Blake2xbPRNG`, and `BlakePRNGFactory` class to `Blake2xbPRNGFactory`.\r\n- Added a serializable `UniformRandomGeneratorInfo` class that represents the type of an extendable output function and a seed value.\r\n- Added [native/src/seal/version.h](native/src/seal/version.h) defining a struct `SEALVersion`.\r\nThis is used internally to route deserialization logic to correct functions depending on loaded `SEALHeader` version.\r\n\r\n### New Build Options\r\n\r\n- `SEAL_BUILD_DEPS` controls whether dependencies are downloaded and built into Microsoft SEAL or searched from the system.\r\n- Only a shared library will be built when `BUILD_SHARED_LIBS` is set to `ON`. Previously a static library was always built.\r\n- Encryption error is sampled from a Centered Binomial Distribution (CBD) by default unless `SEAL_USE_GAUSSIAN_NOISE` is set to `ON`.\r\nSampling from a CBD is constant-time and faster than sampling from a Gaussian distribution, which is why it is used by many of the NIST PQC finalists.\r\n- `SEAL_DEFAULT_PRNG` controls which XOF is used for pseudo-random number generation.\r\nThe available values are `Blake2xb` (default) and `Shake256`.\r\n\r\n### Other\r\n\r\n- The pkg-config system has been improved.\r\nAll files related to pkg-config have been moved to [pkgconfig/](pkgconfig/).\r\nCMake creates now also a pkg-config file `seal_shared.pc` for compiling against a shared Microsoft SEAL if `BUILD_SHARED_LIBS` is set to `ON`.\r\n- Added `.pre-commit-config.yaml` (check out [pre-commit](https://pre-commit.com) if you are not familiar with this tool).\r\n- Added `seal::util::DWTHandler` and `seal::util::Arithmetic` class templates that unify the implementation of FFT (used by `CKKSEncoder`) and NTT (used by polynomial arithmetic).\r\n- The performance of encoding and decoding in CKKS are improved.\r\n- The performance of randomness generation for ciphertexts and keys (RLWE samples) is improved.\r\n\r\n### File Changes\r\n\r\n#### Renamed files and directories\r\n\r\n- `native/src/seal/intarray.h` to [native/src/seal/dynarray.h](native/src/seal/dynarray.h)\r\n- `dotnet/src/SEALNet.csproj` to [dotnet/src/SEALNet.csproj.in](dotnet/src/SEALNet.csproj.in)\r\n- `dotnet/tests/SEALNetTest.csproj` to [dotnet/tests/SEALNetTest.csproj.in](dotnet/tests/SEALNetTest.csproj.in)\r\n- `dotnet/examples/SEALNetExamples.csproj` to [dotnet/examples/SEALNetExamples.csproj.in](dotnet/examples/SEALNetExamples.csproj.in)\r\n\r\n#### New files\r\n\r\n- [native/src/seal/util/dwthandler.h](native/src/seal/util/dwthandler.h)\r\n- [native/src/seal/util/fips202.h](native/src/seal/util/fips202.h)\r\n- [native/src/seal/util/fips202.c](native/src/seal/util/fips202.c)\r\n- [native/src/seal/version.h](native/src/seal/version.h)\r\n- [dotnet/SEALNet.sln](dotnet/SEALNet.sln)\r\n- [.pre-commit-config.yaml](.pre-commit-config.yaml)\r\n\r\n#### Removed files\r\n\r\n- `dotnet/src/BigUInt.cs`\r\n- `dotnet/src/IntegerEncoder.cs`\r\n- `dotnet/tests/BigUIntTests.cs`\r\n- `dotnet/tests/IntegerEncoderTests.cs`\r\n- `native/examples/SEALExamples.vcxproj`\r\n- `native/examples/SEALExamples.vcxproj.filters`\r\n- `native/src/CMakeConfig.cmd`\r\n- `native/src/SEAL_C.vcxproj`\r\n- `native/src/SEAL_C.vcxproj.filters`\r\n- `native/src/SEAL.vcxproj`\r\n- `native/src/SEAL.vcxproj.filters`\r\n- `native/src/seal/biguint.h`\r\n- `native/src/seal/biguint.cpp`\r\n- `native/src/seal/intencoder.h`\r\n- `native/src/seal/intencoder.cpp`\r\n- `native/tests/packages.config`\r\n- `native/tests/SEALTest.vcxproj`\r\n- `native/tests/SEALTest.vcxproj.filters`\r\n- `native/tests/seal/biguint.cpp`\r\n- `native/tests/seal/intencoder.cpp`\r\n- `thirdparty/`\r\n- `SEAL.sln`", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.6.0", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.6.0", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.6.0", "url": "https://api.github.com/repos/microsoft/SEAL/releases/33946144", "release_id": 33946144, "date_created": "2020-12-03T03:24:38Z", "date_published": "2020-12-03T16:55:42Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/31442112", "tag": "v3.5.9", "name": "Release 3.5.9", "author": {"name": "kimlaine", "type": "User"}, "description": "### Bug fixes\r\n\r\n- Fixed [(Issue 216)](https://github.com/microsoft/SEAL/issues/216).\r\n- Fixed [(Issue 210)](https://github.com/microsoft/SEAL/issues/210).\r\n", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.9", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.9", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.9", "url": "https://api.github.com/repos/microsoft/SEAL/releases/31442112", "release_id": 31442112, "date_created": "2020-09-16T04:59:23Z", "date_published": "2020-09-17T04:02:41Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/30344677", "tag": "v3.5.8", "name": "Release 3.5.8", "author": {"name": "kimlaine", "type": "User"}, "description": "### Other\r\n\r\n- The bug fixed in [(PR 209)](https://github.com/microsoft/SEAL/pull/209) also affects Android. Changed version to 3.5.8 where this is fixed.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.8", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.8", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.8", "url": "https://api.github.com/repos/microsoft/SEAL/releases/30344677", "release_id": 30344677, "date_created": "2020-08-28T19:05:36Z", "date_published": "2020-08-28T19:09:35Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/30242077", "tag": "v3.5.7", "name": "Release 3.5.7", "author": {"name": "kimlaine", "type": "User"}, "description": "### Hotfix - 8/28/2020\r\n\r\n- Merged [(PR 209)](https://github.com/microsoft/SEAL/pull/209). Thanks [s0l0ist](https://github.com/s0l0ist)!\r\n\r\n### Bug fixes\r\n\r\n- Fixed an omission in input validation in decryption: the size of the ciphertext was not checked to be non-zero.\r\n\r\n### Other\r\n\r\n- In Windows switch to using `RtlGenRandom` if the BCrypt API fails.\r\n- Improved performance in serialization: data clearing memory pools were always used before, but now are only used for the secret key.\r\n- Use native APIs for memory clearing, when available, instead of for-loop.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.7", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.7", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.7", "url": "https://api.github.com/repos/microsoft/SEAL/releases/30242077", "release_id": 30242077, "date_created": "2020-08-28T18:45:23Z", "date_published": "2020-08-28T18:49:24Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/28608959", "tag": "v3.5.6", "name": "Release 3.5.6", "author": {"name": "kimlaine", "type": "User"}, "description": "### Bug fixes\r\n\r\n- Fixed a bug where setting a PRNG factory to use a constant seed did not result in deterministic ciphertexts or public keys.\r\nThe problem was that the specified PRNG factory was not used to sample the uniform part of the RLWE sample(s), but instead a fresh (secure) PRNG was always created and used.\r\n- Fixed a bug where the `parms_id` of a `Plaintext` was not cleared correctly before resizing in `Decryptor::bfv_decrypt`.\r\nAs a result, a plaintext in NTT form could not be used as the destination for decrypting a BFV ciphertext.\r\n\r\n### Other\r\n\r\n- Merged pull request [(Issue 190)](https://github.com/microsoft/SEAL/pull/190) to replace global statics with function-local statics to avoid creating these objects unless they are actually used.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.6", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.6", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.6", "url": "https://api.github.com/repos/microsoft/SEAL/releases/28608959", "release_id": 28608959, "date_created": "2020-07-15T22:25:49Z", "date_published": "2020-07-15T22:28:37Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/28274756", "tag": "v3.5.5", "name": "Release 3.5.5", "author": {"name": "kimlaine", "type": "User"}, "description": "### Hotfix -- 7/6/2020\r\n- Fixed [(Issue 188)](https://github.com/microsoft/SEAL/issues/188).\r\n\r\n### New features\r\n\r\n- Added a struct `seal::util::MultiplyUIntModOperand` in [native/src/seal/util/uintarithsmallmod.h](native/src/seal/util/uintarithsmallmod.h).\r\nThis struct handles precomputation data for Barrett style modular multiplication.\r\n- Added new overloads for modular arithmetic in [native/src/seal/util/uintarithsmallmod.h](native/src/seal/util/uintarithsmallmod.h) where one operand is replaced by a `MultiplyUIntModOperand` instance for improved performance when the same operand is used repeatedly. \r\n- Changed the name of `seal::util::barrett_reduce_63` to `seal::util::barrett_reduce_64`; the name was misleading and only referred to the size of the modulus.\r\n- Added `seal::util::StrideIter` in [native/src/seal/util/iterator.h](native/src/seal/util/iterator.h).\r\n- Added macros `SEAL_ALLOCATE_GET_PTR_ITER` and `SEAL_ALLOCATE_GET_STRIDE_ITER` in [native/src/seal/util/defines.h](native/src/seal/util/defines.h).\r\n\r\n### Other\r\n\r\n- Significant performance improvements from merging pull request [(PR 185)](https://github.com/microsoft/SEAL/pull/185) and implementing other improvements of the same style (see above).\r\n- Removed a lot of old and unused code.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.5", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.5", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.5", "url": "https://api.github.com/repos/microsoft/SEAL/releases/28274756", "release_id": 28274756, "date_created": "2020-07-07T06:22:12Z", "date_published": "2020-07-07T06:25:27Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/27618354", "tag": "v3.5.4", "name": "Release 3.5.4", "author": {"name": "kimlaine", "type": "User"}, "description": "### Bug fixes\r\n\r\n- `std::void_t` was introduced only in C++17; switched to using a custom implementation [(Issue 180)](https://github.com/microsoft/SEAL/issues/180).\r\n- Fixed two independent bugs in `native/src/CMakeConfig.cmd`: The first prevented SEAL to be built in a directory with spaces in the path due to missing quotation marks. Another issue caused MSVC to fail when building SEAL for multiple architectures.\r\n- `RNSBase::decompose_array` had incorrect semantics that caused `Evaluator::multiply_plain_normal` and `Evaluator::transform_to_ntt_inplace` (for `Plaintext`) to behave incorrectly for some plaintexts.\r\n\r\n### Other\r\n\r\n- Added pkg-config support [(PR 181)](https://github.com/microsoft/SEAL/pull/181).\r\n- `seal::util::PtrIter<T *>` now dereferences correctly to `T &` instead of `T *`.\r\nThis results in simpler code, where inside `SEAL_ITERATE` lambda functions dereferences of `seal::util::PtrIter<T *>` do not need to be dereferenced a second time, as was particularly common when iterating over `ModulusIter` and `NTTTablesIter` types.\r\n- `seal::util::IterTuple` now dereferences to an `std::tuple` of dereferences of its component iterators, so it is no longer possible to directly pass a dereferenced `seal::util::IterTuple` to an inner lambda function in nested `SEAL_ITERATE` calls.\r\nInstead, the outer lambda function parameter should be wrapped inside another call to `seal::util::iter` before passed on to the inner `SEAL_ITERATE` to produce an appropriate `seal::util::IterTuple`.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.4", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.4", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.4", "url": "https://api.github.com/repos/microsoft/SEAL/releases/27618354", "release_id": 27618354, "date_created": "2020-06-16T22:54:06Z", "date_published": "2020-06-16T23:09:06Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/27069961", "tag": "v3.5.3", "name": "Release 3.5.3", "author": {"name": "kimlaine", "type": "User"}, "description": "### Bug fixes\r\n\r\n- Fixed a bug in `seal::util::IterTuple<...>` where a part of the `value_type` was constructed incorrectly.\r\n- Fixed a bug in `Evaluator::mod_switch_drop_to_next` that caused non-inplace modulus switching to fail [(Issue 179)](https://github.com/microsoft/SEAL/issues/179). Thanks s0l0ist!", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.3", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.3", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.3", "url": "https://api.github.com/repos/microsoft/SEAL/releases/27069961", "release_id": 27069961, "date_created": "2020-05-31T05:57:30Z", "date_published": "2020-05-31T06:07:46Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/27055540", "tag": "v3.5.2", "name": "Release 3.5.2", "author": {"name": "kimlaine", "type": "User"}, "description": "### Bug fixes\r\n\r\n- Merged pull request [PR 178](https://github.com/microsoft/SEAL/pull/178) to fix a lambda capture issue when building on GCC 7.5.\r\n- Fixed issue where SEAL.vcxproj could not be compiled with MSBuild outside the solution [(Issue 171)](https://github.com/microsoft/SEAL/issues/171).\r\n- SEAL 3.5.1 required CMake 3.13 instead of 3.12; this has now been fixed and 3.12 works again [(Issue 167)](https://github.com/microsoft/SEAL/issues/167).\r\n- Fixed issue in NuSpec file that made local NuGet package generation fail.\r\n- Fixed issue in NuSpec where XML documentation was not included into the package.\r\n\r\n### New features\r\n\r\n- Huge improvements to SEAL iterators, including `seal::util::iter` and `seal::util::reverse_iter` functions that can create any type of iterator from appropriate parameters.\r\n- Added `seal::util::SeqIter<T>` iterator for iterating a sequence of numbers for convenient iteration indexing.\r\n- Switched functions in `seal/util/polyarithsmallmod.*` to use iterators; this is to reduce the layers of iteration in higher level code.\r\n- Added macro `SEAL_ITERATE` that should be used instead of `for_each_n`.\r\n\r\n### Other\r\n\r\n- Added note in [README.md](README.md) about known performance issues when compiling with GNU G++ compared to Clang++ [(Issue 173)](https://github.com/microsoft/SEAL/issues/173).\r\n- Merged pull requests that improve the performance of keyswitching [(PR #177)](https://github.com/microsoft/SEAL/pull/177) and rescale [(PR #176)](https://github.com/microsoft/SEAL/pull/176) in CKKS.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.2", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.2", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.2", "url": "https://api.github.com/repos/microsoft/SEAL/releases/27055540", "release_id": 27055540, "date_created": "2020-05-30T07:27:30Z", "date_published": "2020-05-30T08:05:52Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/26036010", "tag": "v3.5.1", "name": "Release 3.5.1", "author": {"name": "kimlaine", "type": "User"}, "description": "## Version 3.5.1\r\n\r\nChanged version to 3.5.1.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.1", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.1", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.1", "url": "https://api.github.com/repos/microsoft/SEAL/releases/26036010", "release_id": 26036010, "date_created": "2020-04-30T07:58:50Z", "date_published": "2020-04-30T08:04:32Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/25944687", "tag": "v3.5.0", "name": "Release 3.5.0", "author": {"name": "kimlaine", "type": "User"}, "description": "### Hotfix - 4/30/2020\r\n\r\n- Fixed a critical bug [(Issue 166)](https://github.com/microsoft/SEAL/issues/166) in `Evaluator::multiply_plain_inplace`. Thanks s0l0ist!\r\n\r\n### Hotfix - 4/29/2020\r\n\r\n- Switched to using Microsoft GSL v3.0.1 and fixed minor GSL related issues in `CMakeLists.txt`.\r\n- Fixed some typos in [README.md](README.md).\r\n- Fixes bugs in ADO pipelines files.\r\n\r\n### New Features\r\n\r\n- Microsoft SEAL officially supports Android (Xamarin.Android) on ARM64.\r\n- Microsoft SEAL is a CMake project (UNIX-like systems only):\r\n  - There is now a top-level `CMakeLists.txt` that builds all native components.\r\n  - The following CMake targets are created: `SEAL::seal` (static library), `SEAL::seal_shared` (shared library; optional), `SEAL::sealc` (C export library; optional).\r\n  - Examples and unit tests are built if enabled through CMake (see [README.md](README.md)).\r\n  - ZLIB is downloaded and compiled by CMake and automatically included in the library.\r\n  - Microsoft GSL is downloaded by CMake. Its header files are copied to `native/src/gsl` and installed with Microsoft SEAL.\r\n  - Google Test is downloaded and compiled by CMake.\r\n- Improved serialization:\r\n  - `Serialization::SEALHeader` layout has been changed. SEAL 3.4 objects can still be loaded by SEAL 3.5, and the headers are automatically converted to SEAL 3.5 format.\r\n  - `Serialization::SEALHeader` captures version number information.\r\n  - Added examples for serialization.\r\n  - The seeded versions of `Encryptor`'s symmetric-key encryption and `KeyGenerator`'s `RelinKeys` and `GaloisKeys` generation now output `Serializable` objects. See more details in *API Changes* below.\r\n\r\n#### For Library Developers and Contributors\r\n\r\nWe have created a set of C++ iterators that easily allows looping over polynomials in a ciphertext, over RNS components in a polynomial, and over coefficients in an RNS component. There are also a few other iterators that can come in handy. Currently `Evaluator` fully utilizes these, and in the future the rest of the library will as well.\r\nThe iterators are primarily intended to be used with `std::for_each_n` to simplify existing code and help with code correctness. Please see [native/src/seal/util/iterator.h](native/src/seal/util/iterator.h) for guidance on how to use these.\r\n\r\nWe have also completely rewritten the RNS tools that were previously in the `util::BaseConverter` class. This functionality is now split between two classes: `util::BaseConverter` whose sole purpose is to perform the `FastBConv` computation of [[BEHZ16]](https://eprint.iacr.org/2016/510) and `util::RNSTool` that handles almost everything else. RNS bases are now represented by the new `util::RNSBase` class.\r\n\r\n### API Changes\r\n\r\nThe following changes are explained in C++ syntax and are introduced to .NET wrappers similarly:\r\n\r\n- New generic class `Serializable` wraps `Ciphertext`, `RelinKeys`, and `GaloisKeys` objects to provide a more flexible approach to the functionality provided in release 3.4 by `KeyGenerator::[relin|galois]_keys_save` and `Encryptor::encrypt_[zero_]symmetric_save` functions. Specifically, these functions have been removed and replaced with overloads of `KeyGenerator::[relin|galois]_keys` and `Encryptor::encrypt_[zero_]symmetric` that return `Serializable` objects. The `KeyGenerator::[relin|galois]_keys` methods in release 3.4 are renamed to `KeyGenerator::[relin|galois]_keys_local`. The `Serializable` objects cannot be used directly by the API, and are only intended to be serialized, which activates the compression functionalities introduced earlier in release 3.4.\r\n- `SmallModulus` class is renamed to `Modulus`, and is relocated to [native/src/seal/modulus.h](native/src/seal/modulus.h).\r\n- `*coeff_mod_count*` methods are renamed to `*coeff_modulus_size*`, which applies to many classes.\r\n- `parameter_error_name` and `parameter_error_message` methods are added to `EncryptionParameterQualifiers` and `SEALContext` classes to explain why an `EncryptionParameters` object is invalid.\r\n- The data members and layout of `Serialization::SEALHeader` have changed.\r\n\r\nThe following changes are specific to C++:\r\n\r\n- New bounds in [native/src/seal/util/defines.h](native/src/seal/util/defines.h):\r\n  - `SEAL_POLY_MOD_DEGREE_MAX` is increased to 131072; values bigger than 32768 require the security check to be disabled by passing `sec_level_type::none` to `SEALContext::Create`.\r\n  - `SEAL_COEFF_MOD_COUNT_MAX` is increased to 64.\r\n  - `SEAL_MOD_BIT_COUNT_MAX` and `SEAL_MOD_BIT_COUNT_MIN` are added and set to 61 and 2, respectively.\r\n  - `SEAL_INTERNAL_MOD_BIT_COUNT` is added and set to 61.\r\n- `EncryptionParameterQualifiers` now has an error code `parameter_error` that interprets the reason why an `EncryptionParameters` object is invalid.\r\n- `bool parameters_set()` is added to replace the previous `bool parameters_set` member.\r\n\r\nThe following changes are specific to .NET:\r\n\r\n- Version numbers are retrievable in .NET through `SEALVersion` class.\r\n\r\n### Other Changes\r\n\r\n- Releases are now listed on [releases page](https://github.com/microsoft/SEAL/releases).\r\n- The native library can serialize (save and load) objects larger than 4 GB. Please be aware that compressed serialization requires an additional temporary buffer roughly the size of the object to be allocated, and the streambuffer for the output stream may consume some non-trivial amount of memory as well. In the .NET library, objects are limited to 2 GB, and loading an object larger than 2 GB will throw an exception.[(Issue 142)](https://github.com/microsoft/SEAL/issues/142)\r\n- Larger-than-suggested parameters are supported for expert users. To enable that, please adjust `SEAL_POLY_MOD_DEGREE_MAX` and `SEAL_COEFF_MOD_COUNT_MAX` in [native/src/seal/util/defines.h](native/src/seal/util/defines.h).([Issue 150](https://github.com/microsoft/SEAL/issues/150), [Issue 84](https://github.com/microsoft/SEAL/issues/84))\r\n- Serialization now clearly indicates an insufficient buffer size error.[(Issue 117)](https://github.com/microsoft/SEAL/issues/117)\r\n- Unsupported compression mode now throws `std::invalid_argument` (native) or `ArgumentException` (.NET).\r\n- There is now a `.clang-format` for automated formatting of C++ (`.cpp` and `.h`) files. Execute `tools/scripts/clang-format-all.sh` for easy formatting (UNIX-like systems only). This is compatible with clang-format-9 and above. Formatting for C# is not yet supported.[(Issue 93)](https://github.com/microsoft/SEAL/issues/93)\r\n- The C export library previously in `dotnet/native/` is moved to [native/src/seal/c/](native/src/seal/c/) and renamed to SEAL_C to support building of wrapper libraries in languages like .NET, Java, Python, etc.\r\n- The .NET wrapper library targets .NET Standard 2.0, but the .NET example and test projects use C# 8.0 and require .NET Core 3.x. Therefore, Visual Studio 2017 is no longer supported for building the .NET example and test projects.\r\n- Fixed issue when compiling in FreeBSD.([PR 113](https://github.com/microsoft/SEAL/pull/113))\r\n- A [bug](https://eprint.iacr.org/2019/1266) in the [[BEHZ16]](https://eprint.iacr.org/2016/510)-style RNS operations is fixed; proper unit tests are added.\r\n- Performance of methods in `Evaluator` are in general improved.([PR 148](https://github.com/microsoft/SEAL/pull/148)) This is compiler-dependent, however, and currently Clang seems to produce the fastest running code for Microsoft SEAL.\r\n\r\n### File Changes\r\n\r\nRenamed files and directories:\r\n\r\n- [dotnet/examples/7_Performance.cs](dotnet/examples/7_Performance.cs) was previously `dotnet/examples/6_Performance.cs`\r\n- [native/examples/7_performance.cpp](native/examples/7_performance.cpp) was previously `native/examples/6_performance.cpp`\r\n- [native/src/seal/c/](native/src/seal/c/) was previously `dotnet/native/sealnet`.\r\n- [native/src/seal/util/ntt.h](native/src/seal/util/ntt.h) was previously `native/src/seal/util/smallntt.h`.\r\n- [native/src/seal/util/ntt.cpp](native/src/seal/util/ntt.cpp) was previously `native/src/seal/util/smallntt.cpp`.\r\n- [native/tests/seal/util/ntt.cpp](native/tests/seal/util/ntt.cpp) was previously `native/tests/seal/util/smallntt.cpp`.\r\n\r\nNew files:\r\n\r\n- [android/](android/)\r\n- [dotnet/examples/6_Serialization.cs](dotnet/examples/6_Serialization.cs)\r\n- [dotnet/src/Serializable.cs](dotnet/src/Serializable.cs)\r\n- [dotnet/src/Version.cs](dotnet/src/Version.cs)\r\n- [dotnet/tests/SerializationTests.cs](dotnet/tests/SerializationTests.cs)\r\n- [native/examples/6_serialization.cpp](native/examples/6_serialization.cpp)\r\n- [native/src/seal/c/version.h](native/src/seal/c/version.h)\r\n- [native/src/seal/c/version.cpp](native/src/seal/c/version.cpp)\r\n- [native/src/seal/util/galois.h](native/src/seal/util/galois.h)\r\n- [native/src/seal/util/galois.cpp](native/src/seal/util/galois.cpp)\r\n- [native/src/seal/util/hash.cpp](native/src/seal/util/hash.cpp)\r\n- [native/src/seal/util/iterator.h](native/src/seal/util/iterator.h)\r\n- [native/src/seal/util/rns.h](native/src/seal/util/rns.h)\r\n- [native/src/seal/util/rns.cpp](native/src/seal/util/rns.cpp)\r\n- [native/src/seal/util/streambuf.h](native/src/seal/util/streambuf.h)\r\n- [native/src/seal/util/streambuf.cpp](native/src/seal/util/streambuf.cpp)\r\n- [native/src/seal/serializable.h](native/src/seal/serializable.h)\r\n- [native/tests/seal/util/iterator.cpp](native/tests/seal/util/iterator.cpp)\r\n- [native/tests/seal/util/galois.cpp](native/tests/seal/util/galois.cpp)\r\n- [native/tests/seal/util/rns.cpp](native/tests/seal/util/rns.cpp)\r\n\r\nRemoved files:\r\n\r\n- `dotnet/src/SmallModulus.cs` is merged to [dotnet/src/ModulusTests.cs](dotnet/src/Modulus.cs).\r\n- `dotnet/tests/SmallModulusTests.cs` is merged to [dotnet/tests/ModulusTests.cs](dotnet/tests/ModulusTests.cs).\r\n- `native/src/seal/util/baseconverter.h`\r\n- `native/src/seal/util/baseconverter.cpp`\r\n- `native/src/seal/smallmodulus.h` is merged to [native/src/seal/modulus.h](native/src/seal/modulus.h).\r\n- `native/src/seal/smallmodulus.cpp` is merged to [native/src/seal/modulus.cpp](native/src/seal/modulus.cpp).\r\n- `native/src/seal/c/smallmodulus.h` is merged to [native/src/seal/c/modulus.h](native/src/seal/c/modulus.h).\r\n- `native/src/seal/c/smallmodulus.cpp` is merged to [native/src/seal/c/modulus.cpp](native/src/seal/c/modulus.cpp).\r\n- `native/tests/seal/smallmodulus.cpp` is merged to [native/tests/seal/modulus.cpp](native/tests/seal/modulus.cpp).\r\n- `native/tests/seal/util/baseconverter.cpp`\r\n", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.5.0", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.5.0", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.5.0", "url": "https://api.github.com/repos/microsoft/SEAL/releases/25944687", "release_id": 25944687, "date_created": "2020-04-30T07:21:09Z", "date_published": "2020-04-30T07:30:05Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/22876051", "tag": "v3.4.5", "name": "Release 3.4.5", "author": {"name": "WeiDaiWD", "type": "User"}, "description": "#### Changes\r\n- Fixed a concurrency issue in SEALNet: the `unordered_map` storing `SEALContext` pointers was\r\nnot locked appropriately on construction and destruction of new `SEALContext` objects.\r\n- Fixed a few typos in examples ([PR 71](https://github.com/microsoft/SEAL/pull/71)).\r\n- Added include guard to config.h.in.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.4.5", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.4.5", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.4.5", "url": "https://api.github.com/repos/microsoft/SEAL/releases/22876051", "release_id": 22876051, "date_created": "2019-11-28T02:17:38Z", "date_published": "2020-01-15T22:39:02Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/22876690", "tag": "v3.4.4", "name": "Release 3.4.4", "author": {"name": "kimlaine", "type": "User"}, "description": "#### Changes\r\n\r\n- Fixed issues with `SEALNet.targets` file and `SEALNet.nuspec.in`.\r\n- Updated `README.md` with information about existing multi-platform\r\n[NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet).", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.4.4", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.4.4", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.4.4", "url": "https://api.github.com/repos/microsoft/SEAL/releases/22876690", "release_id": 22876690, "date_created": "2019-10-30T19:21:11Z", "date_published": "2020-01-15T23:13:26Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/22876706", "tag": "v3.4.3", "name": "Release 3.4.3", "author": {"name": "kimlaine", "type": "User"}, "description": "#### Changes\r\n\r\n- Fixed bug in .NET serialization code where an incorrect number of bytes was written when using\r\nZLIB compression.\r\n- Fixed an issue with .NET functions `Encryptor.EncryptSymmetric...`, where asymmetric encryption\r\nwas done instead of symmetric encryption.\r\n- Prevented `KeyGenerator::galois_keys` and `KeyGenerator::relin_keys` from being called when the\r\nencryption parameters do not support keyswitching.\r\n- Fixed a bug in `Decryptor::invariant_noise_budget` where the computed noise budget was\r\n`log(plain_modulus)` bits smaller than it was supposed to be.\r\n- Removed support for Microsoft GSL `gsl::multi_span`, as it was recently deprecated in GSL.\r\n", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.4.3", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.4.3", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.4.3", "url": "https://api.github.com/repos/microsoft/SEAL/releases/22876706", "release_id": 22876706, "date_created": "2019-10-29T21:02:08Z", "date_published": "2020-01-15T23:14:14Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/22876720", "tag": "v3.4.2", "name": "Release 3.4.2", "author": {"name": "kimlaine", "type": "User"}, "description": "#### Changes\r\n\r\n- Fixed bug reported in [Issue 66](https://github.com/microsoft/SEAL/issues/66) on GitHub.\r\n- CMake does version matching now (correctly) only on major and minor version, not patch version,\r\nso writing `find_package(SEAL 3.4)` works correctly and selects the newest version `3.4.x` it can\r\nfind.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.4.2", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.4.2", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.4.2", "url": "https://api.github.com/repos/microsoft/SEAL/releases/22876720", "release_id": 22876720, "date_created": "2019-10-18T21:51:04Z", "date_published": "2020-01-15T23:14:48Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/22876730", "tag": "v3.4.1", "name": "Release 3.4.1", "author": {"name": "kimlaine", "type": "User"}, "description": "#### Changes\r\n\r\nThis patch fixes a few issues with ZLIB support on Windows. Specifically,\r\n\r\n- Fixed a mistake in `native/src/CMakeConfig.cmd` where the CMake library search path\r\nsuffix was incorrect.\r\n- Switched to using a static version of ZLIB on Windows.\r\n- Corrected instructions in [README.md](README.md) for enabling ZLIB support on Windows.", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.4.1", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.4.1", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.4.1", "url": "https://api.github.com/repos/microsoft/SEAL/releases/22876730", "release_id": 22876730, "date_created": "2019-10-17T13:48:19Z", "date_published": "2020-01-15T23:15:22Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/microsoft/SEAL/releases/22876761", "tag": "v3.4.0", "name": "Release 3.4.0", "author": {"name": "kimlaine", "type": "User"}, "description": "## Changes\r\n\r\n### New Features\r\n\r\n- Microsoft SEAL can use [ZLIB](https://github.com/madler/zlib), a data compression library,\r\nto automatically compress data that is serialized. This applies to every serializable object\r\nin Microsoft SEAL. This feature must be enabled by the user. See more explanation of the compression\r\nmechanism in [README.md](README.md#zlib). Microsoft SEAL does not redistribute ZLIB.\r\n- AES-128 is replaced with the BLAKE2 family of hash functions in the pseudorandom number generator,\r\nas BLAKE2 provides better cross-platform support. Microsoft SEAL redistributes the\r\n[reference implementation of BLAKE2](https://github.com/BLAKE2/BLAKE2)\r\nwith light modifications to silence some misleading warnings in Visual Studio. The reference\r\nimplementation of BLAKE2 is licensed under\r\n[CC0 1.0 Universal](https://github.com/BLAKE2/BLAKE2/blob/master/COPYING); see license boilerplates\r\nin files [native/src/seal/util/blake*](native/src/seal/util/).\r\n- The serialization functionality has been completely rewritten to make it more safe and robust.\r\nEvery serialized Microsoft SEAL object starts with a 16-byte `Serialization::SEALHeader` struct,\r\nand then includes the data for the object member variables. Every serializable object can now also\r\nbe directly serialized into a memory buffer instead of a C++ stream. This improves serialization\r\nfor .NET and makes it much easier to wrap the serialization functionality in other languages, e.g.,\r\nJava. Unfortunately, old serialized Microsoft SEAL objects are incompatible with the new format.\r\n- A ciphertext encrypted with a secret key, for example, a keyswitching key, has one component\r\ngenerated by the PRNG. By using a seeded PRNG, this component can be replaced with the random seed\r\nused by the PRNG to reduce data size. After transmitted to another party with Microsoft SEAL, the\r\ncomponent can be restored (regenerated) with the same seed. The security of using seeded PRNG is\r\nenhanced by switching to BLAKE2 hash function with a 512-bit seed.\r\n- `Encryptor` now can be constructed with a secret key. This enables symmetric key encryption which\r\nhas methods that serialize ciphertexts (compressed with a seed) to a C++ stream or a memory buffer.\r\n- The CMake system has been improved. For example, multiple versions of Microsoft SEAL can now be\r\ninstalled on the same system easily, as the default installation directory and library filename now\r\ndepend on the version of Microsoft SEAL. Examples and unit tests can now be built without installing\r\nthe library. [README.md](README.md) has been updated to reflect these changes.\r\n- `Encryptor::encrypt` operations in the BFV scheme are modified. Each coefficient of a plaintext\r\nmessage is first multiplied with the ciphertext modulus, then divided by the plaintext modulus, and\r\nrounded to the nearest integer. In comparison with the previous method, where each coefficient of a\r\nplaintext message is multiplied with the flooring of the coefficient modulus divided by the plaintext\r\nmodulus, the new method reduces the noise introduced in encryption, increases a noise budget of a\r\nfresh encryption, slightly slows down encryption, and has no impact on the security at all.\r\n\r\n- Merged [PR 62](https://github.com/microsoft/SEAL/pull/62) that uses a non-adjacent form (NAF)\r\ndecomposition of random rotations to perform them in a minimal way from power-of-two rotations in\r\nboth directions. This improves performance of random rotations.\r\n\r\n### API Changes\r\n\r\n#### C++ Native\r\n\r\nIn all classes with `save` and `load` methods:\r\n- Replaced the old `save` with two new methods that saves to either a C++ stream or a memory buffer.\r\nOptionally, a compression mode can be chosen when saving an object.\r\n- Replaced the old `load` with two new methods that loads from either a C++ stream or a memory buffer.\r\n- Added a method `save_size` to get an upper bound on the size of the object as if it was written to\r\nan output stream. To save to a buffer, the user must ensure that the buffer has at least size equal\r\nto what the `save_size` member function returns.\r\n- New `save` and `load` methods rely on the `Serialization` class declared in `serialization.h`.\r\nThis class unifies the serialization functionality for all serializable Microsoft SEAL classes.\r\n\r\nIn class `Ciphertext`:\r\n- Added a method `int_array` for read-only access to the underlying `IntArray` object.\r\n- Removed methods `uint64_count_capacity` and `uint64_count` that can now be accessed in a more\r\ndescriptive manner through the `int_arrar` return value.\r\n\r\nIn class `CKKSEncoder`: added support for `gsl::span` type of input.\r\n\r\nIn class `SEALContext::ContextData`: added method `coeff_mod_plain_modulus` for read-only access to\r\nthe non-RNS version of `upper_half_increment`.\r\n\r\nIn class `EncryptionParameters`: an `EncryptionParameters` object can be constructed without\r\n`scheme_type` which by default is set to `scheme_type::none`.\r\n\r\nIn class `Encryptor`:\r\n- An `Encryptor` object can now be constructed with a secret key to enable symmetric key encryption.\r\n- Added methods `encrypt_symmetric` and `encrypt_zero_symmetric` that generate a `Ciphertext` using\r\nthe secret key.\r\n- Added methods `encrypt_symmetric_save` and `encrypt_zero_symmetric_save` that directly serialize\r\nthe resulting `Ciphertext` to a C++ stream or a memory buffer. The resulting `Ciphertext` no long\r\nexists after serilization. In these methods, the second polynomial of a ciphertext is generated by\r\nthe PRNG and is replaced with the random seed used.\r\n\r\nIn class `KeyGenerator`:\r\n- Added methods `relin_keys_save` and `galois_keys_save` that generate and directly serialize keys\r\nto a C++ stream or a memory buffer. The resulting keys no long exist after serilization. In these\r\nmethods, half of the polynomials in keys are generated by the PRNG and is replaced with the random\r\nseed used.\r\n- Methods `galois_keys` and `galois_keys_save` throw an exception if `EncryptionParameters` do not\r\nsupport batching in the BFV scheme.\r\n\r\nIn class `Plaintext`: added a method `int_array` for read-only access to the underlying `IntArray`\r\nobject.\r\n\r\nIn class `UniformRandomGenerator` and `UniformRandomGeneratorFactory`: redesigned for users to\r\nimplement their own random number generators more easily.\r\n\r\nIn file `valcheck.h`: validity checks are partitioned into finer methods; the `is_valid_for(...)`\r\nfunctions will validate all aspects fo the Microsoft SEAL ojects.\r\n\r\nNew classes `BlakePRNG` and `BlakePRNGFactory`: uses Blake2 family of hash functions for PRNG.\r\n\r\nNew class `Serialization`:\r\n- Gives a uniform serilization in Microsoft SEAL to save objects to a C++ stream or a memory buffer.\r\n- Can be configured to use ZLIB compression.\r\n\r\nNew files:\r\n- [native/src/seal/util/rlwe.h](native/src/seal/util/rlwe.h)\r\n- [native/src/seal/util/blake2.h](native/src/seal/util/blake2.h)\r\n- [native/src/seal/util/blake2-impl.h](native/src/seal/util/blake2-impl.h)\r\n- [native/src/seal/util/blake2b.c](native/src/seal/util/blake2b.c)\r\n- [native/src/seal/util/blake2xb.c](native/src/seal/util/blake2xb.c)\r\n- [native/src/seal/util/croots.cpp](native/src/seal/util/croots.cpp)\r\n- [native/src/seal/util/croots.h](native/src/seal/util/croots.h)\r\n- [native/src/seal/util/scalingvariant.cpp](native/src/seal/util/scalingvariant.cpp)\r\n- [native/src/seal/util/scalingvariant.h](native/src/seal/util/scalingvariant.h)\r\n- [native/src/seal/util/ztools.cpp](native/src/seal/util/ztools.cpp)\r\n- [native/src/seal/util/ztools.h](native/src/seal/util/ztools.h)\r\n- [native/src/seal/serialization.cpp](native/src/seal/serialization.cpp)\r\n- [native/src/seal/serialization.h](native/src/seal/serialization.h)\r\n- [native/tests/seal/serialization.cpp](native/tests/seal/serialization.cpp)\r\n- [dotnet/native/sealnet/serialization_wrapper.cpp](dotnet/native/sealnet/serialization_wrapper.cpp)\r\n- [dotnet/native/sealnet/serialization_wrapper.h](dotnet/native/sealnet/serialization_wrapper.h)\r\n\r\nRemoved files:\r\n- [native/src/seal/util/hash.cpp](native/src/seal/util/hash.cpp)\r\n\r\n#### .NET\r\n\r\nAPI changes are mostly identical in terms of functionality to those in C++ native, except only\r\nthe `IsValidFor` variant of the validity check functions is available in .NET, the more granular\r\nchecks are not exposed.\r\n\r\nNew files:\r\n- [dotnet/src/Serialization.cs](dotnet/src/Serialization.cs)\r\n\r\n### Minor Bug and Typo Fixes\r\n\r\n- Function `encrypt_zero_asymmetric` in [native/src/seal/util/rlwe.h](native/src/seal/util/rlwe.h)\r\nhandles the condition `is_ntt_form == false` correctly.\r\n- Invariant noise calculation in BFV is now correct when the plaintext modulus is large and\r\nciphertexts are fresh (reported in [issue 59](https://github.com/microsoft/SEAL/issues/59)).\r\n- Fixed comments in [native/src/seal/util/smallntt.cpp](native/src/seal/util/smallntt.cpp) as\r\nreported in [issue 56](https://github.com/microsoft/SEAL/issues/56).\r\n- Fixed an error in examples as reported in [issue 61](https://github.com/microsoft/SEAL/issues/61).\r\n- `GaloisKeys` can no longer be created with encryption parameters that do not support batching.\r\n- Security issues in deserialization were resolved.\r\n", "tarball_url": "https://api.github.com/repos/microsoft/SEAL/tarball/v3.4.0", "zipball_url": "https://api.github.com/repos/microsoft/SEAL/zipball/v3.4.0", "html_url": "https://github.com/microsoft/SEAL/releases/tag/v3.4.0", "url": "https://api.github.com/repos/microsoft/SEAL/releases/22876761", "release_id": 22876761, "date_created": "2019-10-14T18:54:47Z", "date_published": "2020-01-15T23:17:10Z"}, "confidence": 1, "technique": "GitHub_API"}], "code_of_conduct": [{"result": {"value": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/CODE_OF_CONDUCT.md"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributing_guidelines": [{"result": {"value": "# Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.opensource.microsoft.com.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/).\nContact [opencode@microsoft.com](mailto:opencode@microsoft.com) for any additional questions or comments.\n\n### Pull Requests\n\nSubmit pull requrests to **branch *contrib***.\nPull requests to any other branch will not be accepted.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to **provide a CLA** and decorate the PR appropriately (e.g., status check, comment).\nSimply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\n### Formatting\n\nMicrosoft SEAL uses a customized `.clang-format` configuration for C++ code styling.\nA script `tools/scripts/clang-format-all.sh` is provided to easily format all C++ sources and headers in the `native` directory.\nTo ensure the code is properly formatted before making a pull request, we highly recommend using [pre-commit](https://pre-commit.com/).\nNote that the repository includes a `.pre-commit-config.yaml` that describes the appropriate formatting checks.\n\nDocumentation are mostly written in GitHub-flavored Markdown.\nA line break is required after each full sentence.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/CONTRIBUTING.md"}, {"result": {"value": "For contributing to Microsoft SEAL, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n", "type": "Text_excerpt", "original_header": "Contributing", "parent_header": ["Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/Microsoft/SEAL/main/tools/scripts/clang-format-all.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/Microsoft/SEAL/main/tools/scripts/collect_system_info.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "usage": [{"result": {"value": "There are multiple ways of installing Microsoft SEAL and starting to use it.\nThe easiest way is to use a package manager to download, build, and install the library.\nFor example, [vcpkg](https://github.com/microsoft/vcpkg) works on most platforms and will be up-to-date with the latest release of Microsoft SEAL (C++17 only).\nOn macOS you can also use [Homebrew](https://formulae.brew.sh/formula/seal).\nOn FreeBSD you can use `pkg install seal` to install [security/seal](https://www.freshports.org/security/seal/).\nThe .NET library is available as a multiplatform [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\nFinally, one can build Microsoft SEAL manually with a multiplatform CMake build system; see [Building Microsoft SEAL Manually](#building-microsoft-seal-manually) for details.\n", "type": "Text_excerpt", "original_header": "Getting Started", "parent_header": ["Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "Intel HEXL is a library providing efficient implementations of cryptographic primitives common in homomorphic encryption. The acceleration is particularly evident on Intel processors with the Intel AVX512-IFMA52 instruction set.\n", "type": "Text_excerpt", "original_header": "Intel HEXL", "parent_header": ["Microsoft SEAL", "Getting Started", "Optional Dependencies"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "Microsoft GSL (Guidelines Support Library) is a header-only library that implements `gsl::span`: a *view type* that provides safe (bounds-checked) array access to memory.\n\nFor example, if Microsoft GSL is available, Microsoft SEAL can allow `BatchEncoder` and `CKKSEncoder` to encode from and decode to a `gsl::span` instead of `std::vector`, which can in some cases have a significant performance benefit.\n", "type": "Text_excerpt", "original_header": "Microsoft GSL", "parent_header": ["Microsoft SEAL", "Getting Started", "Optional Dependencies"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "ZLIB and Zstandard are widely used compression libraries. Microsoft SEAL can optionally use these libraries to compress data that is serialized.\n\nOne may ask how compression can help when ciphertext and key data is supposed to be indistinguishable from random.\nIn Microsoft SEAL `Ciphertext` objects consist of a large number of integers modulo specific prime numbers (`coeff_modulus` primes).\nWhen using the CKKS scheme in particular, these prime numbers can be quite small (e.g., 30 bits), but the data is nevertheless serialized as 64-bit integers.\nTherefore, it is not uncommon that almost half of the ciphertext bytes are zeros, and applying a general-purpose compression algorithm is a convenient way of getting rid this wasted space.\nThe BFV scheme benefits typically less from this technique, because the prime numbers used for the `coeff_modulus` encryption parameter tend to be larger, and integers modulo these prime numbers fill more of each 64-bit word.\nCompressed serialization can be applied to any serializable Microsoft SEAL object &ndash; not just to `Ciphertext` and keys .\n\nIf Microsoft SEAL is compiled with ZLIB or Zstandard support, compression will automatically be used for serialization; see `Serialization::compr_mode_default` in [native/src/seal/serialization.h](native/src/seal/serialization.h).\nHowever, it is always possible to explicitly pass `compr_mode_type::none` to serialization methods to disable compression.\nIf both ZLIB and Zstandard support are enabled, Zstandard is used by default due to its much better performance.\n\n**Note:** The compression rate for a `SecretKey` can (in theory at least) reveal information about the key.\nIn most common applications of Microsoft SEAL the size of a `SecretKey` would not be deliberately revealed to untrusted parties.\nIf this is a concern, one can always save the `SecretKey` in an uncompressed form.\n\n<!-- ### Installing with VCPKG (Windows, Unix-like) -->\n<!-- To install Microsoft SEAL with all dependencies enabled, run `./vcpkg install seal` or `./vcpkg install seal:x64-windows-static` on Windows. -->\n<!-- To install Microsoft SEAL with partial dependencies enabled, for example, only `ms-gsl`, run `./vcpkg install seal[core,ms-gsl]` or `./vcpkg install seal[core,ms-gsl]:x64-windows-static` on Windows. -->\n\n<!-- ### Installing with Homebrew (macOS) -->\n", "type": "Text_excerpt", "original_header": "ZLIB and Zstandard", "parent_header": ["Microsoft SEAL", "Getting Started", "Optional Dependencies"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "Using Microsoft SEAL will require the user to invest some time in learning fundamental concepts in homomorphic encryption.\nThe code comes with heavily commented examples that are designed to gradually teach such concepts as well as demonstrate a large fraction of the API.\nThe examples are available (and identical) in C++ and C#, and are divided into several source files in `native/examples/` (C++) and `dotnet/examples/` (C#), as follows:\n\n| C++                   | C#                   | Description                                                                  |\n| --------------------- | -------------------- | ---------------------------------------------------------------------------- |\n| `examples.cpp`        | `Examples.cs`        | The example runner application                                               |\n| `1_bfv_basics.cpp`    | `1_BFV_Basics.cs`    | Encrypted modular arithmetic using the BFV scheme                            |\n| `2_encoders.cpp`      | `2_Encoders.cs`      | Encoding more complex data into Microsoft SEAL plaintext objects             |\n| `3_levels.cpp`        | `3_Levels.cs`        | Introduces the concept of levels; prerequisite for using the CKKS scheme     |\n| `4_bgv_basics.cpp`    | `4_BGV_Basics.cs`    | Encrypted modular arithmetic using the BGV scheme                            |\n| `5_ckks_basics.cpp`   | `5_CKKS_Basics.cs`   | Encrypted real number arithmetic using the CKKS scheme                       |\n| `6_rotation.cpp`      | `6_Rotation.cs`      | Performing cyclic rotations on encrypted vectors in the BFV and CKKS schemes |\n| `7_serialization.cpp` | `7_Serialization.cs` | Serializing objects in Microsoft SEAL                                        |\n| `8_performance.cpp`   | `8_Performance.cs`   | Performance tests                                                            |\n\nIt is recommended to read the comments and the code snippets along with command line printout from running an example.\nFor easier navigation, command line printout provides the line number in the associated source file where the associated code snippets start.\nTo build the examples, see [Examples, Tests, and Benchmark](#examples-tests-and-benchmark) (C++) and [Building .NET Components](#building-net-components) (C#).\n\n**Note:** It is impossible to know how to use Microsoft SEAL correctly without studying examples 1&ndash;6.\nThey are designed to provide the reader with the necessary conceptual background on homomorphic encryption.\nReusing code directly from the examples will not work well, as the examples are often demonstrating individual pieces of functionality, and are not optimized for performance.\nWriting Microsoft SEAL code without studying the examples in depth will inevitably result in code that is vulnerable, malfunctioning, or extremely slow.\n", "type": "Text_excerpt", "original_header": "Examples", "parent_header": ["Microsoft SEAL", "Getting Started"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "When studying the examples above, it will become clear that the CKKS scheme can be unfriendly to beginners.\nEven relatively simple computations can be challenging to get to work due to the limitations of the rescaling operation and the requirement of aligning scales at different levels.\n\nWe have created a new compiler tool called EVA that helps resolve these challenges to a large extent.\nEVA allows programmers to express desired encrypted computations in Python. It optimizes the computations for Microsoft SEAL, selects appropriate encryption parameters, and provides a convenient Python API for encrypting the input, executing the computation, and decrypting the result.\nEVA is available at [GitHub.com/Microsoft/EVA](https://GitHub.com/Microsoft/EVA).\nTry it out, and let us know what you think!\n\n**Note:** EVA only supports the CKKS scheme. There are no immediate plans to support the BFV or BGV scheme.\n", "type": "Text_excerpt", "original_header": "CKKS Programming with EVA", "parent_header": ["Microsoft SEAL", "Getting Started"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "When building Microsoft SEAL, examples, tests, and benchmarks can be built by setting `SEAL_BUILD_EXAMPLES=ON`, `SEAL_BUILD_TESTS=ON`, and `SEAL_BUILD_BENCH=ON`; see [Basic CMake Options](basic-cmake-options).\nAlternatively, [examples](native/examples/CMakeLists.txt), [tests](native/tests/CMakeLists.txt), and [benchmark](native/bench/CMakeLists.txt) can be built as standalone CMake projects linked with Microsoft SEAL (installed in `~/mylibs`), by following the commands below.\nOmit setting `SEAL_ROOT` if the library is installed globally.\n\n```PowerShell\ncd native/<examples|tests|bench>\ncmake -S . -B build -DSEAL_ROOT=~/mylibs\ncmake --build build\n```\n\nBy default, benchmarks run for a vector of parameters and primitives, which can be overwhelmingly informative.\nTo execute a subset of benchmark cases, see [Google Benchmark README](https://github.com/google/benchmark/blob/master/README.md#running-a-subset-of-benchmarks).\nFor advanced users, the `bm_parms_vec` variable in [native/bench/bench.cpp](native/bench/bench.cpp) can be overwritten with custom parameter sets.\n\n**Note**: The benchmark code is strictly for experimental purposes; it allows insecure parameters that must not be used in real applications.\nDo not follow the benchmarks as examples.\n", "type": "Text_excerpt", "original_header": "Examples, Tests, and Benchmarks", "parent_header": ["Microsoft SEAL", "Building Microsoft SEAL Manually", "Building C++ Components"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "requirements": [{"result": {"value": "Microsoft SEAL has no required dependencies, but certain optional features can be enabled when compiling with support for specific third-party libraries.\n\nWhen [building manually](#building-microsoft-seal-manually), one can choose to have the Microsoft SEAL build system download and build the dependencies, or alternatively search the system directories for pre-installed dependencies.\nOn the other extreme, the downloadable [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) cannot be configured at all, but it is always possible to [build a custom NuGet package](#building-your-own-nuget-package).\nOther package managers offer varying amounts of opportunities for configuring the dependencies and [other build options](#basic-cmake-options).\n\nThe optional dependencies and their tested versions (other versions may work as well) are as follows:\n\n| Optional dependency                                    | Tested version | Use                                              |\n| ------------------------------------------------------ | -------------- | ------------------------------------------------ |\n| [Intel HEXL](https://github.com/intel/hexl)            | 1.2.5          | Acceleration of low-level kernels                |\n| [Microsoft GSL](https://github.com/microsoft/GSL)      | 4.0.0          | API extensions                                   |\n| [ZLIB](https://github.com/madler/zlib)                 | 1.2.13         | Compressed serialization                         |\n| [Zstandard](https://github.com/facebook/zstd)          | 1.5.2          | Compressed serialization (much faster than ZLIB) |\n| [GoogleTest](https://github.com/google/googletest)     | 1.12.1         | For running tests                                |\n| [GoogleBenchmark](https://github.com/google/benchmark) | 1.7.1          | For running benchmarks                           |\n", "type": "Text_excerpt", "original_header": "Optional Dependencies", "parent_header": ["Microsoft SEAL", "Getting Started"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "Intel HEXL is a library providing efficient implementations of cryptographic primitives common in homomorphic encryption. The acceleration is particularly evident on Intel processors with the Intel AVX512-IFMA52 instruction set.\n", "type": "Text_excerpt", "original_header": "Intel HEXL", "parent_header": ["Microsoft SEAL", "Getting Started", "Optional Dependencies"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "Microsoft GSL (Guidelines Support Library) is a header-only library that implements `gsl::span`: a *view type* that provides safe (bounds-checked) array access to memory.\n\nFor example, if Microsoft GSL is available, Microsoft SEAL can allow `BatchEncoder` and `CKKSEncoder` to encode from and decode to a `gsl::span` instead of `std::vector`, which can in some cases have a significant performance benefit.\n", "type": "Text_excerpt", "original_header": "Microsoft GSL", "parent_header": ["Microsoft SEAL", "Getting Started", "Optional Dependencies"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "ZLIB and Zstandard are widely used compression libraries. Microsoft SEAL can optionally use these libraries to compress data that is serialized.\n\nOne may ask how compression can help when ciphertext and key data is supposed to be indistinguishable from random.\nIn Microsoft SEAL `Ciphertext` objects consist of a large number of integers modulo specific prime numbers (`coeff_modulus` primes).\nWhen using the CKKS scheme in particular, these prime numbers can be quite small (e.g., 30 bits), but the data is nevertheless serialized as 64-bit integers.\nTherefore, it is not uncommon that almost half of the ciphertext bytes are zeros, and applying a general-purpose compression algorithm is a convenient way of getting rid this wasted space.\nThe BFV scheme benefits typically less from this technique, because the prime numbers used for the `coeff_modulus` encryption parameter tend to be larger, and integers modulo these prime numbers fill more of each 64-bit word.\nCompressed serialization can be applied to any serializable Microsoft SEAL object &ndash; not just to `Ciphertext` and keys .\n\nIf Microsoft SEAL is compiled with ZLIB or Zstandard support, compression will automatically be used for serialization; see `Serialization::compr_mode_default` in [native/src/seal/serialization.h](native/src/seal/serialization.h).\nHowever, it is always possible to explicitly pass `compr_mode_type::none` to serialization methods to disable compression.\nIf both ZLIB and Zstandard support are enabled, Zstandard is used by default due to its much better performance.\n\n**Note:** The compression rate for a `SecretKey` can (in theory at least) reveal information about the key.\nIn most common applications of Microsoft SEAL the size of a `SecretKey` would not be deliberately revealed to untrusted parties.\nIf this is a concern, one can always save the `SecretKey` in an uncompressed form.\n\n<!-- ### Installing with VCPKG (Windows, Unix-like) -->\n<!-- To install Microsoft SEAL with all dependencies enabled, run `./vcpkg install seal` or `./vcpkg install seal:x64-windows-static` on Windows. -->\n<!-- To install Microsoft SEAL with partial dependencies enabled, for example, only `ms-gsl`, run `./vcpkg install seal[core,ms-gsl]` or `./vcpkg install seal[core,ms-gsl]:x64-windows-static` on Windows. -->\n\n<!-- ### Installing with Homebrew (macOS) -->\n", "type": "Text_excerpt", "original_header": "ZLIB and Zstandard", "parent_header": ["Microsoft SEAL", "Getting Started", "Optional Dependencies"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "| System | Toolchain |\n|---|---|\n| Windows | Visual Studio 2022 with C++ CMake Tools for Windows |\n| Linux | Clang++ (>= 5.0) or GNU G++ (>= 6.0), CMake (>= 3.13) |\n| macOS/iOS | Xcode toolchain (>= 9.3), CMake (>= 3.13) |\n| Android | Android Studio |\n| FreeBSD | CMake (>= 3.13) |\n\n**Note:** Microsoft SEAL compiled with Clang++ has much better runtime performance than one compiled with GNU G++.\n", "type": "Text_excerpt", "original_header": "Requirements", "parent_header": ["Microsoft SEAL", "Building Microsoft SEAL Manually", "Building C++ Components"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "installation": [{"result": {"value": "For .NET developers the easiest way of installing Microsoft SEAL is by using the multiplatform NuGet package available at [NuGet.org](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\nSimply add this package into your .NET project as a dependency and you are ready to go.\n\nTo develop mobile applications using Microsoft SEAL and .NET for Android and iOS, just add this package to your [Xamarin](https://dotnet.microsoft.com/apps/xamarin) project. Unlike the Microsoft SEAL C++ library, the .NET wrapper library works only on 64-bit platforms, so only `arm64-v8a`/`x86_64` Android ABIs and `arm64`/`x86_64` iOS architectures are supported.\n", "type": "Text_excerpt", "original_header": "Installing from NuGet Package (Windows, Linux, macOS, Android, iOS)", "parent_header": ["Microsoft SEAL", "Getting Started"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "You can download and install seal using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager.\n\n```shell\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh  # ./bootstrap-vcpkg.bat for Windows\n./vcpkg integrate install\n./vcpkg install seal\n```\n\nThe \"seal\" port in vcpkg is kept up to date by Microsoft team members and community contributors.\nIf the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n", "type": "Text_excerpt", "original_header": "Installing from vcpkg", "parent_header": ["Microsoft SEAL", "Getting Started"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "If you have root access to the system you can install Microsoft SEAL globally as follows:\n\n```PowerShell\ncmake -S . -B build\ncmake --build build\nsudo cmake --install build\n```\n\nTo instead install Microsoft SEAL locally, e.g., to `~/mylibs/`, do the following:\n\n```PowerShell\ncmake -S . -B build -DCMAKE_INSTALL_PREFIX=~/mylibs\ncmake --build build\nsudo cmake --install build\n```\n", "type": "Text_excerpt", "original_header": "Installing Microsoft SEAL", "parent_header": ["Microsoft SEAL", "Building Microsoft SEAL Manually", "Building C++ Components"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "On Windows the same scripts above work in a developer command prompt for Visual Studio using either the Ninja or \"Visual Studio 17 2022\" generators.\n\nWhen using the Ninja generator, please use the appropriate command prompt depending on the platform you want to build for. If you want to build for x64, please use the **x64 Native Tools Command Prompt for Visual Studio 2022** command prompt to configure and build the library. If you want to build for x86, please use the **x86 Native Tools Command Prompt for Visual Studio 2022** command prompt to configure and build the library. To build using Ninja, type\n\n```PowerShell\ncmake -S . -B build -G Ninja\ncmake --build build\n```\n\nWhen using the \"Visual Studio 17 2022\" generator you can use the **Developer Command Prompt for VS 2022** command prompt to configure and build the library. By default the generated platform will be x64. You can specify the desired platform using the architecture flag `-A <x64|Win32>` and the desired configuration using `--config <Debug|Release>`.\n\n```PowerShell\n# Generate and build for x64 in Release mode\ncmake -S . -B build -G \"Visual Studio 17 2022\" -A x64\ncmake --build build --config Release\n```\n\n```PowerShell\n# Generate and build for x86 in Release mode\ncmake -S . -B build -G \"Visual Studio 17 2022\" -A Win32\ncmake --build build --config Release\n```\n\nInstalling the library in Windows works as well. Instead of using the `sudo` command, however, you need to run `cmake --install build` from a command prompt with Administrator permissions. Files will be installed by default to `C:\\Program Files (x86)\\SEAL\\`.\n\nVisual Studio 2022 provides support for CMake-based projects. You can select the menu option `File / Open / Folder...` and navigate to the folder where the Microsoft SEAL repository is located. After opening the folder, Visual Studio will detect that this is a CMake-based project and will enable the menu command `Project / CMake settings for SEAL`. This will open the CMake settings editor that provides a user interface where you can create different configurations and set different CMake options.\n\nAfter the build completes, the output static library `seal-<version>.lib` can be found in `build\\lib\\` or `build\\lib\\Release\\`.\nWhen linking with applications, using CMake as is explained in [Linking with Microsoft SEAL through CMake](#linking-with-microsoft-seal-through-cmake) is highly recommended.\nAlternatively, you need to add `native\\src\\` (full path) and `build\\native\\src\\` as include directories to locate the Microsoft SEAL header files.\n", "type": "Text_excerpt", "original_header": "Building and Installing on Windows", "parent_header": ["Microsoft SEAL", "Building Microsoft SEAL Manually", "Building C++ Components"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "On all platforms Microsoft SEAL is built with CMake.\nWe recommend using out-of-source build although in-source build works.\nBelow we give instructions for how to configure, build, and install Microsoft SEAL either globally (system-wide), or locally (for a single user).\nA global install requires elevated (root or administrator) privileges.\n \n", "original_header": "Building C++ Components"}, "confidence": 0.9503091267540109, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "We assume that Microsoft SEAL has been cloned into a directory called `SEAL` and all commands presented below are assumed to be executed in the directory `SEAL`. \nYou can build the Microsoft SEAL library (out-of-source) for your machine by executing the following commands:\n```PowerShell\ncmake -S . -B build\ncmake --build build\n```\n \n", "original_header": "Building Microsoft SEAL"}, "confidence": 0.900079430415001, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Microsoft SEAL can be compiled for Android and iOS.\nUnder the [android/](android/) directory of the source tree you will find an [Android Studio](https://developer.android.com/studio) project that you can use to compile the library for Android. \nTo build the library for iOS, use the following scripts:\n```PowerShell\n# Configure CMake\ncmake -S . -B build -GXcode -DSEAL_BUILD_SEAL_C=ON -DSEAL_BUILD_STATIC_SEAL_C=ON -DCMAKE_SYSTEM_NAME=iOS \"-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64\" -C cmake/memset_s.iOS.cmake\n\n# Build libseal*.a for x86_64\nxcodebuild -project build/SEAL.xcodeproj -sdk iphonesimulator -arch x86_64 -configuration Release clean build\nmkdir -p build/lib/x86_64\ncp build/lib/Release/libseal*.a build/lib/x86_64\n\n# Build libseal*.a for arm64\nxcodebuild -project SEAL.xcodeproj -sdk iphoneos -arch arm64 -configuration Release clean build\nmkdir -p build/lib/arm64\ncp build/lib/Release/libseal*.a build/lib/arm64\n\n# Combine libseal-*.a into libseal.a and libsealc-*.a into libsealc.a\nlipo -create -output build/lib/libseal.a build/lib/x86_64/libseal-*.a arm64/libseal-*.a\nlipo -create -output build/lib/libsealc.a build/lib/x86_64/libsealc-*.a build/lib/arm64/libsealc-*.a\n```\n \n", "original_header": "Building for Android and iOS"}, "confidence": 0.891069210699508, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Microsoft SEAL can be compiled for JavaScript and WebAssembly using [emscripten](https://emscripten.org) on Windows, Linux, and macOS.\nBuilding for the Web means SEAL can be run in any client/server environment such as all the major browsers (e.g. Edge, Chrome, Firefox, Safari) and NodeJS. \nBuilding for WebAssembly requires the emscripten toolchain to be installed.\nThe easiest way to configure the toolchain is to clone [emsdk](https://github.com/emscripten-core/emsdk) and follow the [instructions](https://emscripten.org/docs/getting_started/downloads.html#installation-instructions-using-the-emsdk-recommended) (with system-specific notes). For examples, on Linux and macOS, inside the `emsdk` repo, run the following:\n```PowerShell\n# Install the latest toolchain\n./emsdk install latest\n./emsdk activate latest\n# Source the environment\nsource ./emsdk_env.sh\n```\n**On Windows, better run from a developer command prompt for Visual Studio; and replace `./emsdk` and `source ./emsdk_env.sh` with `emsdk` and `emsdk_env.bat`, respectively.**\nIn other environments, `cmake` must be added to the path, and either \"Ninja\" or \"MinGW Makefiles\" should be specified as generator in the following configuration step.\n`emcmake` does not work with Visual Studio 17 2022 generator.\nWithin the same shell, navigate to the root directory of Microsoft SEAL, run the following commands to build for WebAssembly:\n```PowerShell\n# Configure CMake. Example flags for a release build\nemcmake cmake -S . -B build \\\n -DBUILD_SHARED_LIBS=OFF \\\n -DCMAKE_BUILD_TYPE=Release \\\n -DCMAKE_CXX_FLAGS_RELEASE=\"-DNDEBUG -flto -O3\" \\\n -DCMAKE_C_FLAGS_RELEASE=\"-DNDEBUG -flto -O3\" \\\n -DSEAL_BUILD_BENCH=OFF \\ # Benchmark can be built for WASM. Change this to ON.\n -DSEAL_BUILD_EXAMPLES=OFF \\\n -DSEAL_BUILD_TESTS=OFF \\\n -DSEAL_USE_CXX17=ON \\\n -DSEAL_USE_INTRIN=ON \\\n -DSEAL_USE_MSGSL=OFF \\\n -DSEAL_USE_ZLIB=ON \\\n -DSEAL_THROW_ON_TRANSPARENT_CIPHERTEXT=ON\n\n# Make the static library (shared libs are not supported with emscripten)\nemmake make -C build -j\n\n# Build the WebAssembly module\nemcc \\\n -Wall \\\n -flto \\\n -O3 \\\n build/lib/libseal-4.1.a \\\n --bind \\\n -o \"build/bin/seal_wasm.js\" \\\n -s WASM=1 \\\n -s ALLOW_MEMORY_GROWTH=1\n```\n \n", "original_header": "Building for WebAssembly"}, "confidence": 0.9421671622769664, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "| CMake option           | Values                                                       | Information                                                                                                                                                                                            |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| CMAKE_BUILD_TYPE       | **Release**</br>Debug</br>RelWithDebInfo</br>MinSizeRel</br> | `Debug` and `MinSizeRel` have worse run-time performance. `Debug` inserts additional assertion code. Set to `Release` unless you are developing Microsoft SEAL itself or debugging some complex issue. |\n| SEAL_BUILD_EXAMPLES    | ON / **OFF**                                                 | Build the C++ examples in [native/examples](native/examples).                                                                                                                                          |\n| SEAL_BUILD_TESTS       | ON / **OFF**                                                 | Build the tests to check that Microsoft SEAL works correctly.                                                                                                                                          |\n| SEAL_BUILD_BENCH       | ON / **OFF**                                                 | Build the performance benchmark.                                                                                                                                                                       |\n| SEAL_BUILD_DEPS        | **ON** / OFF                                                 | Set to `ON` to automatically download and build [optional dependencies](#optional-dependencies); otherwise CMake will attempt to locate pre-installed dependencies.                                    |\n| SEAL_USE_INTEL_HEXL    | ON / **OFF**                                                 | Set to `ON` to use Intel HEXL for low-level kernels.                                                                                                                                            |\n| SEAL_USE_MSGSL         | **ON** / OFF                                                 | Build with Microsoft GSL support.                                                                                                                                                                      |\n| SEAL_USE_ZLIB          | **ON** / OFF                                                 | Build with ZLIB support.                                                                                                                                                                               |\n| SEAL_USE_ZSTD          | **ON** / OFF                                                 | Build with Zstandard support.                                                                                                                                                                          |\n| BUILD_SHARED_LIBS      | ON / **OFF**                                                 | Set to `ON` to build a shared library instead of a static library. Not supported in Windows.                                                                                                           |\n| SEAL_BUILD_SEAL_C      | ON / **OFF**                                                 | Build the C wrapper library SEAL_C. This is used by the C# wrapper and most users should have no reason to build it.                                                                                   |\n| SEAL_USE_CXX17         | **ON** / OFF                                                 | Set to `ON` to build Microsoft SEAL as C++17 for a positive performance impact.                                                                                                                        |\n| SEAL_USE_INTRIN        | **ON** / OFF                                                 | Set to `ON` to use compiler intrinsics for improved performance. CMake will automatically detect which intrinsics are available and enable them accordingly.                                           | \nAs usual, these options can be passed to CMake with the `-D` flag.\nFor example, one could run\n```PowerShell\ncmake -S . -B build -DSEAL_BUILD_EXAMPLES=ON\n```\n \n", "original_header": "Basic CMake Options"}, "confidence": 0.8575781157848186, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "It is very easy to link your own applications and libraries with Microsoft SEAL if you use CMake.\nSimply add the following to your `CMakeLists.txt`:\n```PowerShell\nfind_package(SEAL 4.1 REQUIRED)\ntarget_link_libraries(<your target> SEAL::seal)\n```\nIf Microsoft SEAL was installed globally, the above `find_package` command will likely find the library automatically.\nTo link with a Microsoft SEAL installed locally, e.g., installed in `~/mylibs` as described above, you may need to tell CMake where to look for Microsoft SEAL when you configure your application by running:\n```PowerShell\ncd <directory containing your CMakeLists.txt>\ncmake . -DCMAKE_PREFIX_PATH=~/mylibs\n```\n \nIf Microsoft SEAL was installed using a package manager like vcpkg or Homebrew, please refer to their documentation for how to link with the installed library. For example, vcpkg requires you to specify the vcpkg CMake toolchain file when configuring your project.\n \n", "original_header": "Linking with Microsoft SEAL through CMake"}, "confidence": 0.9124159233948557, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "On Windows, you can also use the Microsoft Visual Studio 2022 solution file, for example, `out/build/x64-Debug/dotnet/SEALNet.sln` to build all three projects.\n \n", "original_header": "Windows, Linux, and macOS"}, "confidence": 0.8964639651003404, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "You can build your own NuGet package for Microsoft SEAL by following the instructions in [NUGET.md](dotnet/nuget/NUGET.md).\n \n", "original_header": "Building Your Own NuGet Package"}, "confidence": 0.9797963964424068, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "citation": [{"result": {"value": "To cite Microsoft SEAL in academic papers, please use the following BibTeX entries.\n", "type": "Text_excerpt", "original_header": "Citing Microsoft SEAL", "parent_header": ["Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 4.1)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = jan,\n        year = 2023,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 4.1", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 4.0)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = mar,\n        year = 2022,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 4.0", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.7)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = sep,\n        year = 2021,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.7", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.6)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = nov,\n        year = 2020,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.6", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.5)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = apr,\n        year = 2020,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.5", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.4)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = oct,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.4", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.3)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = jun,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.3", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.2)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = feb,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.2", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.1)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = dec,\n        year = 2018,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.1", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}, {"result": {"value": "```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.0)},\n        howpublished = {\\url{http://sealcrypto.org}},\n        month = oct,\n        year = 2018,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n", "type": "Text_excerpt", "original_header": "Version 3.0", "parent_header": ["Microsoft SEAL", "Citing Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "acknowledgement": [{"result": {"value": "Many people have contributed substantially to Microsoft SEAL without being represented in the Git history.\nWe wish to express special gratitude to [John Wernsing](https://github.com/wernsingj), [Hao Chen](https://github.com/haochenuw), [Yongsoo Song](https://yongsoosong.github.io), [Olli Saarikivi](https://github.com/olsaarik), [Rachel Player](https://github.com/rachelplayer), [Gizem S. Cetin](https://github.com/gizemscetin), [Peter Rindal](https://github.com/ladnir), [Amir Jalali](https://github.com/amirjalali65), [Kyoohyung Han](https://github.com/KyoohyungHan), [Sadegh Riazi](https://www.sadeghr.com), [Ilia Iliashenko](https://homes.esat.kuleuven.be/~ilia), [Roshan Dathathri](https://roshandathathri.github.io), [Pardis Emami-Naeini](https://homes.cs.washington.edu/~pemamina), [Sangeeta Chowdhary](https://github.com/sangeeta0201), [Deepika Natarajan](https://github.com/dnat112), and [Michael Rosenberg](https://github.com/rozbb).\n", "type": "Text_excerpt", "original_header": "Acknowledgments", "parent_header": ["Microsoft SEAL"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "For compiling .NET code you will need to install a [.NET SDK (>= 6.0)](https://dotnet.microsoft.com/download).\nBuilding the SEAL_C library with CMake will generate project files for the .NET wrapper library, examples, and unit tests.\nThe SEAL_C library must be discoverable when running a .NET application, e.g., be present in the same directory as your executable, which is taken care of by the .NET examples and tests project files.\nRun the following scripts to build each project:\n```PowerShell\ndotnet build build/dotnet/src --configuration <Debug|Release> # Build .NET wrapper library\ndotnet test build/dotnet/tests # Build and run .NET unit tests\ndotnet run -p build/dotnet/examples # Build and run .NET examples\n```\n \n", "original_header": "Windows, Linux, and macOS"}, "confidence": 0.80239499425657, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "full_title": [{"result": {"type": "String", "value": "Microsoft SEAL"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/abs/1912.11951"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/Microsoft/SEAL/main/README.md"}]}