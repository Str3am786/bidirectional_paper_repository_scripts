{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:24:57"}, "code_repository": [{"result": {"value": "https://github.com/nadeemlab/DoseRTX", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "nadeemlab", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2021-05-10T15:48:47Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-09T05:19:57Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "description": [{"result": {"value": "Domain knowledge driven 3D radiation dose prediction [PMB'22]", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "We used 360 randomly selected lung cancer patients treated with conventional IMRT with 60Gy in 30 fractions at Memorial Sloan Kettering Cancer Center between the year 2017 and 2020. All these patients received treatment and therefore included the treated plans which were manually generated by experienced planners using 5\u20137 coplanar beams and 6 MV energy. All these plans were generated using EclipseTM V13.7-V15.5 (Varian Medical Systems, Palo Alto, CA, USA). \n![workflow](./images/pipeline_nobeam1.JPG)*Data processing pipeline and training a 3D network to generate a 3D voxelwise dose. OARs are one-hot encoded and concatenated along the channel axis with CT and PTV input to the network.* \n", "original_header": "Dataset"}, "confidence": 0.9491695892830961, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "![architecure_image](./images/network_arch_1.png)*We train a Unet like CNN architecture to output the voxel-wise 3D dose prediction corresponding to an input comprising of 3D CT/contours which are concatenated along the channel dimension. The network follows a common encoder-decoder style architecture which is composed of a series of layers which progressively downsample the input (encoder) using max pooling operation, until a bottleneck layer, where the process is reversed (decoder). Additionally, Unet-like skip connections are added between corresponding layers of encoder and decoder. This is done to share low-level information between the encoder and decoder counterparts. The network (Figure 2) uses Convolution-BatchNorm-ReLU-Dropout as a block to perform series of convolution. Dropout is used with a dropout rate of 50%. Maxpool is used to downsample the image by 2 in each spatial level of encoder. All the convolutions in the encoder are 3\u00d73\u00d73 3D spatial filters with a stride of 1 in all 3 directions. In the decoder we use trilinear upsampling followed by regular 2 \u00d7 2 \u00d7 2 stride 1 convolution. The last layer in the decoder maps its input to a one channel output (1283, 1).*\n \n", "original_header": "Deep Learning Model For 3D Dose Prediction Using Domain Based Moment Loss Function"}, "confidence": 0.9937224764246824, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "If you don't have access to GPU or appropriate hardware, we have also created [Google CoLab project](https://colab.research.google.com/drive/1GFa-8AESF2hu9SnqGqAxoH5MvdU-OFNf) for your convenience. Please follow the steps in the provided notebook to install the requirements and run the training and testing scripts. All the libraries and pretrained models have already been set up there. The user can directly run DoseRTX on their dataset or the provided sample data using the instructions given in the Google CoLab project. \n \n", "original_header": "Google CoLab:"}, "confidence": 0.8040240487853543, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The following bar charts shows evaluation of different DVH metrics using models trained with MAE, (MAE + DVH), and (MAE+Moment) losses (as **reported in the paper**). \n*Comparison of different metrics for (a) MAE vs (MAE + Moment) and (b) (MAE+ DVH) vs (MAE + Moment) losses. Y axis shows the relative improvement(in %) using (MAE+Moment) loss compared to MAE and (MAE+DVH) loss. The higher is always better. For statistical analysis, Wilcoxon signed-rank test was used and p = 0.05 was considered statistically significant.* \n![comparison_plots](./images/LUNG1-005.png)*Comparison of DVH metrics using different loss functions for the above sample patient. As can been seen, in general, the prediction generated with (MAE + Moment) loss resembles the actual ground-truth dose more than the other models, for this particular patient, especially for Cord, Esophagus, Heart, Lung_R and PTV.*\n \n", "original_header": "Results [PMB'22]"}, "confidence": 0.9685115325164887, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "*We propose a novel moment-based loss function for predicting 3D dose distribution for the challenging conventional lung IMRT plans. The moment-based loss function is convex and differentiable and can easily incorporate clinical dose volume histogram (DVH) domain knowledge in any deep learning framework without computational overhead. A large dataset of 360 (240 for training, 50 for validation and 70 for testing) conventional lung patients with 2Gy \u00d7 30 fractions was used to train the deep learning (DL) model using clinically treated plans at our institution. A UNet-like CNN architecture was trained using computed tomography (CT), planning target volume (PTV) and organ-at-risk contours (OAR) as input to infer corresponding voxel-wise 3D dose distribution. We evaluated three different loss functions: (1) The popular Mean Absolute Error (MAE) Loss, (2) the recently developed MAE + DVH Loss, and (3) the proposed MAE + Moments Loss. The quality of the predictions was compared using different DVH metrics as well as dose-score and DVH-score, recently introduced by the AAPM knowledge-based planning grand challenge. Model with (MAE + Moment) loss function outperformed the model with MAE loss by significantly improving the DVH-score (11%, p<0.01) while having similar computational cost. It also outperformed the model trained with (MAE+DVH) by significantly improving the computational cost (48%) and the DVH-score (8%, p<0.01). DVH metrics are widely accepted evaluation criteria in the clinic. However, incorporating them into the 3D dose prediction model is challenging due to their non-convexity and non-differentiability. Moments provide a mathematically rigorous and computationally efficient way to incorporate DVH information in any deep learning architecture.* \n"}, "confidence": 0.9957143060002738, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "name": [{"result": {"value": "DoseRTX", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "nadeemlab/DoseRTX", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/nadeemlab/DoseRTX/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/nadeemlab/DoseRTX/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 26, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "3d-dose-prediction, deep-learning, domain-knowledge-integration, pytorch, radiation-dose, radiotherapy", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 6, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/nadeemlab/DoseRTX/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 212613}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Dockerfile", "name": "Dockerfile", "type": "Programming_language", "size": 1837}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 1574}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "MATLAB", "name": "MATLAB", "type": "Programming_language", "size": 1362}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "has_build_file": [{"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/docker/Dockerfile", "type": "Url", "format": "dockerfile"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/docker/Dockerfile"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/docker/build.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/scripts/test_file.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/scripts/test_ct2dose3d.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/scripts/train_1.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/scripts/test_1.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/scripts/train_ct2dose3d.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "installation": [{"result": {"value": "We highly recommend installing dependencies in either a python virtual environment or anaconda environment. Instructions for python virtual environment:\n\nInstall all the dependencies present in requirements.txt:\n```bash\npython3 -m venv venv\nsource venv/bin/activate\n(venv) pip install -r requirements.txt\n```\nPlease use this [link](https://github.com/facebookresearch/pytorch3d/blob/main/INSTALL.md#3-install-wheels-for-linux) for the details of pytorch3d installation.\n", "type": "Text_excerpt", "original_header": "Installation"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "We also provide a Dockerfile that can be used to run the models inside a container.\nFirst, you need to install the [Docker Engine](https://docs.docker.com/engine/install/ubuntu/). For using GPU's you also need to install [NVIDIA container toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker). After installing the Docker, you need to follow these steps: \n", "original_header": "Docker"}, "confidence": 0.986043509077387, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "If you don't have access to GPU or appropriate hardware, we have also created [Google CoLab project](https://colab.research.google.com/drive/1GFa-8AESF2hu9SnqGqAxoH5MvdU-OFNf) for your convenience. Please follow the steps in the provided notebook to install the requirements and run the training and testing scripts. All the libraries and pretrained models have already been set up there. The user can directly run DoseRTX on their dataset or the provided sample data using the instructions given in the Google CoLab project. \n \n", "original_header": "Google CoLab:"}, "confidence": 0.8715892253404388, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "usage": [{"result": {"value": "```bash\ngit clone --recursive git@github.com:nadeemlab/DoseRTX.git\n```\nHigh level usage instructions are given below. Detailed instructions at each step can be found in the respective subsections.\n\nStep 1: You have to first perform data pre-processing using the pre-process data module by providing your dicom_input_dir and data_directory, as follows: \n```bash\npython data_preprocess.py --in_dir dicom_input_dir --out_dir data_directory\n```\n\nStep 2: Now execute the following command which will start the training:\n```bash\npython train.py --dataroot data_directory --netG stand_unet --name planName --model doseprediction3d --direction AtoB --lambda_L1 1 --dataset_mode dosepred3d --norm batch --batch_size 1 --pool_size 0 --display_port 8097 --lr 0.0002 --input_nc 7 --output_nc 1 --display_freq 10 --print_freq 1 --gpu_ids 0,1,2\n```\n\nStep 3: Test the trained model:\n```bash\npython test.py --dataroot data_directory --netG stand_unet --name planName --phase test --mode eval --model doseprediction3d --input_nc 7 --output_nc 1 --direction AtoB --dataset_mode dosepred3d --norm batch --gpu_ids 1\n```\n", "type": "Text_excerpt", "original_header": "Usage"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"value": "Pre-processed data will be saved in out_dir directory.\n\nStep 1: Provide input directory of patient DICOM. DICOM for the sample patients are available [here](https://zenodo.org/record/7036132)\n```bash\ntar -xjvf sample_patient_data.tar.bz2\n```\n\nStep 2.0: Generate nrrd files using data preprocess\n\n- Pre-processed data is available [here](https://zenodo.org/record/7036132).\n```bash\n   tar xjvf sample_nrrd_data.tar.bz2\n```\n\nStep 2.1: \n- Input: Each case consists of five nrrd files (SimpleITK)  \n    1. LUNG1_CT.nrrd                - CT Image  \n    2. LUNG1_dose.nrrd              - dose in orginal resolution\n    3. LUNG1_dose_resampled.nrrd          - dose mapped to CT orginal resolution  \n    4. LUNG1_PTV.nrrd    - PTV mask  \n\t5. LUNG1_RTSTRUCTS.nrrd    - OAR mask\n- Output: Each case consists of six npy files (numpy) - 128x128x128 cubic image patch  \n    1. CT.npy           - CT Image  \n    2. dose.npy          - Actual dose  \n    3. PTV.npy       - PTV mask  \n    4. OAR.npy        - OAR mask\n\t5. hist.npy        - volume at or above a given dose threshold value\n\t6. bins.npy        - dose thresold values\n- Sampled Pre-processed data is available for TCIA lung patients [here](https://zenodo.org/record/7036132).\n```bash\n   tar xjvf sample_processed_data.tar.bz2\n```\n  \nStep 2.2: Divide datasets into subsets (Training, Validation, Testing). e.g. train data should be in data_directory/train directory. test data should be in data_directory/test directory\n", "type": "Text_excerpt", "original_header": "Data Pre-processing", "parent_header": ["Usage"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "run": [{"result": {"value": "Download the pretrained model from the links below and put them in checkpoints directory. e.g. ./checkpoints/MAE_loss\n1. Dose prediction using (MAE) loss is available [here](https://zenodo.org/record/7036132)\n```bash\n    tar xjvf MAE_loss.tar.bz2\n    python test.py --dataroot data_directory --netG stand_unet --name MAE_loss --phase test --mode eval --model doseprediction3d --input_nc 7 --output_nc 1 --direction AtoB --dataset_mode dosepred3d --norm batch --gpu_ids 1\n```\n2. Dose prediction using (MAE + DVH) loss is available [here](https://zenodo.org/record/7036132)\n```bash\n    tar xjvf MAE_DVH_loss.tar.bz2\n    python test.py --dataroot data_directory --netG stand_unet --name MAE_DVH_loss --phase test --mode eval --model doseprediction3d --input_nc 7 --output_nc 1 --direction AtoB --dataset_mode dosepred3d --norm batch --gpu_ids 1\n```\n3. Dose prediction using (MAE + Moment) loss is available [here](https://zenodo.org/record/7036132)\n```bash\n    tar xjvf MAE_Moment_loss.tar.bz2\n    python test.py --dataroot data_directory --netG stand_unet --name MAE_Moment_loss --phase test --mode eval --model doseprediction3d --input_nc 7 --output_nc 1 --direction AtoB --dataset_mode dosepred3d --norm batch --gpu_ids 1\n```\n", "type": "Text_excerpt", "original_header": "Running Pre-trained Models", "parent_header": ["Usage"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "citation": [{"result": {"value": "If you find our work useful in your research or if you use parts of this code or the dataset, please cite the following paper:\n```\n@article{jhanwar2022domain,\n  title={Domain knowledge driven 3D dose prediction using moment-based loss function},\n  author={Jhanwar, Gourav and Dahiya, Navdeep and Ghahremani, Parmida and Zarepisheh, Masoud and Nadeem, Saad},\n  journal={Physics in Medicine \\& Biology},\n  year={2022},\n  publisher={IOP Publishing}\n}\n\n```\n", "type": "Text_excerpt", "original_header": "Reference"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"value": "@article{jhanwar2022domain,\n  title={Domain knowledge driven 3D dose prediction using moment-based loss function},\n  author={Jhanwar, Gourav and Dahiya, Navdeep and Ghahremani, Parmida and Zarepisheh, Masoud and Nadeem, Saad},\n  journal={Physics in Medicine \\& Biology},\n  year={2022},\n  publisher={IOP Publishing}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Computer Vision"}, "confidence": 0.8782509789705154, "technique": "supervised_classification"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "1. Clone this repository.\n2. To create a docker image from the docker file; from top-level repository directory:\n```\ncd docker; ./build.sh\n```\n* Note: You may need to modify lines 1, and 12 of Dockerfile to match your systems' cuda version.\n3. Upon successful docker image creation:\n* Pre-built docker image including sample data and pre-trained models is available [here](https://hub.docker.com/r/nadeemlab/dosertx) \nBASH2*\n4. Then run `python test.py --dataroot sample_processed_data --netG stand_unet --name MAE_Moment_loss --phase test --mode eval --model doseprediction3d --input_nc 7 --output_nc 1 --direction AtoB --dataset_mode dosepred3d --norm batch --gpu_ids 1` or  \n   \n   `python test.py --dataroot sample_processed_data --netG stand_unet --name MAE_loss --phase test --mode eval --model doseprediction3d --input_nc 7 --output_nc 1 --direction AtoB --dataset_mode dosepred3d --norm batch --gpu_ids 1` or  \n  \n   `python test.py --dataroot sample_processed_data --netG stand_unet --name MAE_DVH_loss --phase test --mode eval --model doseprediction3d --input_nc 7 --output_nc 1 --direction AtoB --dataset_mode dosepred3d --norm batch --gpu_ids 1`  \n   \n   for testing either of the three pre-trained models on the sample patient data. The resulting dose prediction will be in the ./results directory.\n \n", "original_header": "Docker"}, "confidence": 0.8793920849478873, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "\n<img src=\"./images/MAEvsMom.png\" alt=\"MAEvsMoment_image\" width=\"400\"/>  <img src=\"./images/DVHvsMom.png\" alt=\"DVHvsMoment_image\" width=\"400\"/> \n", "original_header": "Results [PMB'22]"}, "confidence": 0.9124837196669503, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "full_title": [{"result": {"type": "String", "value": ""}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "executable_example": [{"result": {"type": "Url", "value": "https://colab.research.google.com/drive/1GFa-8AESF2hu9SnqGqAxoH5MvdU-OFNf"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "image": [{"result": {"type": "Url", "value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/./images/pipeline_nobeam1.JPG"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Url", "value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/./images/network_arch_1.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Url", "value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/./images/MAEvsMom.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Url", "value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/./images/DVHvsMom.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}, {"result": {"type": "Url", "value": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/./images/LUNG1-005.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/pdf/2207.03414.pdf\">PMB'22 Paper</a>\n    |\n    <a href=\"#installation\">Installation</a>\n    |\n    <a href=\"#usage\">Usage</a>\n    |\n    <a href=\"#docker\">Docker</a>\n    |\n    <a href=\"#google-colab\">Google CoLab</a>\n    |\n    <a href=\"https://github.com/nadeemlab/DoseRTX/issues\">Issues</a>\n  </p>\n</p>\n\n\n*We propose a novel moment-based loss function for predicting 3D dose distribution for the challenging conventional lung IMRT plans. The moment-based loss function is convex and differentiable and can easily incorporate clinical dose volume histogram (DVH"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/nadeemlab/DoseRTX/main/README.md"}]}