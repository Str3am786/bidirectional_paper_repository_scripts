{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:11:44"}, "code_repository": [{"result": {"value": "https://github.com/google/AFL", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "google", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2019-07-25T16:50:06Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-21T14:03:43Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/apache-2.0", "type": "License", "name": "Apache License 2.0", "url": "https://api.github.com/licenses/apache-2.0", "spdx_id": "Apache-2.0"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/AFL/master/LICENSE"}], "description": [{"result": {"value": "american fuzzy lop - a security-oriented fuzzer", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "American Fuzzy Lop is a brute-force fuzzer coupled with an exceedingly simple\nbut rock-solid instrumentation-guided genetic algorithm. It uses a modified\nform of edge coverage to effortlessly pick up subtle, local-scale changes to\nprogram control flow. \n  3) Attempt to trim the test case to the smallest size that doesn't alter\n     the measured behavior of the program, \n  4) Repeatedly mutate the file using a balanced and well-researched variety\n     of traditional fuzzing strategies, \n  5) If any of the generated mutations resulted in a new state transition\n     recorded by the instrumentation, add mutated output as a new entry in the\n     queue. \nAs a side result of the fuzzing process, the tool creates a small,\nself-contained corpus of interesting test cases. These are extremely useful\nfor seeding other, labor- or resource-intensive testing regimes - for example,\nfor stress-testing browsers, office applications, graphics suites, or\nclosed-source tools. \nThe fuzzer is thoroughly tested to deliver out-of-the-box performance far\nsuperior to blind fuzzing or coverage-only tools.\n \n", "original_header": "2) The afl-fuzz approach"}, "confidence": 0.928867336909343, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "When source code is *NOT* available, the fuzzer offers experimental support for\nfast, on-the-fly instrumentation of black-box binaries. This is accomplished\nwith a version of QEMU running in the lesser-known \"user space emulation\" mode. \nFor additional instructions and caveats, see qemu_mode/README.qemu. \nThe mode is approximately 2-5x slower than compile-time instrumentation, is\nless conducive to parallelization, and may have some other quirks.\n \n", "original_header": "4) Instrumenting binary-only apps"}, "confidence": 0.9506570385260639, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "To operate correctly, the fuzzer requires one or more starting file that\ncontains a good example of the input data normally expected by the targeted\napplication. There are two basic rules: \n  - Keep the files small. Under 1 kB is ideal, although not strictly necessary.\n    For a discussion of why size matters, see [perf_tips.txt](docs/perf_tips.txt). \nPS. If a large corpus of data is available for screening, you may want to use\nthe afl-cmin utility to identify a subset of functionally distinct files that\nexercise different code paths in the target binary.\n \n", "original_header": "5) Choosing initial test cases"}, "confidence": 0.9573506313296062, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Tips for optimizing fuzzing performance are discussed in [perf_tips.txt](docs/perf_tips.txt). \n", "original_header": "6) Fuzzing binaries"}, "confidence": 0.9024783137390672, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "See the [status_screen.txt](docs/status_screen.txt) file for information on\nhow to interpret the displayed stats and monitor the health of the process.\nBe sure to consult this file especially if any UI elements are highlighted in\nred. \n  - queue/   - test cases for every distinctive execution path, plus all the\n               starting files given by the user. This is the synthesized corpus\n               mentioned in section 2.\n               Before using this corpus for any other purposes, you can shrink\n               it to a smaller size using the afl-cmin tool. The tool will find\n               a smaller subset of files offering equivalent edge coverage. \n  - hangs/   - unique test cases that cause the tested program to time out. The\n               default time limit before something is classified as a hang is\n               the larger of 1 second and the value of the -t parameter.\n               The value can be fine-tuned by setting AFL_HANG_TMOUT, but this\n               is rarely necessary. \nThe file names for crashes and hangs are correlated with parent, non-faulting\nqueue entries. This should help with debugging. \nChange LIMIT_MB to match the -m parameter passed to afl-fuzz. On OpenBSD,\nalso change -Sv to -Sd. \n", "original_header": "7) Interpreting output"}, "confidence": 0.9051954204080612, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Every instance of afl-fuzz takes up roughly one core. This means that on\nmulti-core systems, parallelization is necessary to fully utilize the hardware.\nFor tips on how to fuzz a common target on multiple cores or multiple networked\nmachines, please refer to [parallel_fuzzing.txt](docs/parallel_fuzzing.txt). \nThe parallel fuzzing mode also offers a simple way for interfacing AFL to other\nfuzzers, to symbolic or concolic execution engines, and so forth; again, see the\nlast section of [parallel_fuzzing.txt](docs/parallel_fuzzing.txt) for tips.\n \n", "original_header": "8) Parallelized fuzzing"}, "confidence": 0.9823415705063197, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "By default, afl-fuzz mutation engine is optimized for compact data formats -\nsay, images, multimedia, compressed data, regular expression syntax, or shell\nscripts. It is somewhat less suited for languages with particularly verbose and\nredundant verbiage - notably including HTML, SQL, or JavaScript. \nTo avoid the hassle of building syntax-aware tools, afl-fuzz provides a way to\nseed the fuzzing process with an optional dictionary of language keywords,\nmagic headers, or other special tokens associated with the targeted data type\n-- and use that to reconstruct the underlying grammar on the go: \nThere is no way to provide more structured descriptions of the underlying\nsyntax, but the fuzzer will likely figure out some of this based on the\ninstrumentation feedback alone. This actually works in practice, say: \nPS. Even when no explicit dictionary is given, afl-fuzz will try to extract\nexisting syntax tokens in the input corpus by watching the instrumentation\nvery closely during deterministic byte flips. This works for some types of\nparsers and grammars, but isn't nearly as good as the -x mode. \nIf a dictionary is really hard to come by, another option is to let AFL run\nfor a while, and then use the token capture library that comes as a companion\nutility with AFL. For that, see libtokencap/README.tokencap.\n \n", "original_header": "9) Fuzzer dictionaries"}, "confidence": 0.9648123662485366, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "The coverage-based grouping of crashes usually produces a small data set that\ncan be quickly triaged manually or with a very simple GDB or Valgrind script.\nEvery crash is also traceable to its parent non-crashing test case in the\nqueue, making it easier to diagnose faults. \nHaving said that, it's important to acknowledge that some fuzzing crashes can be\ndifficult to quickly evaluate for exploitability without a lot of debugging and\ncode analysis work. To assist with this task, afl-fuzz supports a very unique\n\"crash exploration\" mode enabled with the -C flag. \nIn this mode, the fuzzer takes one or more crashing test cases as the input,\nand uses its feedback-driven fuzzing strategies to very quickly enumerate all\ncode paths that can be reached in the program while keeping it in the\ncrashing state. \nThe output is a small corpus of files that can be very rapidly examined to see\nwhat degree of control the attacker has over the faulting address, or whether\nit is possible to get past an initial out-of-bounds read - and see what lies\nbeneath. \nThe minimizer accepts the -m, -t, -f and @@ syntax in a manner compatible with\nafl-fuzz. \nAnother recent addition to AFL is the afl-analyze tool. It takes an input\nfile, attempts to sequentially flip bytes, and observes the behavior of the\ntested program. It then color-codes the input based on which sections appear to\nbe critical, and which are not; while not bulletproof, it can often offer quick\ninsights into complex file formats. More info about its operation can be found\nnear the end of [technical_details.txt](docs/technical_details.txt).\n \n", "original_header": "10) Crash triage"}, "confidence": 0.9741147246031209, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Please keep in mind that, similarly to many other computationally-intensive\ntasks, fuzzing may put strain on your hardware and on the OS. In particular: \n  - Targeted programs may end up erratically grabbing gigabytes of memory or\n    filling up disk space with junk files. AFL tries to enforce basic memory\n    limits, but can't prevent each and every possible mishap. The bottom line\n    is that you shouldn't be fuzzing on systems where the prospect of data loss\n    is not an acceptable risk. \n  - Fuzzing involves billions of reads and writes to the filesystem. On modern\n    systems, this will be usually heavily cached, resulting in fairly modest\n    \"physical\" I/O - but there are many factors that may alter this equation.\n    It is your responsibility to monitor for potential trouble; with very heavy\n    I/O, the lifespan of many HDDs and SSDs may be reduced. \n", "original_header": "12) Common-sense risks"}, "confidence": 0.9505091318126077, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Here are some of the most important caveats for AFL: \n  - As with any other brute-force tool, the fuzzer offers limited coverage if\n    encryption, checksums, cryptographic signatures, or compression are used to\n    wholly wrap the actual data format to be tested. \n  - There are some unfortunate trade-offs with ASAN and 64-bit binaries. This\n    isn't due to any specific fault of afl-fuzz; see [notes_for_asan.txt](docs/notes_for_asan.txt)\n    for tips. \n  - There is no direct support for fuzzing network services, background\n    daemons, or interactive apps that require UI interaction to work. You may\n    need to make simple code changes to make them behave in a more traditional\n    way. Preeny may offer a relatively simple option, too - see:\n    https://github.com/zardus/preeny \n", "original_header": "13) Known limitations &amp; areas for improvement"}, "confidence": 0.9168877767251459, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}], "name": [{"result": {"value": "AFL", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "google/AFL", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/google/AFL/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/google/AFL/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 3337, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 596, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/google/AFL/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "C", "name": "C", "type": "Programming_language", "size": 420132}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 38373}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Makefile", "name": "Makefile", "type": "Programming_language", "size": 13788}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "C++", "name": "C++", "type": "Programming_language", "size": 5249}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "HTML", "name": "HTML", "type": "Programming_language", "size": 3475}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Rich Text Format", "name": "Rich Text Format", "type": "Programming_language", "size": 21}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "JavaScript", "name": "JavaScript", "type": "Programming_language", "size": 20}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/google/AFL/releases/28091828", "tag": "v2.57b", "name": "Version 2.57b (2020-06-30)", "author": {"name": "Dor1s", "type": "User"}, "description": "- llvm_mode and alf-clang-fast related fixes.\r\n- Android support.\r\n- Fixed bugs with stability calculate and testcase calibration.", "tarball_url": "https://api.github.com/repos/google/AFL/tarball/v2.57b", "zipball_url": "https://api.github.com/repos/google/AFL/zipball/v2.57b", "html_url": "https://github.com/google/AFL/releases/tag/v2.57b", "url": "https://api.github.com/repos/google/AFL/releases/28091828", "release_id": 28091828, "date_created": "2020-07-04T16:25:38Z", "date_published": "2020-07-04T16:26:16Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/AFL/releases/20280282", "tag": "v2.56b", "name": "Version 2.56b (2019-09-26)", "author": {"name": "Dor1s", "type": "User"}, "description": "- Fixed the mismatch between the released version and the version in the code.\r\n", "tarball_url": "https://api.github.com/repos/google/AFL/tarball/v2.56b", "zipball_url": "https://api.github.com/repos/google/AFL/zipball/v2.56b", "html_url": "https://github.com/google/AFL/releases/tag/v2.56b", "url": "https://api.github.com/repos/google/AFL/releases/20280282", "release_id": 20280282, "date_created": "2019-09-26T14:42:43Z", "date_published": "2019-09-26T14:43:38Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/AFL/releases/20105754", "tag": "v2.55b", "name": "Version 2.55b (2019-09-19)", "author": {"name": "jduart", "type": "User"}, "description": "- Exporting more metrics (peak_rss_mb, slowest_exec_ms).\r\n\r\n- Improved tests.\r\n\r\n- Fixes for bugs and changes in upstream llvm/clang.", "tarball_url": "https://api.github.com/repos/google/AFL/tarball/v2.55b", "zipball_url": "https://api.github.com/repos/google/AFL/zipball/v2.55b", "html_url": "https://github.com/google/AFL/releases/tag/v2.55b", "url": "https://api.github.com/repos/google/AFL/releases/20105754", "release_id": 20105754, "date_created": "2019-09-17T23:02:02Z", "date_published": "2019-09-19T11:27:29Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/AFL/releases/18868955", "tag": "v2.53b", "name": "Version 2.53b (2019-07-25)", "author": {"name": "Dor1s", "type": "User"}, "description": "* No functional changes. Updated some comments and license headers to comply with the open sourcing guidelines and publish the source code on GitHub.\r\n\r\nPlease download this release by checking out the release tag in a git checkout:\r\n\r\n```\r\ngit checkout tags/v2.53b\r\n```\r\n", "tarball_url": "https://api.github.com/repos/google/AFL/tarball/v2.53b", "zipball_url": "https://api.github.com/repos/google/AFL/zipball/v2.53b", "html_url": "https://github.com/google/AFL/releases/tag/v2.53b", "url": "https://api.github.com/repos/google/AFL/releases/18868955", "release_id": 18868955, "date_created": "2019-07-25T17:01:52Z", "date_published": "2019-07-25T17:04:31Z"}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/google/AFL/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributing_guidelines": [{"result": {"value": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google.com/conduct/).\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/AFL/master/CONTRIBUTING.md"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/google/AFL/master/qemu_mode/build_qemu_support.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/google/AFL/master/experimental/asan_cgroups/limit_memory.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/google/AFL/master/experimental/distributed_fuzzing/sync_script.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/google/AFL/master/experimental/crash_triage/triage_crashes.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/google/AFL/master/.travis/check_fuzzer_stats.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "installation": [{"result": {"value": "Fuzzing is one of the most powerful and proven strategies for identifying\nsecurity issues in real-world software; it is responsible for the vast\nmajority of remote code execution and privilege escalation bugs found to date\nin security-critical software.\n\nUnfortunately, fuzzing is also relatively shallow; blind, random mutations\nmake it very unlikely to reach certain code paths in the tested code, leaving\nsome vulnerabilities firmly outside the reach of this technique.\n\nThere have been numerous attempts to solve this problem. One of the early\napproaches - pioneered by Tavis Ormandy - is corpus distillation. The method\nrelies on coverage signals to select a subset of interesting seeds from a\nmassive, high-quality corpus of candidate files, and then fuzz them by\ntraditional means. The approach works exceptionally well, but requires such\na corpus to be readily available. In addition, block coverage measurements\nprovide only a very simplistic understanding of program state, and are less\nuseful for guiding the fuzzing effort in the long haul.\n\nOther, more sophisticated research has focused on techniques such as program\nflow analysis (\"concolic execution\"), symbolic execution, or static analysis.\nAll these methods are extremely promising in experimental settings, but tend\nto suffer from reliability and performance problems in practical uses - and\ncurrently do not offer a viable alternative to \"dumb\" fuzzing techniques.\n", "type": "Text_excerpt", "original_header": "1) Challenges of guided fuzzing", "parent_header": ["american fuzzy lop"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "QEMU is a project separate from AFL, but you can conveniently build the\nfeature by doing:\n```shell\n$ cd qemu_mode\n$ ./build_qemu_support.sh\n```\n \n", "original_header": "4) Instrumenting binary-only apps"}, "confidence": 0.9566058292198897, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Any existing output directory can be also used to resume aborted jobs; try:\n```shell\n$ ./afl-fuzz -i- -o existing_output_dir [...etc...]\n```\n \n", "original_header": "7) Interpreting output"}, "confidence": 0.8715509684335637, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Beyond this, see INSTALL for platform-specific tips.\n \n", "original_header": "13) Known limitations &amp; areas for improvement"}, "confidence": 0.8493114243810984, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Thank you!\n \n", "original_header": "14) Special thanks"}, "confidence": 0.9088063058459555, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}], "usage": [{"result": {"value": "When source code is available, instrumentation can be injected by a companion\ntool that works as a drop-in replacement for gcc or clang in any standard build\nprocess for third-party code.\n\nThe instrumentation has a fairly modest performance impact; in conjunction with\nother optimizations implemented by afl-fuzz, most programs can be fuzzed as fast\nor even faster than possible with traditional tools.\n\nThe correct way to recompile the target program may vary depending on the\nspecifics of the build process, but a nearly-universal approach would be:\n\n```shell\n$ CC=/path/to/afl/afl-gcc ./configure\n$ make clean all\n```\n\nFor C++ programs, you'd would also want to set `CXX=/path/to/afl/afl-g++`.\n\nThe clang wrappers (afl-clang and afl-clang++) can be used in the same way;\nclang users may also opt to leverage a higher-performance instrumentation mode,\nas described in llvm_mode/README.llvm.\n\nWhen testing libraries, you need to find or write a simple program that reads\ndata from stdin or from a file and passes it to the tested library. In such a\ncase, it is essential to link this executable against a static version of the\ninstrumented library, or to make sure that the correct .so file is loaded at\nruntime (usually by setting `LD_LIBRARY_PATH`). The simplest option is a static\nbuild, usually possible via:\n\n```shell\n$ CC=/path/to/afl/afl-gcc ./configure --disable-shared\n```\n\nSetting `AFL_HARDEN=1` when calling 'make' will cause the CC wrapper to\nautomatically enable code hardening options that make it easier to detect\nsimple memory bugs. Libdislocator, a helper library included with AFL (see\nlibdislocator/README.dislocator) can help uncover heap corruption issues, too.\n\nPS. ASAN users are advised to review [notes_for_asan.txt](docs/notes_for_asan.txt) file for important\ncaveats.\n", "type": "Text_excerpt", "original_header": "3) Instrumenting programs for use with AFL", "parent_header": ["american fuzzy lop"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}, {"result": {"value": "Fuzzing is a wonderful and underutilized technique for discovering non-crashing\ndesign and implementation errors, too. Quite a few interesting bugs have been\nfound by modifying the target programs to call abort() when, say:\n\n  - Two bignum libraries produce different outputs when given the same\n    fuzzer-generated input,\n\n  - An image library produces different outputs when asked to decode the same\n    input image several times in a row,\n\n  - A serialization / deserialization library fails to produce stable outputs\n    when iteratively serializing and deserializing fuzzer-supplied data,\n\n  - A compression library produces an output inconsistent with the input file\n    when asked to compress and then decompress a particular blob.\n\nImplementing these or similar sanity checks usually takes very little time;\nif you are the maintainer of a particular package, you can make this code\nconditional with `#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION` (a flag also\nshared with libfuzzer) or `#ifdef __AFL_COMPILER` (this one is just for AFL).\n", "type": "Text_excerpt", "original_header": "11) Going beyond crashes", "parent_header": ["american fuzzy lop"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}], "contact": [{"result": {"value": "Questions? Concerns? Bug reports? Please use GitHub.\n\nThere is also a mailing list for the project; to join, send a mail to\n<afl-users+subscribe@googlegroups.com>. Or, if you prefer to browse\narchives first, try: [https://groups.google.com/group/afl-users](https://groups.google.com/group/afl-users).\n", "type": "Text_excerpt", "original_header": "15) Contact", "parent_header": ["american fuzzy lop"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "  2) Take next input file from the queue, \n", "original_header": "2) The afl-fuzz approach"}, "confidence": 0.8298203443678523, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "american fuzzy lop"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/AFL/master/README.md"}]}