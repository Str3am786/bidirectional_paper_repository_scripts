{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 18:56:22"}, "code_repository": [{"result": {"value": "https://github.com/codeplaysoftware/portDNN", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "codeplaysoftware", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2018-05-28T10:59:33Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-20T03:32:11Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/apache-2.0", "type": "License", "name": "Apache License 2.0", "url": "https://api.github.com/licenses/apache-2.0", "spdx_id": "Apache-2.0"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright Codeplay Software Ltd.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/LICENSE"}], "description": [{"result": {"value": "portDNN is a library implementing neural network algorithms written using SYCL", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "portDNN is a library implementing various neural network algorithms such as\npooling and convolution written using SYCL and C++. \nportDNN currently supports the following operations: \nThe convolution operations have several implementations, including tiled and\nWinograd kernels. The supported data format is NHWC. \nThe project is maintained by [Codeplay Software][codeplay developer].\n \n", "original_header": "Table of Contents"}, "confidence": 0.9276364611150576, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "The master branch of portDNN is regularly tested with the \"Supported\" hardware\nlisted on [the ComputeCpp Supported Platforms page][supported platforms].\nportDNN may also work on other hardware and platforms assuming they implement\nSPIR or SPIR-V support. portDNN is primarily tested on Ubuntu 16.04 LTS with\nthe corresponding default package versions. portDNN will generally match the\nmost recently released ComputeCpp, though it is likely to be compatible with\nother versions. We test against the most recent version.\n \n", "original_header": "Supported Platforms"}, "confidence": 0.968976732096473, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "portDNN supports cross-compilation targeting a number of devices. However,\nbecause of the two-step compilation process used in ComputeCpp, standard\nCMake toolchain files won't provide enough information to portDNN's build\nscripts to work properly. \nTo that end, two toolchains are available. The first, gcc-generic.cmake,\nwill likely work with any prebuilt GCC toolchain (it is not compatible\nwith those installed through package managers). The second is designed to\nwork with the poky toolchain available as part of the Yocto Linux system. \nThe first step is to download ComputeCpp for both the host machine you are\nrunning on and for the platform you would like to target. You should make\nsure to match the ComputeCpp version for both downloads. Both are required\nso that the host can run the compiler binary, while the tools can link\nusing the target device library. Similarly, acquire a GCC toolchain for\nthe platform you are targeting. Lastly you should download the OpenCL\nheaders. They are standard across all platforms, but you cannot specify\nthe default package-managed location of `/usr/include` for them, as that\nwill cause conflicts with other system headers. An easy fix is to download\nthe headers [from GitHub][ocl headers]. \n", "original_header": "Cross-compilation with ComputeCpp"}, "confidence": 0.8929488862019973, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "name": [{"result": {"value": "portDNN", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "codeplaysoftware/portDNN", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/codeplaysoftware/portDNN/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/codeplaysoftware/portDNN/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 100, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "cplusplus, cpp, cpp11, gpgpu, machine-learning, neural-network, opencl, sycl", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 22, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/CodeplaySoftware/SYCL-DNN/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "C++", "name": "C++", "type": "Programming_language", "size": 108961462}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "CMake", "name": "CMake", "type": "Programming_language", "size": 183152}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 147775}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "C", "name": "C", "type": "Programming_language", "size": 855}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 680}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Batchfile", "name": "Batchfile", "type": "Programming_language", "size": 263}, "confidence": 1, "technique": "GitHub_API"}], "code_of_conduct": [{"result": {"value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [sycl@codeplay.com]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant], version 1.4,\navailable at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>.\n\n---\n\nIf you have any questions about or suggestions for this code of conduct, \nreach us at [sycl@codeplay.com].\n\n[Contributor Covenant]: https://www.contributor-covenant.org/\n[sycl@codeplay.com]: mailto:sycl@codeplay.com\n\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/CODE_OF_CONDUCT.md"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributing_guidelines": [{"result": {"value": "# Contributing to SYCL DNN\n\n## Pull requests\n\nWe really appreciate all pull requests to SYCL DNN, but we also have a few\nguidelines in place to help keep the project consistent and reduce the noise in\ncommits, pull requests and code. Hopefully these guidelines are clear and easy\nto follow, if not then feel free to add an issue to address this.\n\nBefore starting any development please make an issue to communicate your intent\nand ensure that you are not duplicating work.\n\n### Formatting\n\nPlease ensure that any contributions are formatted using clang-format with the\nGoogle style. This helps to ensure consistency across the project and also\nprevents any unhelpful comments in code reviews about how code should be\nformatted.\n\nTo do this run: `clang-format --style=Google -i <filename>` on any C++ files\nchanged in your contribution.\n\nThe Python scripts are formatted used autopep8.\nRun: `autopep8 -i -a -a <filename>` on any Python files changed in your\ncontribution.\n\n### Pull request guidelines\n\n* Submit any pull request to the `master` branch, unless you are really sure\n  you need to push your changes elsewhere.\n\n* Unless your pull request is trivial, expect comments and suggestions on your\n  pull request. We will provide feedback as soon as possible.\n\n* We cannot accept or test any pull request with merge conflicts, so please fix\n  these before submitting your pull request.\n\n* Please ensure pull requests are small and focussed. This means that they\n  should only address a single feature, change or bug fix. Larger pull requests\n  trying to fix multiple things at once should be split into smaller pull\n  requests.\n\n* All tests must pass before a pull request is accepted.\n\n* If your pull request adds a new feature, please make sure that you add new\n  test cases to cover this feature.\n\n### Commit guidelines\n\n* In your commit messages, the first line should be a short summary of the\n  changes which is no more than 50 characters. Following this should be an\n  empty line, then the remaining commit message explaining the changes in more\n  detail.\n\n* Use the present tense to say what the commit changes.\n\n* Check for any unnecessary whitespace changes with `git diff --check` before\n  committing your changes.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/CONTRIBUTING.md"}], "documentation": [{"result": {"value": "https://github.com/CodeplaySoftware/SYCL-DNN/tree/master/docs", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/bench/make_git_config.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/hooks/clang-format-all.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/hooks/is-formatted.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/hooks/is-clang-formatted.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/hooks/py-format-all.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "requirements": [{"result": {"value": "* CMake (version 3.5.1 and above)\n* OpenCL 1.2-capable hardware and drivers with SPIR 1.2 or SPIR-V support\n* OpenCL ICD Loader\n* OpenCL headers\n* gcc (version 5.4 and above)\n* [ComputeCpp][codeplay developer]\n* Building documentation requires Doxygen and Graphviz/Dot. Tested\n  against versions 1.8.11 and 2.38.0 respectively.\n", "type": "Text_excerpt", "original_header": "Pre-requisites", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "usage": [{"result": {"value": "portDNN uses CMake as its build system. There are provisions in the CMake\nfiles for downloading portDNN's dependencies automatically, for finding\nother dependencies and for selecting which bits of portDNN to build. All\nthese configuration options can be found in the main CMakeLists.txt for the\nproject and will show up in the CMake GUI if you use it. By default, the\ntests and library will be built, but not the benchmarks.\n\nIt is recommended to leave the option `SNN_DOWNLOAD_MISSING_DEPS` set to\non. This will automatically download the source libraries necessary for\nportDNN to build and run (such as Google Test, Google benchmark and\nthe Eigen linear algebra library). Even if you already have these on your\nmachine, downloading them as part of the portDNN means a more consistent\nconfiguration.\n", "type": "Text_excerpt", "original_header": "Building portDNN", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}, {"result": {"value": "You will need to provide the location of the ComputeCpp install you are\nusing in the variable `ComputeCpp_DIR`. It should point to the folder\nwhere `bin/`, `lib/` etc. are. This should be the only argument that is\nmandatory, everything else should be optional. The default build type is\nRelease, though this can be overridden.\n\nComputeCpp with portDNN does not currently support USM. If you build with\nComputeCpp you must disable USM support.\n\nThe following command shows how to compile portDNN.\n\n```bash\n# Setup build environment\nmkdir build && cd build\ncmake .. -DComputeCpp_DIR=/path/to/computecpp -DSNN_ENABLE_USM=OFF\n# Compile portDNN\nmake -j$(nproc)\n```\n", "type": "Text_excerpt", "original_header": "Building with ComputeCpp", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN", "Building portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}, {"result": {"value": "You will need to provide the location of the DPC++ compiler to CMake to\nbuild with DPC++.\n\nDPC++ does support USM. USM support will be automatically built unless you\ndisable it with `-DSNN_ENABLE_USM=OFF`.\n\n```bash\nmkdir build && cd build\ncmake .. -DCMAKE_CXX_COMPILER=/path/to/llvm/bin/clang++ -DSNN_BUILD_BENCHMARKS=OFF -DSNN_BENCH_SYCLBLAS=OFF \n# Compile portDNN\nmake -j$(nproc)\n```\n", "type": "Text_excerpt", "original_header": "Building with DPC++", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN", "Building portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}, {"result": {"value": "The \"samples\" directory contains sample code for the 2D convolution and pooling\noperations offered by portDNN. These binaries are compiled when building portDNN\nusing CMake.\n", "type": "Text_excerpt", "original_header": "Sample Code", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "citation": [{"result": {"value": "portDNN exposes optional features (`double` and `half` data types, `NCHW` data format, USM support), \nthat can be enabled and disabled when building the library.\n\nAttempting to use those feature in an application that links to a build of portDNN that doesn't support them may \ncause `undefined reference` error at link time. Please ensure that your build of portDNN has the required features enabled.\n\nYou can refer to [OPTIONS.md](docs/OPTIONS.md) for a full list of the supported CMake options.\n\n\n", "type": "Text_excerpt", "original_header": "Undefined reference linker errors", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}, {"result": {"value": "If you use portDNN in your research, please cite the library as follows:\n\n> Rod Burns, John Lawson, Duncan McBain, and Daniel Soutar. 2019. *Accelerated\n> Neural Networks on OpenCL Devices Using portDNN.* In Proceedings of the\n> International Workshop on OpenCL (IWOCL'19). ACM, New York, NY, USA, Article\n> 10, 4 pages. DOI: https://doi.org/10.1145/3318170.3318183\n\n```bibtex\n@inproceedings{Burns:2019:ANN:3318170.3318183,\n author = {Burns, Rod and Lawson, John and McBain, Duncan and Soutar, Daniel},\n title = {Accelerated Neural Networks on OpenCL Devices Using portDNN},\n booktitle = {Proceedings of the International Workshop on OpenCL},\n series = {IWOCL'19},\n year = {2019},\n isbn = {978-1-4503-6230-6},\n location = {Boston, MA, USA},\n pages = {10:1--10:4},\n articleno = {10},\n numpages = {4},\n url = {http://doi.acm.org/10.1145/3318170.3318183},\n doi = {10.1145/3318170.3318183},\n acmid = {3318183},\n publisher = {ACM},\n address = {New York, NY, USA},\n keywords = {GPGPU, OpenCL, SYCL, machine learning, neural networks},\n}\n```\n\n[supported platforms]: https://developer.codeplay.com/products/computecpp/ce/guides/platform-support\n[issues]: https://github.com/codeplaysoftware/portDNN/issues\n[ocl headers]: https://github.com/KhronosGroup/OpenCL-Headers\n[codeplay developer]: https://developer.codeplay.com\n", "type": "Text_excerpt", "original_header": "Citation", "parent_header": ["The portDNN neural network acceleration library"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}, {"result": {"value": "@inproceedings{Burns:2019:ANN:3318170.3318183,\n author = {Burns, Rod and Lawson, John and McBain, Duncan and Soutar, Daniel},\n title = {Accelerated Neural Networks on OpenCL Devices Using portDNN},\n booktitle = {Proceedings of the International Workshop on OpenCL},\n series = {IWOCL'19},\n year = {2019},\n isbn = {978-1-4503-6230-6},\n location = {Boston, MA, USA},\n pages = {10:1--10:4},\n articleno = {10},\n numpages = {4},\n url = {http://doi.acm.org/10.1145/3318170.3318183},\n doi = {10.1145/3318170.3318183},\n acmid = {3318183},\n publisher = {ACM},\n address = {New York, NY, USA},\n keywords = {GPGPU, OpenCL, SYCL, machine learning, neural networks},\n}", "type": "Text_excerpt", "format": "bibtex", "doi": "https://doi.org/10.1145/3318170.3318183"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "faq": [{"result": {"value": "portDNN exposes optional features (`double` and `half` data types, `NCHW` data format, USM support), \nthat can be enabled and disabled when building the library.\n\nAttempting to use those feature in an application that links to a build of portDNN that doesn't support them may \ncause `undefined reference` error at link time. Please ensure that your build of portDNN has the required features enabled.\n\nYou can refer to [OPTIONS.md](docs/OPTIONS.md) for a full list of the supported CMake options.\n\n\n", "type": "Text_excerpt", "original_header": "Undefined reference linker errors", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "run": [{"result": {"value": "The portDNN tests are compiled when building portDNN using CMake.\nThe following command shows how to run the tests.\n\n```bash\n# Run the tests\nctest\n# If compiled with benchmark support, run just the benchmarks\nctest -C Benchmark -E test\n```\n", "type": "Text_excerpt", "original_header": "Running the portDNN Tests", "parent_header": ["The portDNN neural network acceleration library", "Getting Started with portDNN"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "support": [{"result": {"value": "Bug reports are vital to provide feedback to the developers about what is going\nwrong with the project, you can raise these using the [\"Issues\"][issues]\nfeature in GitHub.\n\nPlease make sure that your bug report contains the following information:\n\n* A clear and descriptive title.\n* The output of\n  `clinfo | grep -E \"Platform ID|Name|Vendor|[Vv]ersion|Profile|Extensions\"`.\n* The output of `computecpp_info`.\n* The exact steps and commands to run to reproduce the bug.\n* The exact error text shown (if applicable), otherwise the behaviour you\n  expected and what you encountered instead.\n* Should the problem arise outside the project's test suite then please provide\n  a minimal test to allow us to reproduce the problem.\n", "type": "Text_excerpt", "original_header": "Bug reports and Issues", "parent_header": ["The portDNN neural network acceleration library", "Support"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "installation": [{"result": {"type": "Text_excerpt", "value": "The first step is to download ComputeCpp for both the host machine you are\nrunning on and for the platform you would like to target. You should make\nsure to match the ComputeCpp version for both downloads. Both are required\nso that the host can run the compiler binary, while the tools can link\nusing the target device library. Similarly, acquire a GCC toolchain for\nthe platform you are targeting. Lastly you should download the OpenCL\nheaders. They are standard across all platforms, but you cannot specify\nthe default package-managed location of `/usr/include` for them, as that\nwill cause conflicts with other system headers. An easy fix is to download\nthe headers [from GitHub][ocl headers]. \nToolchain files cannot make use cache variables set by the user when\nrunning CMake, as the cache does not exist when the toolchain is executed.\nEnvironment variables are available to toolchain files, however, so they\nare used to pass information to the toolchain. The gcc-generic.cmake\ntoolchain relies on the following environment variables:\n```cmake\nSNN_TARGET_TRIPLE # the triple of the platform you are targeting\nSNN_TOOLCHAIN_DIR # The root directory of the GCC you downloaded\nSNN_SYSROOT_DIR   # The system root, probably (but not necessarily)\n                  # ${SNN_TOOLCHAIN_DIR}/${SNN_TARGET_TRIPLE}/libc\n```\nCMake can then be invoked in a build directory as follows:\n```bash\ncmake -DComputeCpp_DIR=/path/to/computecpp \\\n      -DComputeCpp_HOST_DIR=/path/to/host/computecpp \\\n      -DOpenCL_INCLUDE_DIR=/path/to/opencl/headers \\\n      `# For cross-compiling, check documentation for your platform` \\\n      -DCOMPUTECPP_BITCODE=[(spir[32|64]|spirv[32|64]|ptx64)] \\\n      -DSNN_BUILD_DOCUMENTATION=OFF \\\n      `# Next options let you install the tests to a zippable folder` \\\n      -DSNN_BUILD_TESTS=ON \\\n      -DSNN_BUILD_BENCHMARKS=ON \\\n      -DSNN_INSTALL_TESTS=ON \\\n      -DSNN_INSTALL_BENCHMARKS=ON \\\n      `# This is the most important part - tells CMake to crosscompile` \\\n      -DCMAKE_TOOLCHAIN_FILE=$PWD/../cmake/toolchains/(gcc-generic|arm-gcc-poky).cmake \\\n      -DCMAKE_INSTALL_PREFIX=packaged-binaries \\\n      -GNinja ../\n```\n \nThe process for the poky toolchain is similar, save that you only need to\nprovide the `SNN_SYSROOT_DIR` environment variable. It should be set to\npoint to the directory named `sysroots` in the poky toolchain. You will\nlikely want `COMPUTECPP_BITCODE=spir32`. Otherwise, these instructions\nshould still work.\n \n", "original_header": "Cross-compilation with ComputeCpp"}, "confidence": 0.9238666907278438, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "The portDNN neural network acceleration library"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/CodeplaySoftware/SYCL-DNN/master/README.md"}]}