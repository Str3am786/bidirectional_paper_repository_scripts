{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:00:28"}, "code_repository": [{"result": {"value": "https://github.com/BVLC/caffe", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "BVLC", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2013-09-12T18:39:48Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-21T09:39:24Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": null, "type": "License", "name": "Other", "url": null, "spdx_id": "NOASSERTION"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "COPYRIGHT\n\nAll contributions by the University of California:\nCopyright (c) 2014-2017 The Regents of the University of California (Regents)\nAll rights reserved.\n\nAll other contributions:\nCopyright (c) 2014-2017, the respective contributors\nAll rights reserved.\n\nCaffe uses a shared copyright model: each contributor holds copyright over\ntheir contributions to Caffe. The project versioning records all such\ncontribution and copyright details. If a contributor wants to further mark\ntheir specific copyright on a particular contribution, they should indicate\ntheir copyright solely in the commit message of the change when it is\ncommitted.\n\nLICENSE\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met: \n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer. \n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution. \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nCONTRIBUTION AGREEMENT\n\nBy contributing to the BVLC/caffe repository through pull-request, comment,\nor otherwise, the contributor releases their content to the\nlicense and copyright terms herein.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/LICENSE"}, {"result": {"value": "Caffe is released under the [BSD 2-Clause license](https://github.com/BVLC/caffe/blob/master/LICENSE).\nThe BAIR/BVLC reference models are released for unrestricted use.\n\nPlease cite Caffe in your publications if it helps your research:\n\n    @article{jia2014caffe,\n      Author = {Jia, Yangqing and Shelhamer, Evan and Donahue, Jeff and Karayev, Sergey and Long, Jonathan and Girshick, Ross and Guadarrama, Sergio and Darrell, Trevor},\n      Journal = {arXiv preprint arXiv:1408.5093},\n      Title = {Caffe: Convolutional Architecture for Fast Feature Embedding},\n      Year = {2014}\n    }\n", "type": "Text_excerpt", "original_header": "License and Citation", "parent_header": ["Caffe"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}], "description": [{"result": {"value": "Caffe: a fast open framework for deep learning.", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "Caffe is a deep learning framework made with expression, speed, and modularity in mind.\nIt is developed by Berkeley AI Research ([BAIR](http://bair.berkeley.edu))/The Berkeley Vision and Learning Center (BVLC) and community contributors. \nCheck out the [project site](http://caffe.berkeleyvision.org) for all the details like \n- [DIY Deep Learning for Vision with Caffe](https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.p)\n- [Tutorial Documentation](http://caffe.berkeleyvision.org/tutorial/)\n- [BAIR reference models](http://caffe.berkeleyvision.org/model_zoo.html) and the [community model zoo](https://github.com/BVLC/caffe/wiki/Model-Zoo)\n- [Installation instructions](http://caffe.berkeleyvision.org/installation.html) \n", "original_header": "Caffe"}, "confidence": 0.9515006436200211, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}, {"result": {"type": "Text_excerpt", "value": " - [Intel Caffe](https://github.com/BVLC/caffe/tree/intel) (Optimized for CPU and support for multi-node), in particular Intel\u00ae Xeon processors.\n- [OpenCL Caffe](https://github.com/BVLC/caffe/tree/opencl) e.g. for AMD or Intel devices.\n- [Windows Caffe](https://github.com/BVLC/caffe/tree/windows)\n \n", "original_header": "Custom distributions"}, "confidence": 0.8466129010458437, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "Please join the [caffe-users group](https://groups.google.com/forum/#!forum/caffe-users) or [gitter chat](https://gitter.im/BVLC/caffe) to ask questions and talk about methods and models.\nFramework development discussions and thorough bug reports are collected on [Issues](https://github.com/BVLC/caffe/issues). \n", "original_header": "Community"}, "confidence": 0.9614057112191372, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}], "name": [{"result": {"value": "caffe", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "BVLC/caffe", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/BVLC/caffe/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/BVLC/caffe/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 33692, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "deep-learning, machine-learning, vision", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 18973, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/BVLC/caffe/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "C++", "name": "C++", "type": "Programming_language", "size": 2945020}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 334905}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Cuda", "name": "Cuda", "type": "Programming_language", "size": 217936}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "CMake", "name": "CMake", "type": "Programming_language", "size": 103928}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "MATLAB", "name": "MATLAB", "type": "Programming_language", "size": 32353}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Makefile", "name": "Makefile", "type": "Programming_language", "size": 24346}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 17287}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Dockerfile", "name": "Dockerfile", "type": "Programming_language", "size": 2848}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/6081139", "tag": "1.0", "name": "1.0", "author": {"name": "shelhamer", "type": "User"}, "description": "This release marks the convergence of development into a stable, reference release of the framework and a shift into maintenance mode. Let's review the progress culminating in our 1.0:\r\n\r\n- research: nearly 4,000 citations, usage by award papers at CVPR/ECCV/ICCV, and tutorials at ECCV'14 and CVPR'15\r\n- industry: adopted by Facebook, NVIDIA, Intel, Sony, Yahoo! Japan, Samsung, Adobe, A9, Siemens, Pinterest, the Embedded Vision Alliance, and more\r\n- community: 250+ contributors, 15k+ subscribers on github, and 7k+ members of the mailing list\r\n- development: 10k+ forks, >1 contribution/day on average, and dedicated branches for OpenCL and Windows\r\n- downloads: 10k+ downloads and updates a month, ~50k unique visitors to the home page every two weeks, and >100k unique downloads of the reference models\r\n- winner of the ACM MM open source award 2014 and presented as a talk at ICML MLOSS 2015\r\n\r\nThanks for all of your efforts leading us to Caffe 1.0! Your part in development, community, feedback, and framework usage brought us here. As part of 1.0 we will be welcoming collaborators old and new to join as members of the Caffe core.\r\n\r\nStay tuned for the next steps in DIY deep learning with Caffe. As development is never truly done, there's always 1.1!\r\n\r\nNow that 1.0 is done, the next generation of the framework\u2014[Caffe2](http://caffe2.ai/)\u2014is ready to keep up the progress on DIY deep learning in research and industry. While Caffe 1.0 development will continue with 1.1, Caffe2 is the new framework line for future development led by Yangqing Jia. Although Caffe2 is a departure from the development line of Caffe 1.0, we are planning a migration path for models just as we have future-proofed Caffe models in the past.\r\n\r\nHappy brewing,\r\nThe Caffe Crew\r\n\r\n:coffee:", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/1.0", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/1.0", "html_url": "https://github.com/BVLC/caffe/releases/tag/1.0", "url": "https://api.github.com/repos/BVLC/caffe/releases/6081139", "release_id": 6081139, "date_created": "2017-04-15T16:17:48Z", "date_published": "2017-04-18T18:48:04Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/5516750", "tag": "rc5", "name": "release candidate 5", "author": {"name": "shelhamer", "type": "User"}, "description": "This packages up 42 commits by 15 contributors to help hone in on 1.0.\nThanks all!\n\nWith all releases one should do `make clean && make superclean` to clear out old materials before compiling the new release.\n- set soversion properly #5296 \n- documentation: improved dockerfiles and usage notes #5153, links and fixes #5227\n- build: groom cmake build #4609, find veclib more reliably on mac #5236\n- pycaffe: give Net a layer dictionary #4347\n- matcaffe: destroy individual nets and solvers #4737\n\n**Fixes**\n- restore solvers for resuming multi-GPU training #5215\n- draw net helper #5010\n\n\u2615\ufe0f \n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/rc5", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/rc5", "html_url": "https://github.com/BVLC/caffe/releases/tag/rc5", "url": "https://api.github.com/repos/BVLC/caffe/releases/5516750", "release_id": 5516750, "date_created": "2017-02-21T04:06:19Z", "date_published": "2017-02-21T04:15:16Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/5213211", "tag": "rc4", "name": "release candidate 4", "author": {"name": "shelhamer", "type": "User"}, "description": "It's a new year and a new release candidate. This packages up 348 commits by 68 authors. Thanks all!\n\nThis is intended to be the last release candidate before 1.0. We hope to catch any lurking issues, improve documentation, and polish the packaging for then.\n\nWith all releases one should do `make clean && make superclean` to clear out old materials before compiling the new release. [See all merged PRs since the last release](https://github.com/BVLC/caffe/pulls?page=1&q=is%3Apr+is%3Aclosed+merged%3A%3E%3D2016-01-28&utf8=%E2%9C%93).\n- RNNs + LSTMs #3948\n- layers\n  - Parameter layer for learning any bottom #2047\n  - Crop layer for aligning coordinate maps for FCNs #3570\n  - Tied weights with transpose for InnerProduct layer #3612\n  - Batch Norm docs, numerics, and robust proto def #4704 #5184\n  - Sigmoid Cross Entropy Loss on GPU #4908 and with ignore #4986\n- pycaffe\n  - solver callbacks #3020 \n  - net spec coordinate mapping and cropping for FCNs #3613\n  - N-D blob interface #3703\n  - python3 compatibility by six #3716\n  - dictionary-style net spec #3747\n  - Python layer can have phase #3995\n- Docker image #3518\n- expose all `NetState` options for all-in-one nets #3863\n- force backprop on or off by `propagate_down` #3942\n- cuDNN v5 #4159 \n- multi-GPU parallelism through NCCL + multi-GPU python interface #4563 \n\n**Fixes**\n- Net upgrade tools catch mixed versions, handle input fields, and log outputs #3755\n- Exp layer for base e and shift != 0 #3937\n- Crop layer checks only the crop dimensions it should #3993\n\n**Dependencies**\n- cuDNN compatibility is now at v5 + v4 and **cuDNN v3 and earlier are not supported**\n- [NCCL](https://github.com/NVIDIA/nccl) is now required for multi-GPU operation\n\nAs a reminder the OpenCL and Windows branches continue to make progress with the community leadership of Fabian Tschopp and Guillaume Dumont resp.\n\n:coffee:\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/rc4", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/rc4", "html_url": "https://github.com/BVLC/caffe/releases/tag/rc4", "url": "https://api.github.com/repos/BVLC/caffe/releases/5213211", "release_id": 5213211, "date_created": "2017-01-20T00:10:51Z", "date_published": "2017-01-20T00:53:44Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/2521821", "tag": "rc3", "name": "release candidate 3", "author": {"name": "shelhamer", "type": "User"}, "description": "A lot has happened since the last release! This packages up ~800 commits by 119 authors. Thanks all!\n\nWith all releases one should do `make clean && make superclean` to clear out old materials before compiling the new release.\n- layers\n  - batch normalization #3229 #3299\n  - scale + bias layers #3591\n  - PReLU #1940 #2414, ELU #3388, and log #2090 non-linearities\n  - tile layer #2083, reduction layer #2089\n  - embed layer #2032\n  - spatial pyramid pooling #2117\n  - batch reindex layer #2966\n  - filter layer #2054\n- solvers: Adam #2918, RMSProp #2867, AdaDelta #2782\n  - accumulate gradients to decouple computational and learning batch size #1977\n  - de-duplicate solver code #2518\n  - make solver type a string and split classes #3166 -- **you should update your solver definitions**\n- MSRA #1946 and bilinear interpolation #2213 weight fillers\n- N-D blobs #1970 and convolution #2049 for higher dimensional data and filters\n- tools:\n  - test caffe command line tool execution #1926\n  - network summarization tool #3090\n  - snapshot on signal / before quit #2253\n  - report ignored layers when loading weights #3305\n  - caffe command fine-tunes from multiple caffemodels #1456\n- pycaffe:\n  - python net spec #2086 #2813 #2959\n  - handle python exceptions #2462\n  - python layer arguments #2871\n  - python layer weights #2944\n  - snapshot in pycaffe #3082\n  - top + bottom names in pycaffe #2865\n  - python3 compatibility improvements\n- matcaffe: totally new interface with examples and tests #2505\n- cuDNN: switch to v2 #2038, switch to v3 #3160, make v4 compatible #3439\n- separate IO dependencies for configurable build #2523\n- large model and solverstate serialization through hdf5 #2836\n- train by multi-GPU data parallelism #2903 #2921 #2924 #2931 #2998\n- dismantle layer headers so every layer has its own include #3315\n- workflow: adopt build versioning #3311 #3593, contributing guide #2837, and badges for build status and license #3133\n- SoftmaxWithLoss normalization options #3296\n- dilated convolution #3487\n- expose Solver Restore() to C++ and Python #2037\n- set mode once and only once in testing #2511\n- turn off backprop by skip_propagate_down #2095\n- flatten layer learns axis #2082\n- trivial slice and concat #3014\n- hdf5 data layer: loads integer data #2978, can shuffle #2118\n- cross platform adjustments #3300 #3320 #3321 #3362 #3361 #3378\n- speed-ups for GPU solvers #3519 and CPU im2col #3536\n- make and cmake build improvements\n- and more!\n\n**Fixes**\n- #2866 fix weight sharing to (1) reduce memory usage and computation (2) correct momentum and other solver computations\n- #2972 fix concat (broken in #1970)\n- #2964 #3162 fix MVN layer\n- #2321 fix contrastive loss layer to match Hadsell et al. 2006\n- fix deconv backward #3095 and conv reshape #3096 (broken in #2049)\n- #3393 fix in-place reshape and flatten\n- #3152 fix silence layer to not zero bottom on backward\n- #3574 disable cuDNN max pooling (incompatible with in-place)\n- make backward compatible with negative LR #3007\n- #3332 fix pycaffe `forward_backward_all()`\n- #1922 fix cross-channel LRN for large channel band\n- #1457 fix shape of C++ feature extraction demo output\n\n**Dependencies**:\n- hdf5 is **required**\n- cuDNN compatibility is now at v3 + v4 and **cuDNN v1 and v2 are not supported**\n- IO dependencies (lmdb, leveldb, opencv) are now **optional** #2523\n\n:coffee:\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/rc3", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/rc3", "html_url": "https://github.com/BVLC/caffe/releases/tag/rc3", "url": "https://api.github.com/repos/BVLC/caffe/releases/2521821", "release_id": 2521821, "date_created": "2016-01-30T03:02:45Z", "date_published": "2016-01-30T08:45:32Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/970180", "tag": "rc2", "name": "release candidater", "author": {"name": "shelhamer", "type": "User"}, "description": "This is the release candidate for Caffe 1.0 once more with feeling. See #1849 for details.\r\n\r\nWith documentation, fixes, and feedback this could soon be 1.0!\r\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/rc2", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/rc2", "html_url": "https://github.com/BVLC/caffe/releases/tag/rc2", "url": "https://api.github.com/repos/BVLC/caffe/releases/970180", "release_id": 970180, "date_created": "2015-02-20T20:20:23Z", "date_published": "2015-02-20T20:25:09Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/568556", "tag": "rc", "name": "release candidate", "author": {"name": "shelhamer", "type": "User"}, "description": "This is the release candidate for Caffe 1.0. See #1112 for details.\n- documentation\n- standard model format and model zoo for sharing models\n- cuDNN acceleration\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/rc", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/rc", "html_url": "https://github.com/BVLC/caffe/releases/tag/rc", "url": "https://api.github.com/repos/BVLC/caffe/releases/568556", "release_id": 568556, "date_created": "2014-09-19T05:22:02Z", "date_published": "2014-09-19T05:24:49Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/480211", "tag": "v0.9999", "name": "cold-brew", "author": {"name": "shelhamer", "type": "User"}, "description": "See #880 for details.\n\n**Dependencies**: `lmdb` and `gflags` are required. CPU-only Caffe without any GPU / CUDA dependencies is turned on by setting `CPU_ONLY := 1` in your `Makefile.config`.\n\n**Deprecations**: the new `caffe` tool includes commands for model training and testing, querying devices, and timing models. The corresponding `train_net.bin`, `finetune_net.bin`, `test_net.bin`, `device_query.bin`, and `net_speed_benchmark.bin` are deprecated.\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/v0.9999", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/v0.9999", "html_url": "https://github.com/BVLC/caffe/releases/tag/v0.9999", "url": "https://api.github.com/repos/BVLC/caffe/releases/480211", "release_id": 480211, "date_created": "2014-08-08T19:06:41Z", "date_published": "2014-08-08T19:13:43Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/335655", "tag": "acm-mm-oss", "name": "ACM-MM Open Source Software Competition Release", "author": {"name": "shelhamer", "type": "User"}, "description": "This is the reference release for [ACM-MM Open Source Software Competition](http://www.acmmm.org/2014/call_open_source.html) evaluation.\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/acm-mm-oss", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/acm-mm-oss", "html_url": "https://github.com/BVLC/caffe/releases/tag/acm-mm-oss", "url": "https://api.github.com/repos/BVLC/caffe/releases/335655", "release_id": 335655, "date_created": "2014-05-23T16:21:17Z", "date_published": "2014-05-24T16:54:16Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/331285", "tag": "v0.999", "name": "kona-snow", "author": {"name": "shelhamer", "type": "User"}, "description": "See #429 for details.\n\n**Please upgrade your models!** Caffe's proto definition was changed in #208 and #219 for extensibility. The `upgrade_net_proto_binary.bin` and `upgrade_net_proto_text.bin` tools are provided to convert current models. Caffe will attempt to automagically upgrade old models when loaded, but doesn't save the changes.\n\n**Update your Makefile.config!** Caffe has a new Makefile and Makefile.config that learned to auto-configure themselves a bit better. Look at the new `Makefile.config.example` and update your configuration accordingly.\n\n**Dependencies**: Caffe's matrix and vector computations can be done with ATLAS, OpenBLAS, or MKL. The hard dependency on MKL is no more!\n\n**Deprecation**: V0 model definitions. While Caffe will try to automagically upgrade old models when loaded, see `tools/upgrade_net_proto*` to make the permanent upgrade since this will be dropped.\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/v0.999", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/v0.999", "html_url": "https://github.com/BVLC/caffe/releases/tag/v0.999", "url": "https://api.github.com/repos/BVLC/caffe/releases/331285", "release_id": 331285, "date_created": "2014-05-20T21:20:15Z", "date_published": "2014-05-20T21:31:15Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/230110", "tag": "v0.99", "name": "polyculture", "author": {"name": "shelhamer", "type": "User"}, "description": "See #231 for details.\n\n**New Dependency**: hdf5 is now required. Caffe learned how to load blobs and (multiple!) labels from hdf5.\n- `sudo apt-get install libhdf5-serial-dev` for ubuntu.\n- `brew install homebrew/science/hdf5` for osx.\n\n**Deprecation**: padding layers. See 2848aa1f8da0272797ee51234293dfa87eda266a for an example of how to update your model schema and note that an automated tool is coming for this and other model schema updates #219.\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/v0.99", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/v0.99", "html_url": "https://github.com/BVLC/caffe/releases/tag/v0.99", "url": "https://api.github.com/repos/BVLC/caffe/releases/230110", "release_id": 230110, "date_created": "2014-03-20T05:31:59Z", "date_published": "2014-03-20T05:32:59Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/227540", "tag": "rcnn-release", "name": "R-CNN compatible release", "author": {"name": "rbgirshick", "type": "User"}, "description": "R-CNN was tested against this release of Caffe. Future releases of the Caffe master branch will hopefully work, too.\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/rcnn-release", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/rcnn-release", "html_url": "https://github.com/BVLC/caffe/releases/tag/rcnn-release", "url": "https://api.github.com/repos/BVLC/caffe/releases/227540", "release_id": 227540, "date_created": "2014-03-20T03:50:13Z", "date_published": "2014-03-20T04:39:42Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/230119", "tag": "v0.9", "name": "argentine", "author": {"name": "shelhamer", "type": "User"}, "description": "See #167 for details.\n\nWelcome to the garden of forking models! Caffe learned about DAGs.\n", "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/v0.9", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/v0.9", "html_url": "https://github.com/BVLC/caffe/releases/tag/v0.9", "url": "https://api.github.com/repos/BVLC/caffe/releases/230119", "release_id": 230119, "date_created": "2014-02-26T23:32:42Z", "date_published": "2014-03-19T07:27:10Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/230114", "tag": "bsd", "name": "fair-trade", "author": {"name": "shelhamer", "type": "User"}, "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/bsd", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/bsd", "html_url": "https://github.com/BVLC/caffe/releases/tag/bsd", "url": "https://api.github.com/repos/BVLC/caffe/releases/230114", "release_id": 230114, "date_created": "2014-01-21T02:24:41Z", "date_published": "2014-03-19T07:19:47Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/BVLC/caffe/releases/230112", "tag": "v0.1", "name": "shade-grown", "author": {"name": "shelhamer", "type": "User"}, "tarball_url": "https://api.github.com/repos/BVLC/caffe/tarball/v0.1", "zipball_url": "https://api.github.com/repos/BVLC/caffe/zipball/v0.1", "html_url": "https://github.com/BVLC/caffe/releases/tag/v0.1", "url": "https://api.github.com/repos/BVLC/caffe/releases/230112", "release_id": 230112, "date_created": "2013-10-10T05:55:53Z", "date_published": "2014-03-19T07:18:11Z"}, "confidence": 1, "technique": "GitHub_API"}], "installation": [{"result": {"value": "# Installation\n\nSee http://caffe.berkeleyvision.org/installation.html for the latest\ninstallation instructions.\n\nCheck the users group in case you need help:\nhttps://groups.google.com/forum/#!forum/caffe-users\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/INSTALL.md"}, {"result": {"value": "---\ntitle: \"Installation: OS X\"\n---\n\n# OS X Installation\n\nWe highly recommend using the [Homebrew](http://brew.sh/) package manager.\nIdeally you could start from a clean `/usr/local` to avoid conflicts.\nIn the following, we assume that you're using Anaconda Python and Homebrew.\n\n**CUDA**: Install via the NVIDIA package that includes both CUDA and the bundled driver. **CUDA 7 is strongly suggested.** Older CUDA require `libstdc++` while clang++ is the default compiler and `libc++` the default standard library on OS X 10.9+. This disagreement makes it necessary to change the compilation settings for each of the dependencies. This is prone to error.\n\n**Library Path**: We find that everything compiles successfully if `$LD_LIBRARY_PATH` is not set at all, and `$DYLD_FALLBACK_LIBRARY_PATH` is set to provide CUDA, Python, and other relevant libraries (e.g. `/usr/local/cuda/lib:$HOME/anaconda/lib:/usr/local/lib:/usr/lib`).\nIn other `ENV` settings, things may not work as expected.\n\n**General dependencies**\n\n    brew install -vd snappy leveldb gflags glog szip lmdb\n    # need the homebrew science source for OpenCV and hdf5\n    brew tap homebrew/science\n    brew install hdf5 opencv\n\nIf using Anaconda Python, a modification to the OpenCV formula might be needed\nDo `brew edit opencv` and change the lines that look like the two lines below to exactly the two lines below.\n\n      -DPYTHON_LIBRARY=#{py_prefix}/lib/libpython2.7.dylib\n      -DPYTHON_INCLUDE_DIR=#{py_prefix}/include/python2.7\n\nIf using Anaconda Python, HDF5 is bundled and the `hdf5` formula can be skipped.\n\n**Remaining dependencies, with / without Python**\n\n    # with Python pycaffe needs dependencies built from source\n    brew install --build-from-source --with-python -vd protobuf\n    brew install --build-from-source -vd boost boost-python\n    # without Python the usual installation suffices\n    brew install protobuf boost\n\n**BLAS**: already installed as the [Accelerate / vecLib Framework](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man7/Accelerate.7.html). OpenBLAS and MKL are alternatives for faster CPU computation.\n\n**Python** (optional): Anaconda is the preferred Python.\nIf you decide against it, please use Homebrew.\nCheck that Caffe and dependencies are linking against the same, desired Python.\n\nContinue with [compilation](installation.html#compilation).\n\n## libstdc++ installation\n\nThis route is not for the faint of heart.\nFor OS X 10.10 and 10.9 you should install CUDA 7 and follow the instructions above.\nIf that is not an option, take a deep breath and carry on.\n\nIn OS X 10.9+, clang++ is the default C++ compiler and uses `libc++` as the standard library.\nHowever, NVIDIA CUDA (even version 6.0) currently links only with `libstdc++`.\nThis makes it necessary to change the compilation settings for each of the dependencies.\n\nWe do this by modifying the Homebrew formulae before installing any packages.\nMake sure that Homebrew doesn't install any software dependencies in the background; all packages must be linked to `libstdc++`.\n\nThe prerequisite Homebrew formulae are\n\n    boost snappy leveldb protobuf gflags glog szip lmdb homebrew/science/opencv\n\nFor each of these formulas, `brew edit FORMULA`, and add the ENV definitions as shown:\n\n      def install\n          # ADD THE FOLLOWING:\n          ENV.append \"CXXFLAGS\", \"-stdlib=libstdc++\"\n          ENV.append \"CFLAGS\", \"-stdlib=libstdc++\"\n          ENV.append \"LDFLAGS\", \"-stdlib=libstdc++ -lstdc++\"\n          # The following is necessary because libtool likes to strip LDFLAGS:\n          ENV[\"CXX\"] = \"/usr/bin/clang++ -stdlib=libstdc++\"\n          ...\n\nTo edit the formulae in turn, run\n\n    for x in snappy leveldb protobuf gflags glog szip boost boost-python lmdb homebrew/science/opencv; do brew edit $x; done\n\nAfter this, run\n\n    for x in snappy leveldb gflags glog szip lmdb homebrew/science/opencv; do brew uninstall $x; brew install --build-from-source -vd $x; done\n    brew uninstall protobuf; brew install --build-from-source --with-python -vd protobuf\n    brew install --build-from-source -vd boost boost-python\n\nIf this is not done exactly right then linking errors will trouble you.\n\n**Homebrew versioning** that Homebrew maintains itself as a separate git repository and making the above `brew edit FORMULA` changes will change files in your local copy of homebrew's master branch. By default, this will prevent you from updating Homebrew using `brew update`, as you will get an error message like the following:\n\n    $ brew update\n    error: Your local changes to the following files would be overwritten by merge:\n      Library/Formula/lmdb.rb\n    Please, commit your changes or stash them before you can merge.\n    Aborting\n    Error: Failure while executing: git pull -q origin refs/heads/master:refs/remotes/origin/master\n\nOne solution is to commit your changes to a separate Homebrew branch, run `brew update`, and rebase your changes onto the updated master. You'll have to do this both for the main Homebrew repository in `/usr/local/` and the Homebrew science repository that contains OpenCV in  `/usr/local/Library/Taps/homebrew/homebrew-science`, as follows:\n\n    cd /usr/local\n    git checkout -b caffe\n    git add .\n    git commit -m \"Update Caffe dependencies to use libstdc++\"\n    cd /usr/local/Library/Taps/homebrew/homebrew-science\n    git checkout -b caffe\n    git add .\n    git commit -m \"Update Caffe dependencies\"\n\nThen, whenever you want to update homebrew, switch back to the master branches, do the update, rebase the caffe branches onto master and fix any conflicts:\n\n    # Switch batch to homebrew master branches\n    cd /usr/local\n    git checkout master\n    cd /usr/local/Library/Taps/homebrew/homebrew-science\n    git checkout master\n\n    # Update homebrew; hopefully this works without errors!\n    brew update\n\n    # Switch back to the caffe branches with the formulae that you modified earlier\n    cd /usr/local\n    git rebase master caffe\n    # Fix any merge conflicts and commit to caffe branch\n    cd /usr/local/Library/Taps/homebrew/homebrew-science\n    git rebase master caffe\n    # Fix any merge conflicts and commit to caffe branch\n\n    # Done!\n\nAt this point, you should be running the latest Homebrew packages and your Caffe-related modifications will remain in place.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/docs/install_osx.md"}, {"result": {"value": "---\ntitle: \"Installation: RHEL / Fedora / CentOS\"\n---\n\n# RHEL / Fedora / CentOS Installation\n\n**General dependencies**\n\n    sudo yum install protobuf-devel leveldb-devel snappy-devel opencv-devel boost-devel hdf5-devel\n\n**Remaining dependencies, recent OS**\n\n    sudo yum install gflags-devel glog-devel lmdb-devel\n\n**Remaining dependencies, if not found**\n\n    # glog\n    wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/google-glog/glog-0.3.3.tar.gz\n    tar zxvf glog-0.3.3.tar.gz\n    cd glog-0.3.3\n    ./configure\n    make && make install\n    # gflags\n    wget https://github.com/schuhschuh/gflags/archive/master.zip\n    unzip master.zip\n    cd gflags-master\n    mkdir build && cd build\n    export CXXFLAGS=\"-fPIC\" && cmake .. && make VERBOSE=1\n    make && make install\n    # lmdb\n    git clone https://github.com/LMDB/lmdb\n    cd lmdb/libraries/liblmdb\n    make && make install\n\nNote that glog does not compile with the most recent gflags version (2.1), so before that is resolved you will need to build with glog first.\n\n**CUDA**: Install via the NVIDIA package instead of `yum` to be certain of the library and driver versions.\nInstall the library and latest driver separately; the driver bundled with the library is usually out-of-date.\n    + CentOS/RHEL/Fedora:\n\n**BLAS**: install ATLAS by `sudo yum install atlas-devel` or install OpenBLAS or MKL for better CPU performance. For the Makefile build, uncomment and set `BLAS_LIB` accordingly as ATLAS is usually installed under `/usr/lib[64]/atlas`).\n\n**Python** (optional): if you use the default Python you will need to `sudo yum install` the `python-devel` package to have the Python headers for building the pycaffe wrapper.\n\nContinue with [compilation](installation.html#compilation).\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/docs/install_yum.md"}, {"result": {"value": "---\ntitle: \"Installation: Ubuntu\"\n---\n\n# Ubuntu Installation\n\n### For Ubuntu (>= 17.04)\n\n**Installing pre-compiled Caffe**\n\nEverything including caffe itself is packaged in 17.04 and higher versions.\nTo install pre-compiled Caffe package, just do it by\n\n    sudo apt install caffe-cpu\n\nfor CPU-only version, or\n\n    sudo apt install caffe-cuda\n\nfor CUDA version. Note, the cuda version may break if your NVIDIA driver\nand CUDA toolkit are not installed by APT.\n\n[Package status of CPU-only version](https://launchpad.net/ubuntu/+source/caffe)\n\n[Package status of CUDA version](https://launchpad.net/ubuntu/+source/caffe-contrib)\n\n**Installing Caffe from source**\n\nWe may install the dependencies by merely one line\n\n    sudo apt build-dep caffe-cpu        # dependencies for CPU-only version\n    sudo apt build-dep caffe-cuda       # dependencies for CUDA version\n\nIt requires a `deb-src` line in your `sources.list`.\nContinue with [compilation](installation.html#compilation).\n\n### For Ubuntu (\\< 17.04)\n\n**General dependencies**\n\n    sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler\n    sudo apt-get install --no-install-recommends libboost-all-dev\n    sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n\n**CUDA**: Install by `apt-get` or the NVIDIA `.run` package.\nThe NVIDIA package tends to follow more recent library and driver versions, but the installation is more manual.\nIf installing from packages, install the library and latest driver separately; the driver bundled with the library is usually out-of-date.\nThis can be skipped for CPU-only installation.\n\n**BLAS**: install ATLAS by `sudo apt-get install libatlas-base-dev` or install OpenBLAS by `sudo apt-get install libopenblas-dev` or MKL for better CPU performance.\n\n**Python** (optional): if you use the default Python you will need to `sudo apt-get install` the `python-dev` package to have the Python headers for building the pycaffe interface.\n\n**Compatibility notes, 16.04**\n\nCUDA 8 is required on Ubuntu 16.04.\n\n**Remaining dependencies, 12.04**\n\nThese dependencies need manual installation in 12.04.\n\n    # glog\n    wget https://github.com/google/glog/archive/v0.3.3.tar.gz\n    tar zxvf v0.3.3.tar.gz\n    cd glog-0.3.3\n    ./configure\n    make && make install\n    # gflags\n    wget https://github.com/schuhschuh/gflags/archive/master.zip\n    unzip master.zip\n    cd gflags-master\n    mkdir build && cd build\n    export CXXFLAGS=\"-fPIC\" && cmake .. && make VERBOSE=1\n    make && make install\n    # lmdb\n    git clone https://github.com/LMDB/lmdb\n    cd lmdb/libraries/liblmdb\n    make && make install\n\nNote that glog does not compile with the most recent gflags version (2.1), so before that is resolved you will need to build with glog first.\n\nContinue with [compilation](installation.html#compilation).\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/docs/install_apt.md"}, {"result": {"value": "---\ntitle: Installation\n---\n\n# Installation\n\nPrior to installing, have a glance through this guide and take note of the details for your platform.\nWe install and run Caffe on Ubuntu 16.04\u201312.04, OS X 10.11\u201310.8, and through Docker and AWS.\nThe official Makefile and `Makefile.config` build are complemented by a [community CMake build](#cmake-build).\n\n**Step-by-step Instructions**:\n\n- [Docker setup](https://github.com/BVLC/caffe/tree/master/docker) *out-of-the-box brewing*\n- [Ubuntu installation](install_apt.html) *the standard platform*\n- [Debian installation](install_apt_debian.html) *install caffe with a single command*\n- [OS X installation](install_osx.html)\n- [RHEL / CentOS / Fedora installation](install_yum.html)\n- [Windows](https://github.com/BVLC/caffe/tree/windows) *see the Windows branch led by Guillaume Dumont*\n- [OpenCL](https://github.com/BVLC/caffe/tree/opencl) *see the OpenCL branch led by Fabian Tschopp*\n- [AWS AMI](https://aws.amazon.com/marketplace/pp/B01M0AXXQB) *official deep learning amazon machine image from AWS*\n\n**Overview**:\n\n- [Prerequisites](#prerequisites)\n- [Compilation](#compilation)\n- [Hardware](#hardware)\n\nWhen updating Caffe, it's best to `make clean` before re-compiling.\n\n## Prerequisites\n\nCaffe has several dependencies:\n\n* [CUDA](https://developer.nvidia.com/cuda-zone) is required for GPU mode.\n    * library version 7+ and the latest driver version are recommended, but 6.* is fine too\n    * 5.5, and 5.0 are compatible but considered legacy\n* [BLAS](http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms) via ATLAS, MKL, or OpenBLAS.\n* [Boost](http://www.boost.org/) >= 1.55\n* `protobuf`, `glog`, `gflags`, `hdf5`\n\nOptional dependencies:\n\n* [OpenCV](http://opencv.org/) >= 2.4 including 3.0\n* IO libraries: `lmdb`, `leveldb` (note: leveldb requires `snappy`)\n* cuDNN for GPU acceleration (v7)\n\nPycaffe and Matcaffe interfaces have their own natural needs.\n\n* For Python Caffe:  `Python 2.7` or `Python 3.3+`, `numpy (>= 1.7)`, boost-provided `boost.python`\n* For MATLAB Caffe: MATLAB with the `mex` compiler.\n\n**cuDNN Caffe**: for fastest operation Caffe is accelerated by drop-in integration of [NVIDIA cuDNN](https://developer.nvidia.com/cudnn). To speed up your Caffe models, install cuDNN then uncomment the `USE_CUDNN := 1` flag in `Makefile.config` when installing Caffe. Acceleration is automatic. The current version is cuDNN v7; older versions are supported in older Caffe.\n\n**CPU-only Caffe**: for cold-brewed CPU-only Caffe uncomment the `CPU_ONLY := 1` flag in `Makefile.config` to configure and build Caffe without CUDA. This is helpful for cloud or cluster deployment.\n\n### CUDA and BLAS\n\nCaffe requires the CUDA `nvcc` compiler to compile its GPU code and CUDA driver for GPU operation.\nTo install CUDA, go to the [NVIDIA CUDA website](https://developer.nvidia.com/cuda-downloads) and follow installation instructions there. Install the library and the latest standalone driver separately; the driver bundled with the library is usually out-of-date. **Warning!** The 331.* CUDA driver series has a critical performance issue: do not use it.\n\nFor best performance, Caffe can be accelerated by [NVIDIA cuDNN](https://developer.nvidia.com/cudnn). Register for free at the cuDNN site, install it, then continue with these installation instructions. To compile with cuDNN set the `USE_CUDNN := 1` flag set in your `Makefile.config`.\n\nCaffe requires BLAS as the backend of its matrix and vector computations.\nThere are several implementations of this library. The choice is yours:\n\n* [ATLAS](http://math-atlas.sourceforge.net/): free, open source, and so the default for Caffe.\n* [Intel MKL](http://software.intel.com/en-us/intel-mkl): commercial and optimized for Intel CPUs, with [free](https://registrationcenter.intel.com/en/forms/?productid=2558) licenses.\n    1. Install MKL.\n    2. Set up MKL environment (Details: [Linux](https://software.intel.com/en-us/node/528499), [OS X](https://software.intel.com/en-us/node/528659)). Example: *source /opt/intel/mkl/bin/mklvars.sh intel64*\n    3. Set `BLAS := mkl` in `Makefile.config`\n* [OpenBLAS](http://www.openblas.net/): free and open source; this optimized and parallel BLAS could require more effort to install, although it might offer a speedup.\n    1. Install OpenBLAS\n    2. Set `BLAS := open` in `Makefile.config`\n\n### Python and/or MATLAB Caffe (optional)\n\n#### Python\n\nThe main requirements are `numpy` and `boost.python` (provided by boost). `pandas` is useful too and needed for some examples.\n\nYou can install the dependencies with\n\n    pip install -r requirements.txt\n\nbut we suggest first installing the [Anaconda](https://store.continuum.io/cshop/anaconda/) Python distribution, which provides most of the necessary packages, as well as the `hdf5` library dependency.\n\nTo import the `caffe` Python module after completing the installation, add the module directory to your `$PYTHONPATH` by `export PYTHONPATH=/path/to/caffe/python:$PYTHONPATH` or the like. You should not import the module in the `caffe/python/caffe` directory!\n\n*Caffe's Python interface works with Python 2.7. Python 3.3+ should work out of the box without protobuf support. For protobuf support please install protobuf 3.0 alpha (https://developers.google.com/protocol-buffers/). Earlier Pythons are your own adventure.*\n\n#### MATLAB\n\nInstall MATLAB, and make sure that its `mex` is in your `$PATH`.\n\n*Caffe's MATLAB interface works with versions 2015a, 2014a/b, 2013a/b, and 2012b.*\n\n## Compilation\n\nCaffe can be compiled with either Make or CMake. Make is officially supported while CMake is supported by the community.\n\n### Compilation with Make\n\nConfigure the build by copying and modifying the example `Makefile.config` for your setup. The defaults should work, but uncomment the relevant lines if using Anaconda Python.\n\n    cp Makefile.config.example Makefile.config\n    # Adjust Makefile.config (for example, if using Anaconda Python, or if cuDNN is desired)\n    make all\n    make test\n    make runtest\n\n- For CPU & GPU accelerated Caffe, no changes are needed.\n- For cuDNN acceleration using NVIDIA's proprietary cuDNN software, uncomment the `USE_CUDNN := 1` switch in `Makefile.config`. cuDNN is sometimes but not always faster than Caffe's GPU acceleration.\n- For CPU-only Caffe, uncomment `CPU_ONLY := 1` in `Makefile.config`.\n\nTo compile the Python and MATLAB wrappers do `make pycaffe` and `make matcaffe` respectively.\nBe sure to set your MATLAB and Python paths in `Makefile.config` first!\n\n**Distribution**: run `make distribute` to create a `distribute` directory with all the Caffe headers, compiled libraries, binaries, etc. needed for distribution to other machines.\n\n**Speed**: for a faster build, compile in parallel by doing `make all -j8` where 8 is the number of parallel threads for compilation (a good choice for the number of threads is the number of cores in your machine).\n\nNow that you have installed Caffe, check out the [MNIST tutorial](gathered/examples/mnist.html) and the [reference ImageNet model tutorial](gathered/examples/imagenet.html).\n\n### CMake Build\n\nIn lieu of manually editing `Makefile.config` to configure the build, Caffe offers an unofficial CMake build thanks to @Nerei, @akosiorek, and other members of the community. It requires CMake version >= 2.8.7.\nThe basic steps are as follows:\n\n    mkdir build\n    cd build\n    cmake ..\n    make all\n    make install\n    make runtest\n\nSee [PR #1667](https://github.com/BVLC/caffe/pull/1667) for options and details.\n\n## Hardware\n\n**Laboratory Tested Hardware**: Berkeley Vision runs Caffe with Titan Xs, K80s, GTX 980s, K40s, K20s, Titans, and GTX 770s including models at ImageNet/ILSVRC scale. We have not encountered any trouble in-house with devices with CUDA capability >= 3.0. All reported hardware issues thus-far have been due to GPU configuration, overheating, and the like.\n\n**CUDA compute capability**: devices with compute capability <= 2.0 may have to reduce CUDA thread numbers and batch sizes due to hardware constraints. Brew with caution; we recommend compute capability >= 3.0.\n\nOnce installed, check your times against our [reference performance numbers](performance_hardware.html) to make sure everything is configured properly.\n\nAsk hardware questions on the [caffe-users group](https://groups.google.com/forum/#!forum/caffe-users).\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/docs/installation.md"}, {"result": {"value": "---\ntitle: \"Installation: Debian\"\n---\n\n# Debian Installation\n\nCaffe packages are available for several Debian versions, as shown in the\nfollowing chart:\n\n```\nYour Distro     |  CPU_ONLY  |  CUDA  | Codename\n----------------+------------+--------+-------------------\nDebian/oldstable|     \u2718      |   \u2718    | Jessie (8.0)\nDebian/stable   |     \u2714      |   \u2714    | Stretch (9.0)\nDebian/testing  |     \u2714      |   \u2714    | Buster\nDebian/unstable |     \u2714      |   \u2714    | Buster\n```\n\n* `\u2718 ` You should take a look at [Ubuntu installation instruction](install_apt.html).\n\n* `\u2714 ` You can install caffe with a single command line following this guide.\n\n* [Package status of CPU-only version](https://tracker.debian.org/pkg/caffe)\n\n* [Package status of CUDA version](https://tracker.debian.org/pkg/caffe-contrib)\n\nLast update: 2017-07-08\n\n## Binary installation with APT\n\nApart from the installation methods based on source, Debian users can install\npre-compiled Caffe packages from the official archive with APT.\n\nMake sure that your `/etc/apt/sources.list` contains `contrib` and `non-free`\nsections if you want to install the CUDA version, for instance:\n\n```\ndeb http://ftp2.cn.debian.org/debian sid main contrib non-free\n```\n\nThen we update APT cache and directly install Caffe. Note, the cpu version and\nthe cuda version cannot coexist.\n\n```\n$ sudo apt update\n$ sudo apt install [ caffe-cpu | caffe-cuda ]\n$ caffe                                              # command line interface working\n$ python3 -c 'import caffe; print(caffe.__path__)'   # python3 interface working\n```\n\nThese Caffe packages should work for you out of box. However, the CUDA version\nmay break if your NVIDIA driver and CUDA toolkit are not installed with APT.\n\n#### Customizing caffe packages\n\nSome users may need to customize the Caffe package. The way to customize\nthe package is beyond this guide. Here is only a brief guide of producing\nthe customized `.deb` packages. \n\nMake sure that there is a `dec-src` source in your `/etc/apt/sources.list`,\nfor instance:\n\n```\ndeb http://ftp2.cn.debian.org/debian sid main contrib non-free\ndeb-src http://ftp2.cn.debian.org/debian sid main contrib non-free\n```\n\nThen we build caffe deb files with the following commands:\n\n```\n$ sudo apt update\n$ sudo apt install build-essential debhelper devscripts  # standard package building tools\n$ sudo apt build-dep [ caffe-cpu | caffe-cuda ]          # the most elegant way to pull caffe build dependencies\n$ apt source [ caffe-cpu | caffe-cuda ]                  # download the source tarball and extract\n$ cd caffe-XXXX\n[ ... optional, customizing caffe code/build ... ]\n$ dch --local \"Modified XXX\"                             # bump package version and write changelog\n$ debuild -B -j4                                         # build caffe with 4 parallel jobs (similar to make -j4)\n[ ... building ...]\n$ debc                                                   # optional, if you want to check the package contents\n$ sudo debi                                              # optional, install the generated packages\n$ ls ../                                                 # optional, you will see the resulting packages\n```\n\nIt is a BUG if the package failed to build without any change.\nThe changelog will be installed at e.g. `/usr/share/doc/caffe-cpu/changelog.Debian.gz`.\n\n## Source installation\n\nSource installation under Debian/unstable and Debian/testing is similar to that of Ubuntu, but\nhere is a more elegant way to pull caffe build dependencies:\n\n```\n$ sudo apt build-dep [ caffe-cpu | caffe-cuda ]\n```\n\nNote, this requires a `deb-src` entry in your `/etc/apt/sources.list`.\n\n#### Compiler Combinations\n\nSome users may find their favorate compiler doesn't work with CUDA.\n\n```\nCXX compiler |  CUDA 7.5  |  CUDA 8.0  |  CUDA 9.0  |\n-------------+------------+------------+------------+\nGCC-8        |     ?      |     ?      |     ?      |\nGCC-7        |     ?      |     ?      |     ?      |\nGCC-6        |     \u2718      |     \u2718      |     \u2714      |\nGCC-5        |     \u2714 [1]  |     \u2714      |     \u2714      |\n-------------+------------+------------+------------+\nCLANG-4.0    |     ?      |     ?      |     ?      |\nCLANG-3.9    |     \u2718      |     \u2718      |     \u2714      |\nCLANG-3.8    |     ?      |     \u2714      |     \u2714      |\n```\n\n`[1]` CUDA 7.5 's `host_config.h` must be patched before working with GCC-5.\n\n`[2]` CUDA 9.0: https://devblogs.nvidia.com/parallelforall/cuda-9-features-revealed/\n\nBTW, please forget the GCC-4.X series, since its `libstdc++` ABI is not compatible with GCC-5's.\nYou may encounter failure linking GCC-4.X object files against GCC-5 libraries.\n(See https://wiki.debian.org/GCC5 )\n\n## Notes\n\n* Consider re-compiling OpenBLAS locally with optimization flags for sake of\nperformance. This is highly recommended for any kind of production use, including\nacademic research.\n\n* If you are installing `caffe-cuda`, APT will automatically pull some of the\nCUDA packages and the nvidia driver packages. Please be careful if you have\nmanually installed or hacked nvidia driver or CUDA toolkit or any other\nrelated stuff, because in this case APT may fail.\n\n* Additionally, a manpage (`man caffe`) and a bash complementation script\n(`caffe <TAB><TAB>`, `caffe train <TAB><TAB>`) are provided.\nBoth of the two files are still not merged into caffe master.\n\n* The python interface is Python 3 version: `python3-caffe-{cpu,cuda}`.\nNo plan to support python2.\n\n* If you encountered any problem related to the packaging system (e.g. failed to install `caffe-*`),\nplease report bug to Debian via Debian's bug tracking system. See https://www.debian.org/Bugs/ .\nPatches and suggestions are also welcome.\n\n## FAQ\n\n* where is caffe-cudnn?\n\nCUDNN library seems not redistributable currently. If you really want the\ncaffe-cudnn deb packages, the workaround is to install cudnn by yourself,\nand hack the packaging scripts, then build your customized package.\n\n* I installed the CPU version. How can I switch to the CUDA version?\n\n`sudo apt install caffe-cuda`, apt's dependency resolver is smart enough to deal with this.\n\n* Where are the examples, the models and other documentation stuff?\n\n```\n$ sudo apt install caffe-doc\n$ dpkg -L caffe-doc\n```\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/docs/install_apt_debian.md"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributors": [{"result": {"value": "# Contributors\n\nCaffe is developed by a core set of BAIR members and the open-source community.\n\nWe thank all of our [contributors](https://github.com/BVLC/caffe/graphs/contributors)!\n\n**For the detailed history of contributions** of a given file, try\n\n    git blame file\n\nto see line-by-line credits and\n\n    git log --follow file\n\nto see the change log even across renames and rewrites.\n\nPlease refer to the [acknowledgements](http://caffe.berkeleyvision.org/#acknowledgements) on the Caffe site for further details.\n\n**Copyright** is held by the original contributor according to the versioning history; see LICENSE.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/CONTRIBUTORS.md"}], "contributing_guidelines": [{"result": {"value": "# Contributing\n\nBelow you will find a collection of guidelines for submitting issues as well as contributing code to the Caffe repository.\nPlease read those before starting an issue or a pull request.\n\n## Issues\n\nSpecific Caffe design and development issues, bugs, and feature requests are maintained by GitHub Issues.\n\n*Please do not post installation, build, usage, or modeling questions, or other requests for help to Issues.*\nUse the [caffe-users list](https://groups.google.com/forum/#!forum/caffe-users) instead.\nThis helps developers maintain a clear, uncluttered, and efficient view of the state of Caffe.\nSee the chapter [caffe-users](#caffe-users) below for guidance on posting to the users list.\n\nWhen reporting an issue, it's most helpful to provide the following information, where applicable:\n* How does the problem look like and what steps reproduce it?\n* Can you reproduce it using the latest [master](https://github.com/BVLC/caffe/tree/master), compiled with the `DEBUG` make option?\n* What hardware and software are you running? In particular:\n\t* GPU make and model, if relevant,\n\t* operating system/distribution,\n\t* compiler; please also post which version (for example, with GCC run `gcc --version` to check),\n\t* CUDA version, if applicable (run `nvcc --version` to check),\n\t* cuDNN version, if applicable (version number is stored in `cudnn.h`, look for lines containing `CUDNN_MAJOR`, `CUDNN_MINOR` and `CUDNN_PATCHLEVEL`),\n\t* BLAS library,\n\t* Python version, if relevant,\n\t* MATLAB version, if relevant.\n* **What have you already tried** to solve the problem? How did it fail? Are there any other issues related to yours?\n* If this is not a build-related issue, does your installation pass `make runtest`?\n* If the bug is a crash, provide the backtrace (usually printed by Caffe; always obtainable with `gdb`).\n* If you are reporting a build error that seems to be due to a bug in Caffe, please attach your build configuration (either Makefile.config or CMakeCache.txt) and the output of the make (or cmake) command.\n\nIf only a small portion of the code/log is relevant to your issue, you may paste it directly into the post, preferably using Markdown syntax for code block: triple backtick ( \\`\\`\\` ) to open/close a block.\nIn other cases (multiple files, or long files), please **attach** them to the post - this greatly improves readability.\n\nIf the problem arises during a complex operation (e.g. large script using pycaffe, long network prototxt), please reduce the example to the minimal size that still causes the error.\nAlso, minimize influence of external modules, data etc. - this way it will be easier for others to understand and reproduce your issue, and eventually help you.\nSometimes you will find the root cause yourself in the process.\n\nTry to give your issue a title that is succinct and specific. The devs will rename issues as needed to keep track of them.\n\n## Caffe-users\n\nBefore you post to the [caffe-users list](https://groups.google.com/forum/#!forum/caffe-users), make sure you look for existing solutions.\nThe Caffe community has encountered and found solutions to countless problems - benefit from the collective experience.\nRecommended places to look:\n* the [users list](https://groups.google.com/forum/#!forum/caffe-users) itself,\n* [`caffe`](https://stackoverflow.com/questions/tagged/caffe) tag on StackOverflow,\n* [GitHub issues](https://github.com/BVLC/caffe/issues) tracker (some problems have been answered there),\n* the public [wiki](https://github.com/BVLC/caffe/wiki),\n* the official [documentation](http://caffe.berkeleyvision.org/).\n\nFound a post/issue with your exact problem, but with no answer?\nDon't just leave a \"me too\" message - provide the details of your case.\nProblems with more available information are easier to solve and attract good attention.\n\nWhen posting to the list, make sure you provide as much relevant information as possible - recommendations for an issue report (see above) are a good starting point.  \n*Please make it very clear which version of Caffe you are using, especially if it is a fork not maintained by BVLC.*\n\nFormatting recommendations hold: paste short logs/code fragments into the post (use fixed-width text for them), **attach** long logs or multiple files.\n\n## Pull Requests\n\nCaffe welcomes all contributions.\n\nSee the [contributing guide](http://caffe.berkeleyvision.org/development.html) for details.\n\nBriefly: read commit by commit, a PR should tell a clean, compelling story of _one_ improvement to Caffe. In particular:\n\n* A PR should do one clear thing that obviously improves Caffe, and nothing more. Making many smaller PRs is better than making one large PR; review effort is superlinear in the amount of code involved.\n* Similarly, each commit should be a small, atomic change representing one step in development. PRs should be made of many commits where appropriate.\n* Please do rewrite PR history to be clean rather than chronological. Within-PR bugfixes, style cleanups, reversions, etc. should be squashed and should not appear in merged PR history.\n* Anything nonobvious from the code should be explained in comments, commit messages, or the PR description, as appropriate.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/CONTRIBUTING.md"}], "documentation": [{"result": {"value": "https://github.com/BVLC/caffe/tree/master/docs", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"type": "Url", "value": "https://github.com/BVLC/caffe/wiki", "format": "wiki"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/tools/extra/launch_resize_and_crop_images.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/tools/extra/parse_log.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/create_mnist.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_lenet_docker.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_lenet_rmsprop.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_mnist_autoencoder_adadelta.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_mnist_autoencoder.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_lenet.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_mnist_autoencoder_adagrad.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_mnist_autoencoder_nesterov.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_lenet_adam.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/mnist/train_lenet_consolidated.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/siamese/create_mnist_siamese.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/siamese/train_mnist_siamese.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/imagenet/make_imagenet_mean.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/imagenet/train_caffenet.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/imagenet/create_imagenet.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/imagenet/resume_training.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/cifar10/train_full_sigmoid.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/cifar10/train_full.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/cifar10/create_cifar10.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/cifar10/train_quick.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/cifar10/train_full_sigmoid_bn.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/deploy_docs.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/upload_model_to_gist.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/build_docs.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/gather_examples.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/download_model_from_gist.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/configure-make.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/setup-venv.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/defaults.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/install-python-deps.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/build.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/configure-cmake.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/configure.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/test.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/scripts/travis/install-deps.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/data/mnist/get_mnist.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/data/ilsvrc12/get_ilsvrc_aux.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/data/cifar10/get_cifar10.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "has_build_file": [{"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/docker/gpu/Dockerfile", "type": "Url", "format": "dockerfile"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/docker/gpu/Dockerfile"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/docker/cpu/Dockerfile", "type": "Url", "format": "dockerfile"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/docker/cpu/Dockerfile"}], "executable_example": [{"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/00-classification.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/00-classification.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/detection.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/detection.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/01-learning-lenet.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/01-learning-lenet.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/02-fine-tuning.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/02-fine-tuning.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/net_surgery.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/net_surgery.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/pascal-multilabel-with-datalayer.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/pascal-multilabel-with-datalayer.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/brewing-logreg.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/brewing-logreg.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/siamese/mnist_siamese.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/examples/siamese/mnist_siamese.ipynb"}], "citation": [{"result": {"value": "Caffe is released under the [BSD 2-Clause license](https://github.com/BVLC/caffe/blob/master/LICENSE).\nThe BAIR/BVLC reference models are released for unrestricted use.\n\nPlease cite Caffe in your publications if it helps your research:\n\n    @article{jia2014caffe,\n      Author = {Jia, Yangqing and Shelhamer, Evan and Donahue, Jeff and Karayev, Sergey and Long, Jonathan and Girshick, Ross and Guadarrama, Sergio and Darrell, Trevor},\n      Journal = {arXiv preprint arXiv:1408.5093},\n      Title = {Caffe: Convolutional Architecture for Fast Feature Embedding},\n      Year = {2014}\n    }\n", "type": "Text_excerpt", "original_header": "License and Citation", "parent_header": ["Caffe"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Computer Vision"}, "confidence": 0.9023160428540453, "technique": "supervised_classification"}], "full_title": [{"result": {"type": "String", "value": "Caffe"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/abs/1408.5093"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/BVLC/caffe/master/README.md"}]}