{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:33:13"}, "code_repository": [{"result": {"value": "https://github.com/dominictarr/rc", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "dominictarr", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2012-08-05T12:39:00Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-21T06:54:11Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": null, "type": "License", "name": "Other", "url": null, "spdx_id": "NOASSERTION"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Multi-licensed under the two-clause BSD License, MIT License, or Apache License, version 2.0\n", "type": "Text_excerpt", "original_header": "License", "parent_header": ["rc"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}], "description": [{"result": {"value": "The non-configurable configuration loader for lazy people.", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "The non-configurable configuration loader for lazy people.\n \n", "original_header": "rc"}, "confidence": 0.8671392856729789, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "> Since ini, and env variables do not have a standard for types, your application needs be prepared for strings. \n", "original_header": "Formatted as `json`"}, "confidence": 0.8288865162592188, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "This may also be used to force a more strict format,\nsuch as strict, valid JSON only.\n \n", "original_header": "Pass in your own parser"}, "confidence": 0.8874237297358254, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}], "name": [{"result": {"value": "rc", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "dominictarr/rc", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/dominictarr/rc/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/dominictarr/rc/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 1005, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 114, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/dominictarr/rc/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "JavaScript", "name": "JavaScript", "type": "Programming_language", "size": 7388}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "usage": [{"result": {"value": "The only option is to pass rc the name of your app, and your default configuration.\n\n```javascript\nvar conf = require('rc')(appname, {\n  //defaults go here.\n  port: 2468,\n\n  //defaults which are objects will be merged, not replaced\n  views: {\n    engine: 'jade'\n  }\n});\n```\n\n`rc` will return your configuration options merged with the defaults you specify.\nIf you pass in a predefined defaults object, it will be mutated:\n\n```javascript\nvar conf = {};\nrequire('rc')(appname, conf);\n```\n\nIf `rc` finds any config files for your app, the returned config object will have\na `configs` array containing their paths:\n\n```javascript\nvar appCfg = require('rc')(appname, conf);\nappCfg.configs[0] // /etc/appnamerc\nappCfg.configs[1] // /home/dominictarr/.config/appname\nappCfg.config // same as appCfg.configs[appCfg.configs.length - 1]\n```\n", "type": "Text_excerpt", "original_header": "Usage", "parent_header": ["rc"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}, {"result": {"value": "Assume you have an application like this (notice the hard-coded defaults passed to rc):\n```\nconst conf = require('rc')('myapp', {\n    port: 12345,\n    mode: 'test'\n});\n\nconsole.log(JSON.stringify(conf, null, 2));\n```\nYou also have a file `config.json`, with these contents:\n```\n{\n  \"port\": 9000,\n  \"foo\": \"from config json\",\n  \"something\": \"else\"\n}\n```\nAnd a file `.myapprc` in the same folder, with these contents:\n```\n{\n  \"port\": \"3001\",\n  \"foo\": \"bar\"\n}\n```\nHere is the expected output from various commands:\n\n`node .`\n```\n{\n  \"port\": \"3001\",\n  \"mode\": \"test\",\n  \"foo\": \"bar\",\n  \"_\": [],\n  \"configs\": [\n    \"/Users/stephen/repos/conftest/.myapprc\"\n  ],\n  \"config\": \"/Users/stephen/repos/conftest/.myapprc\"\n}\n```\n*Default `mode` from hard-coded object is retained, but port is overridden by `.myapprc` file (automatically found based on appname match), and `foo` is added.*\n\n\n`node . --foo baz`\n```\n{\n  \"port\": \"3001\",\n  \"mode\": \"test\",\n  \"foo\": \"baz\",\n  \"_\": [],\n  \"configs\": [\n    \"/Users/stephen/repos/conftest/.myapprc\"\n  ],\n  \"config\": \"/Users/stephen/repos/conftest/.myapprc\"\n}\n```\n*Same result as above but `foo` is overridden because command-line arguments take precedence over `.myapprc` file.*\n\n`node . --foo barbar --config config.json`\n```\n{\n  \"port\": 9000,\n  \"mode\": \"test\",\n  \"foo\": \"barbar\",\n  \"something\": \"else\",\n  \"_\": [],\n  \"config\": \"config.json\",\n  \"configs\": [\n    \"/Users/stephen/repos/conftest/.myapprc\",\n    \"config.json\"\n  ]\n}\n```\n*Now the `port` comes from the `config.json` file specified (overriding the value from `.myapprc`), and `foo` value is overriden by command-line despite also being specified in the `config.json` file.*\n \n\n", "type": "Text_excerpt", "original_header": "Simple example demonstrating precedence", "parent_header": ["rc"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}, {"result": {"value": "You may pass in your own `argv` as the third argument to `rc`.  This is in case you want to [use your own command-line opts parser](https://github.com/dominictarr/rc/pull/12).\n\n```javascript\nrequire('rc')(appname, defaults, customArgvParser);\n```\n", "type": "Text_excerpt", "original_header": "Pass in your own `argv`", "parent_header": ["rc", "Advanced Usage"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "rc"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}], "documentation": [{"result": {"type": "Url", "value": "https://github.com/dominictarr/rc/wiki", "format": "wiki"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/dominictarr/rc/master/README.md"}]}