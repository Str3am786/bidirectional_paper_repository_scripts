{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:21:08"}, "code_repository": [{"result": {"value": "https://github.com/facebookresearch/faiss", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "facebookresearch", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2017-02-07T16:07:05Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-21T17:13:02Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "MIT License\n\nCopyright (c) Facebook, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/LICENSE"}], "description": [{"result": {"value": "A library for efficient similarity search and clustering of dense vectors.", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Faiss contains several methods for similarity search. It assumes that the instances are represented as vectors and are identified by an integer, and that the vectors can be compared with L2 (Euclidean) distances or dot products. Vectors that are similar to a query vector are those that have the lowest L2 distance or the highest dot product with the query vector. It also supports cosine similarity, since this is a dot product on normalized vectors.\n\nSome of the methods, like those based on binary vectors and compact quantization codes, solely use a compressed representation of the vectors and do not require to keep the original vectors. This generally comes at the cost of a less precise search but these methods can scale to billions of vectors in main memory on a single server. Other methods, like HNSW and NSG add an indexing structure on top of the raw vectors to make searching more efficient.\n\nThe GPU implementation can accept input from either CPU or GPU memory. On a server with GPUs, the GPU indexes can be used a drop-in replacement for the CPU indexes (e.g., replace `IndexFlatL2` with `GpuIndexFlatL2`) and copies to/from GPU memory are handled automatically. Results will be faster however if both input and output remain resident on the GPU. Both single and multi-GPU usage is supported.\n", "type": "Text_excerpt", "original_header": "Introduction", "parent_header": ["Faiss"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Faiss is a library for efficient similarity search and clustering of dense vectors. It contains algorithms that search in sets of vectors of any size, up to ones that possibly do not fit in RAM. It also contains supporting code for evaluation and parameter tuning. Faiss is written in C++ with complete wrappers for Python/numpy. Some of the most useful algorithms are implemented on the GPU. It is developed primarily at Meta's [Fundamental AI Research](https://ai.facebook.com/) group.\n \n", "original_header": "Faiss"}, "confidence": 0.9980117195745504, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "See [CHANGELOG.md](CHANGELOG.md) for detailed information about latest features.\n \n", "original_header": "News"}, "confidence": 0.8620882860426027, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Faiss is built around an index type that stores a set of vectors, and provides a function to search in them with L2 and/or dot product vector comparison. Some index types are simple baselines, such as exact search. Most of the available indexing structures correspond to various trade-offs with respect to \nThe optional GPU implementation provides what is likely (as of March 2017) the fastest exact and approximate (compressed-domain) nearest neighbor search implementation for high-dimensional vectors, fastest Lloyd's k-means, and fastest small k-selection algorithm known. [The implementation is detailed here](https://arxiv.org/abs/1702.08734).\n \n", "original_header": "How Faiss works"}, "confidence": 0.9495723634754601, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The main authors of Faiss are:\n- [Herv\u00e9 J\u00e9gou](https://github.com/jegou) initiated the Faiss project and wrote its first implementation\n- [Matthijs Douze](https://github.com/mdouze) implemented most of the CPU Faiss\n- [Jeff Johnson](https://github.com/wickedfoo) implemented all of the GPU Faiss\n- [Lucas Hosseini](https://github.com/beauby) implemented the binary indexes and the build system\n- [Chengqi Deng](https://github.com/KinglittleQ) implemented NSG, NNdescent and much of the additive quantization code.\n- [Alexandr Guzhva](https://github.com/alexanderguzhva) many optimizations: SIMD, memory allocation and layout, fast decoding kernels for vector codecs, etc.\n \n", "original_header": "Authors"}, "confidence": 0.9679656731235864, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "For public discussion of Faiss or for questions, there is a Facebook group at https://www.facebook.com/groups/faissusers/ \n", "original_header": "Join the Faiss community"}, "confidence": 0.9710455642456143, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Copyright \u00a9 Meta Platforms, Inc. See the [Terms of Use](https://opensource.fb.com/legal/terms/) and [Privacy Policy](https://opensource.fb.com/legal/privacy/) for this project.\n \n", "original_header": "Legal"}, "confidence": 0.9878643034632795, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}], "name": [{"result": {"value": "faiss", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "facebookresearch/faiss", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/facebookresearch/faiss/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/facebookresearch/faiss/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 25928, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 3242, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/facebookresearch/faiss/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "C++", "name": "C++", "type": "Programming_language", "size": 3068776}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 975518}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Cuda", "name": "Cuda", "type": "Programming_language", "size": 861979}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "C", "name": "C", "type": "Programming_language", "size": 99586}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "CMake", "name": "CMake", "type": "Programming_language", "size": 48122}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 31268}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Jupyter Notebook", "name": "Jupyter Notebook", "type": "Programming_language", "size": 10277}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Batchfile", "name": "Batchfile", "type": "Programming_language", "size": 1461}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/100203964", "tag": "v1.7.4", "name": "v1.7.4", "author": {"name": "mlomeli1", "type": "User"}, "description": "### Added\r\n- Added big batch IVF search for conducting efficient search with big batches of queries\r\n- Checkpointing in big batch search support\r\n- Precomputed centroids support\r\n- Support for iterable inverted lists for eg. key value stores\r\n- 64-bit indexing arithmetic support in FAISS GPU\r\n- IndexIVFShards now handle IVF indexes with a common quantizer\r\n- Jaccard distance support\r\n- CodePacker for non-contiguous code layouts\r\n- Approximate evaluation of top-k distances for ResidualQuantizer and IndexBinaryFlat\r\n- Added support for 12-bit PQ / IVFPQ fine quantizer decoders for standalone vector codecs (faiss/cppcontrib)\r\n- Conda packages for osx-arm64 (Apple M1) and linux-aarch64 (ARM64) architectures\r\n- Support for Python 3.10\r\n\r\n### Removed\r\n- CUDA 10 is no longer supported in precompiled packages\r\n- Removed Python 3.7 support for precompiled packages\r\n- Removed constraint for using fine quantizer with no greater than 8 bits for IVFPQ, for example, now it is possible to use IVF256,PQ10x12 for a CPU index\r\n\r\n### Changed\r\n- Various performance optimizations for PQ / IVFPQ for AVX2 and ARM for training (fused distance+nearest kernel), search (faster kernels for distance_to_code() and scan_list_*()) and vector encoding\r\n- A magnitude faster CPU code for LSQ/PLSQ training and vector encoding (reworked code)\r\n- Performance improvements for Hamming Code computations for AVX2 and ARM (reworked code)\r\n- Improved auto-vectorization support for IP and L2 distance computations (better handling of pragmas)\r\n- Improved ResidualQuantizer vector encoding (pooling memory allocations, avoid r/w to a temporary buffer)\r\n\r\n### Fixed\r\n- HSNW bug fixed which improves the recall rate! Special thanks to zh Wang @hhy3  for this.\r\n- Faiss GPU IVF large query batch fix\r\n- Faiss + Torch fixes, re-enable k = 2048\r\n- Fix the number of distance computations to match max_codes parameter\r\n- Fix decoding of large fast_scan blocks", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.7.4", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.7.4", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.7.4", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/100203964", "release_id": 100203964, "date_created": "2023-04-20T13:38:11Z", "date_published": "2023-04-20T13:45:29Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/84591405", "tag": "v1.7.3", "name": "v1.7.3", "author": {"name": "mlomeli1", "type": "User"}, "description": "**Added**\r\n- Sparse k-means routines and moved the generic kmeans to contrib\r\n- FlatDistanceComputer for all FlatCodes indexes\r\n- Support for fast accumulation of 4-bit LSQ and RQ\r\n- Product additive quantization support\r\n- Support per-query search parameters for many indexes + filtering by ids\r\n- write_VectorTransform and read_vectorTransform were added to the public API (by @AbdelrahmanElmeniawy)\r\n- Support for IDMap2 in index_factory by adding \"IDMap2\" to prefix or suffix of the input String (by @AbdelrahmanElmeniawy)\r\n- Support for merging all IndexFlatCodes descendants (by @AbdelrahmanElmeniawy)\r\n- Remove and merge features for IndexFastScan (by @AbdelrahmanElmeniawy)\r\n- Performance improvements: 1) specialized the AVX2 pieces of code speeding up certain hotspots, 2) specialized kernels for vector codecs (this can be found in faiss/cppcontrib)\r\n\r\n\r\n**Fixed**\r\n- Fixed memory leak in OnDiskInvertedLists::do_mmap when the file is not closed (by @AbdelrahmanElmeniawy)\r\n- LSH correctly throws error for metric types other than METRIC_L2 (by @AbdelrahmanElmeniawy)\r\n", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.7.3", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.7.3", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.7.3", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/84591405", "release_id": 84591405, "date_created": "2022-11-30T15:15:44Z", "date_published": "2022-11-30T15:24:12Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/56733646", "tag": "v1.7.2", "name": "Faiss 1.7.2", "author": {"name": "beauby", "type": "User"}, "description": "## ADDED\r\n- Support LSQ on GPU (by @KinglittleQ)\r\n- Support for exact 1D kmeans (by @KinglittleQ)\r\n- LUT-based search for additive quantizers\r\n- Autogenerated Python docstrings from Doxygen comments\r\n\r\n## CHANGED\r\n- Cleanup of index_factory parsing", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.7.2", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.7.2", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.7.2", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/56733646", "release_id": 56733646, "date_created": "2021-12-16T23:44:23Z", "date_published": "2022-01-10T12:19:49Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/43752639", "tag": "v1.7.1", "name": "Faiss 1.7.1", "author": {"name": "beauby", "type": "User"}, "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.7.1", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.7.1", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.7.1", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/43752639", "release_id": 43752639, "date_created": "2021-05-27T17:49:37Z", "date_published": "2021-05-28T09:08:34Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/38011820", "tag": "v1.7.0", "name": "Faiss 1.7.0", "author": {"name": "beauby", "type": "User"}, "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.7.0", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.7.0", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.7.0", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/38011820", "release_id": 38011820, "date_created": "2021-01-27T11:37:26Z", "date_published": "2021-02-13T14:11:25Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/35552831", "tag": "v1.6.5", "name": "Faiss 1.6.5", "author": {"name": "beauby", "type": "User"}, "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.6.5", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.6.5", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.6.5", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/35552831", "release_id": 35552831, "date_created": "2020-11-22T16:58:08Z", "date_published": "2020-12-21T05:24:03Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/32918559", "tag": "v1.6.4", "name": "Faiss 1.6.4", "author": {"name": "beauby", "type": "User"}, "description": "# Features\r\n+ Arbitrary dimensions per sub-quantizer now allowed for `GpuIndexIVFPQ`.\r\n+ Brute-force kNN on GPU (`bfKnn`) now accepts `int32` indices.\r\n+ Faiss CPU now supports Windows. Conda packages are available from the nightly channel.", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.6.4", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.6.4", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.6.4", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/32918559", "release_id": 32918559, "date_created": "2020-10-12T07:01:06Z", "date_published": "2020-10-22T13:28:27Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/29780009", "tag": "v1.6.3", "name": "Faiss 1.6.3", "author": {"name": "beauby", "type": "User"}, "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.6.3", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.6.3", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.6.3", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/29780009", "release_id": 29780009, "date_created": "2020-03-24T13:06:48Z", "date_published": "2020-08-17T16:56:51Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/18187251", "tag": "v1.5.3", "name": "Faiss 1.5.3", "author": {"name": "beauby", "type": "User"}, "description": "Bugfixes:\r\n- slow scanning of inverted lists (#836).\r\n\r\nFeatures:\r\n- add basic support for 6 new metrics in CPU `IndexFlat` and `IndexHNSW` (#848);\r\n- add support for `IndexIDMap`/`IndexIDMap2` with binary indexes (#780).\r\n\r\nMisc:\r\n- throw python exception for OOM (#758);\r\n- make `DistanceComputer` available for all random access indexes;\r\n- gradually moving from `long` to `int64_t` for portability.\r\n", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.5.3", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.5.3", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.5.3", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/18187251", "release_id": 18187251, "date_created": "2019-06-24T15:42:25Z", "date_published": "2019-06-24T16:45:05Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/17692330", "tag": "v1.5.2", "name": "Faiss 1.5.2", "author": {"name": "beauby", "type": "User"}, "description": "The license was changed from BSD+Patents to MIT.\r\n\r\n## Changelog:\r\n- propagates exceptions raised in sub-indexes of IndexShards and IndexReplicas;\r\n- support for searching several inverted lists in parallel (parallel_mode != 0);\r\n- better support for PQ codes where nbit != 8 or 16;\r\n- IVFSpectralHash implementation: spectral hash codes inside an IVF;\r\n- 6-bit per component scalar quantizer (4 and 8 bit were already supported);\r\n- combinations of inverted lists: HStackInvertedLists and VStackInvertedLists;\r\n- configurable number of threads for OnDiskInvertedLists prefetching (including 0=no prefetch);\r\n- more test and demo code compatible with Python 3 (print with parentheses);\r\n- refactored benchmark code: data loading is now in a single file.", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.5.2", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.5.2", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.5.2", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/17692330", "release_id": 17692330, "date_created": "2019-05-28T14:22:45Z", "date_published": "2019-05-30T21:35:34Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/17692292", "tag": "v1.5.1", "name": "Faiss 1.5.1", "author": {"name": "beauby", "type": "User"}, "description": "## Changelog:\r\n- a MatrixStats object, which reports useful statistics about a dataset;\r\n- an option to round coordinates during k-means optimization;\r\n- an alternative option for search in HNSW;\r\n- moved stats() and imbalance_factor() from IndexIVF to InvertedLists object;\r\n- range search is now available for IVFScalarQuantizer;\r\n- support for direct uint_8 codec in ScalarQuantizer;\r\n- renamed IndexProxy to IndexReplicas (now ;\r\n- better support for PQ code assignment with external index;\r\n- support for IMI2x16 (4B virtual centroids!);\r\n- support for k = 2048 search on GPU (instead of 1024);\r\n- most CUDA mem alloc failures now throw exceptions instead of terminating on an assertion;\r\n- support for renaming an ondisk invertedlists;\r\n- interrupt computations with interrupt signal (ctrl-C) in python;\r\n- simplified build system (with `--with-cuda`/`--with-cuda-arch` options);\r\n- updated example Dockerfile;\r\n- conda packages now depend on the `cudatoolkit` packages, which fixes some interferences with pytorch. Consequentially, faiss-gpu should now be installed by `conda install -c pytorch faiss-gpu cudatoolkit=10.0`.", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.5.1", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.5.1", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.5.1", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/17692292", "release_id": 17692292, "date_created": "2019-04-05T10:23:57Z", "date_published": "2019-05-30T21:33:52Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/17692276", "tag": "v1.5.0", "name": "Faiss 1.5.0", "author": {"name": "beauby", "type": "User"}, "description": "## Changelog:\r\n- GpuIndexBinaryFlat\r\n- IndexBinaryHNSW", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.5.0", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.5.0", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.5.0", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/17692276", "release_id": 17692276, "date_created": "2018-12-20T11:00:18Z", "date_published": "2019-05-30T21:32:47Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/12665518", "tag": "v1.4.0", "name": "v1.4.0", "author": {"name": "beauby", "type": "User"}, "description": "# Faiss 1.4.0\r\n\r\n## Features: \r\n+ automatic tracking of C++ references in Python \r\n+ non-intel platforms supported -- some functions optimized for ARM\r\n+ override nprobe for concurrent searches\r\n+ support for floating-point quantizers in binary indexes\r\n\r\n## Bug fixes: \r\n+ no more segfaults in python (I know it's the same as the first feature but it's important!)\r\n+ fix GpuIndexIVFFlat issues for float32 with 64 / 128 dims\r\n+ fix sharding of flat indexes on GPU with index_cpu_to_gpu_multiple\r\n\r\n------------------\r\n\r\nThe Python interface of Faiss closely mimics the C++ interface. This means that all C++ functions, objects, fields and methods are visible and accessible in Python. This is done thanks to SWIG, that automatically generates Python classes from the C++ headers. The downside is that this low-level access means that there is no automatic tracking of C++ references in Python. For example: \r\n\r\n```python\r\nindex = IndexIVFFlat(IndexFlatL2(10), 10, 100) \r\n```\r\n\r\nwould crash. Python does not know that the IndexFlatL2 is referenced by the IndexIVFFlat, so the garbage collector deallocates the IndexFlatL2 while IndexIVFFlat still references it. In Faiss 1.4.0, we added code to all such constructors that adds a Python-level reference to the object and prevents deallocation. With this upgrade, there should be no crashes in pure Python any more, you can report them right away as issues.\r\n\r\nFaiss was developed on 64-bit x86 platforms, Linux and Mac OS. There were quite a few locations in the code that shamelessly assumed that they were compiled with SSE support. Faiss 1.4.0 is portable to other hardware, it has pure C++ code for all operations, and SSE/AVX is only enabled if the appropriate macro are set. This was tested on an ARM platform and also a few operations were optimized for the ARM SIMD operations (in utils_simd.cpp). \r\n\r\nTo compile on a non-x86 platform, you will need to provide a BLAS library (OpenBLAS works for aarch64) and remove x86-specific flags from the makefile.inc (manually for now). Faiss is not portable to other compilers than g++/clang though.\r\n\r\nThe search-time parameters like nprobe for IndexIVF are set in the index object. What if you want to perform concurrent searches from several threads with different search parameters? This was not possible so far. Now there is an IVFSearchParameters object that can override the parameters set at the object level. See tests/test_params_override.cpp\r\n\r\nFaiss' support for binary indexes is recent, and not so many index types are supported. To work around this, we added IndexBinaryFromFloat, a binary index that wraps around any floating-point index. This makes it possible, for example, to use an IndexHNSW as a quantizer for an IndexBinaryIVF. See tests/test_index_binary_from_float.py\r\n\r\nWe also fixed a few bugs that correspond to github issues.", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.4.0", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.4.0", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.4.0", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/12665518", "release_id": 12665518, "date_created": "2018-08-30T19:15:45Z", "date_published": "2018-08-31T00:14:24Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/11900529", "tag": "v1.3.0", "name": "v1.3.0", "author": {"name": "beauby", "type": "User"}, "description": "## Features:\r\n+ Support for binary indexes (IndexBinaryFlat, IndexBinaryIVF)\r\n+ Support fp16 encoding in scalar quantizer\r\n+ Support for deduplication in IndexIVFFlat\r\n+ Support for index serialization\r\n\r\n## Bugs:\r\n+ Fix MMAP bug for normal indexes\r\n+ Fix propagation of io_flags in read func\r\n+ Fix k-selection for CUDA 9\r\n+ Fix race condition in OnDiskInvertedLists", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.3.0", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.3.0", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.3.0", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/11900529", "release_id": 11900529, "date_created": "2018-07-10T17:39:33Z", "date_published": "2018-07-12T17:05:56Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/facebookresearch/faiss/releases/9893554", "tag": "v1.2.1", "author": {"name": "mdouze", "type": "User"}, "description": "# Features\r\n\r\n- Support for on-disk storage of IndexIVF data. \r\n\r\n- C API \r\n\r\n- extended tutorial to GPU indexes", "tarball_url": "https://api.github.com/repos/facebookresearch/faiss/tarball/v1.2.1", "zipball_url": "https://api.github.com/repos/facebookresearch/faiss/zipball/v1.2.1", "html_url": "https://github.com/facebookresearch/faiss/releases/tag/v1.2.1", "url": "https://api.github.com/repos/facebookresearch/faiss/releases/9893554", "release_id": 9893554, "date_created": "2018-02-28T09:03:20Z", "date_published": "2018-03-01T13:43:24Z"}, "confidence": 1, "technique": "GitHub_API"}], "code_of_conduct": [{"result": {"value": "# Code of Conduct\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please [read the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/CODE_OF_CONDUCT.md"}], "installation": [{"result": {"value": "# Installing Faiss via conda\n\nThe recommended way to install Faiss is through [conda](https://docs.conda.io).\nStable releases are pushed regularly to the pytorch conda channel, as well as\npre-release nightly builds.\n\nThe CPU-only `faiss-cpu` conda package is currently available on Linux, OSX, and\nWindows. The `faiss-gpu`, containing both CPU and GPU indices, is available on\nLinux systems, for CUDA 11.4. Packages are built for Python versions 3.8-3.10.\n\nTo install the latest stable release:\n\n``` shell\n# CPU-only version\n$ conda install -c pytorch faiss-cpu=1.7.4 mkl=2021 blas=1.0=mkl\n\n# GPU(+CPU) version\n$ conda install -c pytorch -c nvidia faiss-gpu=1.7.4 mkl=2021 blas=1.0=mkl\n```\n\nFor faiss-gpu, the nvidia channel is required for cudatoolkit=11.4, which is not\npublished in the main anaconda channel.\n\nNOTE: due to a bug in the latest 1.7.4 release, Intel MKL 2021 needs to be installed\nseparately where applicable. Remove the MKL reference when installing on\nnon-Intel platforms.\n\nNightly pre-release packages can be installed as follows. There is no need to\ninstall MKL separately, the correct package is automatically installed as a\ndependency where necessary:\n\n``` shell\n# CPU-only version\n$ conda install -c pytorch/label/nightly faiss-cpu\n\n# GPU(+CPU) version\n$ conda install -c pytorch/label/nightly -c nvidia faiss-gpu=1.7.4\n```\n\nA combination of versions that installs GPU Faiss with CUDA 11.4 and Pytorch (as of 2023-06-19):\n```\nconda create --name faiss_1.7.4 python=3.10\nconda activate faiss_1.7.4\nconda install faiss-gpu=1.7.4 mkl=2021 pytorch pytorch-cuda numpy -c pytorch -c nvidia\n```\n\n## Installing from conda-forge\n\nFaiss is also being packaged by [conda-forge](https://conda-forge.org/), the\ncommunity-driven packaging ecosystem for conda. The packaging effort is\ncollaborating with the Faiss team to ensure high-quality package builds.\n\nDue to the comprehensive infrastructure of conda-forge, it may even happen that\ncertain build combinations are supported in conda-forge that are not available\nthrough the pytorch channel. To install, use\n\n``` shell\n# CPU version\n$ conda install -c conda-forge faiss-cpu\n\n# GPU version\n$ conda install -c conda-forge faiss-gpu\n```\n\nYou can tell which channel your conda packages come from by using `conda list`.\nIf you are having problems using a package built by conda-forge, please raise\nan [issue](https://github.com/conda-forge/faiss-split-feedstock/issues) on the\nconda-forge package \"feedstock\".\n\n# Building from source\n\nFaiss can be built from source using CMake.\n\nFaiss is supported on x86_64 machines on Linux, OSX, and Windows. It has been\nfound to run on other platforms as well, see\n[other platforms](https://github.com/facebookresearch/faiss/wiki/Related-projects#bindings-to-other-languages-and-porting-to-other-platforms).\n\nThe basic requirements are:\n- a C++17 compiler (with support for OpenMP support version 2 or higher),\n- a BLAS implementation (we strongly recommend using Intel MKL for best\nperformance).\n\nThe optional requirements are:\n- for GPU indices:\n  - nvcc,\n  - the CUDA toolkit,\n- for the python bindings:\n  - python 3,\n  - numpy,\n  - and swig.\n\nIndications for specific configurations are available in the [troubleshooting\nsection of the wiki](https://github.com/facebookresearch/faiss/wiki/Troubleshooting).\n\n## Step 1: invoking CMake\n\n``` shell\n$ cmake -B build .\n```\n\nThis generates the system-dependent configuration/build files in the `build/`\nsubdirectory.\n\nSeveral options can be passed to CMake, among which:\n- general options:\n  - `-DFAISS_ENABLE_GPU=OFF` in order to disable building GPU indices (possible\n  values are `ON` and `OFF`),\n  - `-DFAISS_ENABLE_PYTHON=OFF` in order to disable building python bindings\n  (possible values are `ON` and `OFF`),\n  - `-DFAISS_ENABLE_RAFT=ON` in order to enable building the RAFT implementations\n    of the IVF-Flat and IVF-PQ GPU-accelerated indices (default is `OFF`, possible\n    values are `ON` and `OFF`)\n  - `-DBUILD_TESTING=OFF` in order to disable building C++ tests,\n  - `-DBUILD_SHARED_LIBS=ON` in order to build a shared library (possible values\n  are `ON` and `OFF`),\n  - `-DFAISS_ENABLE_C_API=ON` in order to enable building [C API](c_api/INSTALL.md) (possible values\n    are `ON` and `OFF`),\n- optimization-related options:\n  - `-DCMAKE_BUILD_TYPE=Release` in order to enable generic compiler\n  optimization options (enables `-O3` on gcc for instance),\n  - `-DFAISS_OPT_LEVEL=avx2` in order to enable the required compiler flags to\n  generate code using optimized SIMD instructions (possible values are `generic`,\n  `avx2` and `avx512`, by increasing order of optimization),\n- BLAS-related options:\n  - `-DBLA_VENDOR=Intel10_64_dyn -DMKL_LIBRARIES=/path/to/mkl/libs` to use the\n  Intel MKL BLAS implementation, which is significantly faster than OpenBLAS\n  (more information about the values for the `BLA_VENDOR` option can be found in\n  the [CMake docs](https://cmake.org/cmake/help/latest/module/FindBLAS.html)),\n- GPU-related options:\n  - `-DCUDAToolkit_ROOT=/path/to/cuda-10.1` in order to hint to the path of\n  the CUDA toolkit (for more information, see\n  [CMake docs](https://cmake.org/cmake/help/latest/module/FindCUDAToolkit.html)),\n  - `-DCMAKE_CUDA_ARCHITECTURES=\"75;72\"` for specifying which GPU architectures\n  to build against (see [CUDA docs](https://developer.nvidia.com/cuda-gpus) to\n  determine which architecture(s) you should pick),\n- python-related options:\n  - `-DPython_EXECUTABLE=/path/to/python3.7` in order to build a python\n  interface for a different python than the default one (see\n  [CMake docs](https://cmake.org/cmake/help/latest/module/FindPython.html)).\n\n## Step 2: Invoking Make\n\n``` shell\n$ make -C build -j faiss\n```\n\nThis builds the C++ library (`libfaiss.a` by default, and `libfaiss.so` if\n`-DBUILD_SHARED_LIBS=ON` was passed to CMake).\n\nThe `-j` option enables parallel compilation of multiple units, leading to a\nfaster build, but increasing the chances of running out of memory, in which case\nit is recommended to set the `-j` option to a fixed value (such as `-j4`).\n\n## Step 3: Building the python bindings (optional)\n\n``` shell\n$ make -C build -j swigfaiss\n$ (cd build/faiss/python && python setup.py install)\n```\n\nThe first command builds the python bindings for Faiss, while the second one\ngenerates and installs the python package.\n\n## Step 4: Installing the C++ library and headers (optional)\n\n``` shell\n$ make -C build install\n```\n\nThis will make the compiled library (either `libfaiss.a` or `libfaiss.so` on\nLinux) available system-wide, as well as the C++ headers. This step is not\nneeded to install the python package only.\n\n\n## Step 5: Testing (optional)\n\n### Running the C++ test suite\n\nTo run the whole test suite, make sure that `cmake` was invoked with\n`-DBUILD_TESTING=ON`, and run:\n\n``` shell\n$ make -C build test\n```\n\n### Running the python test suite\n\n``` shell\n$ (cd build/faiss/python && python setup.py build)\n$ PYTHONPATH=\"$(ls -d ./build/faiss/python/build/lib*/)\" pytest tests/test_*.py\n```\n\n### Basic example\n\nA basic usage example is available in\n[`demos/demo_ivfpq_indexing.cpp`](https://github.com/facebookresearch/faiss/blob/main/demos/demo_ivfpq_indexing.cpp).\n\nIt creates a small index, stores it and performs some searches. A normal runtime\nis around 20s. With a fast machine and Intel MKL's BLAS it runs in 2.5s.\n\nIt can be built with\n``` shell\n$ make -C build demo_ivfpq_indexing\n```\nand subsequently ran with\n``` shell\n$ ./build/demos/demo_ivfpq_indexing\n```\n\n### Basic GPU example\n\n``` shell\n$ make -C build demo_ivfpq_indexing_gpu\n$ ./build/demos/demo_ivfpq_indexing_gpu\n```\n\nThis produce the GPU code equivalent to the CPU `demo_ivfpq_indexing`. It also\nshows how to translate indexes from/to a GPU.\n\n### A real-life benchmark\n\nA longer example runs and evaluates Faiss on the SIFT1M dataset. To run it,\nplease download the ANN_SIFT1M dataset from http://corpus-texmex.irisa.fr/\nand unzip it to the subdirectory `sift1M` at the root of the source\ndirectory for this repository.\n\nThen compile and run the following (after ensuring you have installed faiss):\n\n``` shell\n$ make -C build demo_sift1M\n$ ./build/demos/demo_sift1M\n```\n\nThis is a demonstration of the high-level auto-tuning API. You can try\nsetting a different index_key to find the indexing structure that\ngives the best performance.\n\n### Real-life test\n\nThe following script extends the demo_sift1M test to several types of\nindexes. This must be run from the root of the source directory for this\nrepository:\n\n``` shell\n$ mkdir tmp  # graphs of the output will be written here\n$ python demos/demo_auto_tune.py\n```\n\nIt will cycle through a few types of indexes and find optimal\noperating points. You can play around with the types of indexes.\n\n### Real-life test on GPU\n\nThe example above also runs on GPU. Edit `demos/demo_auto_tune.py` at line 100\nwith the values\n\n``` python\nkeys_to_test = keys_gpu\nuse_gpu = True\n```\n\nand you can run\n``` shell\n$ python demos/demo_auto_tune.py\n```\nto test the GPU code.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/INSTALL.md"}, {"result": {"value": "Faiss C API\n===========\n\nFaiss provides a pure C interface, which can subsequently be used either in pure C programs or to produce bindings for programming languages with Foreign Function Interface (FFI) support. Although this is not required for the Python interface, some other programming languages (e.g. Rust and Julia) do not have SWIG support.\n\nCompilation instructions\n------------------------\n\nThe full contents of the pure C API are in the [\"c_api\"](c_api/) folder.\nPlease be sure to follow the instructions on [building the main C++ library](../INSTALL.md#step-1-compiling-the-c-faiss) first.\nInclude `-DFAISS_ENABLE_C_API=ON` to the cmake command.\n\n`make -C build`\n\n\nThis builds the dynamic library \"faiss_c\", containing the full implementation of Faiss and the necessary wrappers for the C interface. It does not depend on libfaiss.a or the C++ standard library. \n\nTo build the example program, you should run `make -C build example_c` at the top level of\nthe faiss repo. The example program will be in `build/c_api/example_c` .\n\nUsing the API\n-------------\n\nThe C API is composed of:\n\n- A set of C header files comprising the main Faiss interfaces, converted for use in C. Each file follows the format `\u00abname\u00bb_c.h`, where `\u00abname\u00bb` is the respective name from the C++ API. For example, the file [Index_c.h](./Index_c.h) file corresponds to the base `Index` API. Functions are declared with the `faiss_` prefix (e.g. `faiss_IndexFlat_new`), whereas new types have the `Faiss` prefix (e.g. `FaissIndex`, `FaissMetricType`, ...).\n- A dynamic library, compiled from the sources in the same folder, encloses the implementation of the library and wrapper functions.\n\nThe index factory is available via the `faiss_index_factory` function in `AutoTune_c.h`:\n\n```c\nFaissIndex* index = NULL;\nint c = faiss_index_factory(&index, 64, \"Flat\", METRIC_L2);\nif (c) {\n    // operation failed\n}\n```\n\nMost operations that you would find as member functions are available with the format `faiss_\u00abclassname\u00bb_\u00abmember\u00bb`.\n\n```c\nidx_t ntotal = faiss_Index_ntotal(index);\n```\n\nSince this is C, the index needs to be freed manually in the end:\n\n```c\nfaiss_Index_free(index);\n```\n\nError handling is done by examining the error code returned by operations with recoverable errors.\nThe code identifies the type of exception that rose from the implementation. Fetching the \ncorresponding error message can be done by calling the function `faiss_get_last_error()` from\n`error_c.h`. Getter functions and `free` functions do not return an error code.\n\n```c\nint c = faiss_Index_add(index, nb, xb);\nif (c) {\n    printf(\"%s\", faiss_get_last_error());\n    exit(-1);\n}\n```\n\nAn example is included, which is built automatically for the target `all`. It can also be built separately:\n\n  `make bin/example_c`\n\nBuilding with GPU support\n-------------------------\n\nFor GPU support, a separate dynamic library in the \"c_api/gpu\" directory needs to be built.\n\n  `make`\n\nThe \"gpufaiss_c\" dynamic library contains the GPU and CPU implementations of Faiss, which means that\nit can be used in place of \"faiss_c\". The same library will dynamically link with the CUDA runtime\nand cuBLAS.\n\nUsing the GPU with the C API\n----------------------------\n\nA standard GPU resources object can be obtained by the name `FaissStandardGpuResources`:\n\n```c\nFaissStandardGpuResources* gpu_res = NULL;\nint c = faiss_StandardGpuResources_new(&gpu_res);\nif (c) {\n    printf(\"%s\", faiss_get_last_error());\n    exit(-1);\n}\n```\n\nSimilarly to the C++ API, a CPU index can be converted to a GPU index:\n\n```c\nFaissIndex* cpu_index = NULL;\nint c = faiss_index_factory(&cpu_index, d, \"Flat\", METRIC_L2);\nif (c) { /* ... */ }\nFaissGpuIndex* gpu_index = NULL;\nc = faiss_index_cpu_to_gpu(gpu_res, 0, cpu_index, &gpu_index);\nif (c) { /* ... */ }\n```\n\nA more complete example is available by the name `bin/example_gpu_c`.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/c_api/INSTALL.md"}, {"result": {"value": "Faiss comes with precompiled libraries for Anaconda in Python, see [faiss-cpu](https://anaconda.org/pytorch/faiss-cpu) and [faiss-gpu](https://anaconda.org/pytorch/faiss-gpu). The library is mostly implemented in C++, the only dependency is a [BLAS](https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms) implementation. Optional GPU support is provided via CUDA, and the Python interface is also optional. It compiles with cmake. See [INSTALL.md](INSTALL.md) for details.\n", "type": "Text_excerpt", "original_header": "Installing", "parent_header": ["Faiss"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributing_guidelines": [{"result": {"value": "# Contributing to Faiss\n\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Our Development Process\n\nWe mainly develop Faiss within Facebook. Sometimes, we will sync the\ngithub version of Faiss with the internal state.\n\n## Pull Requests\n\nWe welcome pull requests that add significant value to Faiss. If you plan to do\na major development and contribute it back to Faiss, please contact us first before\nputting too much effort into it.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\nThere is a Facebook internal test suite for Faiss, and we need to run\nall changes to Faiss through it.\n\n## Contributor License Agreement (\"CLA\")\n\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\n\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style\n\n* 4 or 2 spaces for indentation in C++ (no tabs)\n* 80 character line length (both for C++ and Python)\n* C++ language level: C++17\n\n## License\n\nBy contributing to Faiss, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/CONTRIBUTING.md"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss-gpu/test_cpu_dispatch.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss-gpu/build-pkg.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss-gpu/build-lib.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss-gpu-raft/test_cpu_dispatch.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss-gpu-raft/build-pkg.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss-gpu-raft/build-lib.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss/build-pkg-osx.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss/build-lib-osx.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss/test_cpu_dispatch.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss/build-pkg.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss/build-pkg-arm64.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss/build-lib-arm64.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/conda/faiss/build-lib.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "executable_example": [{"result": {"value": "https://raw.githubusercontent.com/facebookresearch/faiss/main/benchs/bench_fw_notebook.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/benchs/bench_fw_notebook.ipynb"}], "documentation": [{"result": {"value": "The following are entry points for documentation:\n\n- the full documentation can be found on the [wiki page](http://github.com/facebookresearch/faiss/wiki), including a [tutorial](https://github.com/facebookresearch/faiss/wiki/Getting-started), a [FAQ](https://github.com/facebookresearch/faiss/wiki/FAQ) and a [troubleshooting section](https://github.com/facebookresearch/faiss/wiki/Troubleshooting)\n- the [doxygen documentation](https://faiss.ai/) gives per-class information extracted from code comments\n- to reproduce results from our research papers, [Polysemous codes](https://arxiv.org/abs/1609.01882) and [Billion-scale similarity search with GPUs](https://arxiv.org/abs/1702.08734), refer to the [benchmarks README](benchs/README.md). For [\nLink and code: Fast indexing with graphs and compact regression codes](https://arxiv.org/abs/1804.09996), see the [link_and_code README](benchs/link_and_code)\n", "type": "Text_excerpt", "original_header": "Full documentation of Faiss", "parent_header": ["Faiss"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Url", "value": "http://github.com/facebookresearch/faiss/wiki", "format": "wiki"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Url", "value": "https://github.com/facebookresearch/faiss/wiki", "format": "wiki"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}], "citation": [{"result": {"value": "Reference to cite when you use Faiss in a research paper:\n\n```\n@article{johnson2019billion,\n  title={Billion-scale similarity search with {GPUs}},\n  author={Johnson, Jeff and Douze, Matthijs and J{\\'e}gou, Herv{\\'e}},\n  journal={IEEE Transactions on Big Data},\n  volume={7},\n  number={3},\n  pages={535--547},\n  year={2019},\n  publisher={IEEE}\n}\n```\n", "type": "Text_excerpt", "original_header": "Reference", "parent_header": ["Faiss"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"value": "@article{johnson2019billion,\n  title={Billion-scale similarity search with {GPUs}},\n  author={Johnson, Jeff and Douze, Matthijs and J{\\'e}gou, Herv{\\'e}},\n  journal={IEEE Transactions on Big Data},\n  volume={7},\n  number={3},\n  pages={535--547},\n  year={2019},\n  publisher={IEEE}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}], "full_title": [{"result": {"type": "String", "value": "Faiss"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/abs/1702.08734"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1804.09996"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1609.01882"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/facebookresearch/faiss/main/README.md"}]}