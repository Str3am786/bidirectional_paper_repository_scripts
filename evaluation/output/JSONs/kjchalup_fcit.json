{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 18:48:15"}, "code_repository": [{"result": {"value": "https://github.com/kjchalup/fcit", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "kjchalup", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2017-07-09T18:06:40Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-11-11T21:58:37Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}], "description": [{"result": {"value": "A decision-tree based conditional independence test.", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Let *x, y, z* be random variables. Then deciding whether *P(y | x, z) = P(y | z)* \ncan be difficult, especially if the variables are continuous. This package \nimplements a simple yet efficient and effective conditional independence test,\ndescribed in [link to arXiv when we write it up!]. Important features that differentiate\nthis test from competition:\n\n* It is fast. Worst-case speed scales as O(n_data * log(n_data) * dim), where dim is max(x_dim + z_dim, y_dim). However, amortized speed is O(n_data * log(n_data) * log(dim)).\n\n* It applies to cases where some of x, y, z are continuous and some are discrete, or categorical (one-hot-encoded).\n\n* It is very simple to understand and modify.\n\n* It can be used for unconditional independence testing with almost no changes to the procedure.\n\nWe have applied this test to tens of thousands of samples of thousand-dimensional datapoints in seconds. For smaller dimensionalities and sample sizes, it takes a fraction of a second. The algorithm is described in [arXiv link coming], where we also provide detailed experimental results and comparison with other methods. However for now, you should be able to just look through the code to understand what's going on -- it's only 90 lines of Python, including detailed comments!\n", "type": "Text_excerpt", "original_header": "Introduction"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/kjchalup/fcit/master/README.rst"}], "name": [{"result": {"value": "fcit", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "kjchalup/fcit", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/kjchalup/fcit/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/kjchalup/fcit/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 32, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 8, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/kjchalup/fcit/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 10084}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/kjchalup/fcit/master/README.rst", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "usage": [{"result": {"value": "Basic usage is simple, and the default settings should work in most cases. To perform an *unconditional test*, use dtit.test(x, y):\n\n.. code:: python\n\n  import numpy as np\n  from fcit import fcit\n  \n  x = np.random.rand(1000, 1)\n  y = np.random.randn(1000, 1)\n  \n  pval_i = fcit.test(x, y) # p-value should be uniform on [0, 1].\n  pval_d = fcit.test(x, x + y) # p-value should be very small.\n  \nTo perform a conditional test, just add the third variable z to the inputs:\n \n.. code:: python\n\n  import numpy as np\n  from fcit import fcit\n  \n  # Generate some data such that x is indpendent of y given z.\n  n_samples = 1000\n  z = np.random.dirichlet(alpha=np.ones(2), size=n_samples)\n  x = np.vstack([np.random.multinomial(20, p) for p in z]).astype(float)\n  y = np.vstack([np.random.multinomial(20, p) for p in z]).astype(float)\n  \n  # Check that x and y are dependent (p-value should be uniform on [0, 1]).\n  pval_d = fcit.test(x, y)\n  # Check that z d-separates x and y (the p-value should be small).\n  pval_i = fcit.test(x, y, z)\n", "type": "Text_excerpt", "original_header": "Usage"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/kjchalup/fcit/master/README.rst"}], "installation": [{"result": {"value": "pip install fcit\n\n", "type": "Text_excerpt", "original_header": "Installation"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/kjchalup/fcit/master/README.rst"}], "requirements": [{"result": {"value": "Tested with Python 3.6 and\n\n    * joblib >= 0.11\n    * numpy >= 1.12\n    * scikit-learn >= 0.18.1\n    * scipy >= 0.16.1\n\n.. _pip: http://www.pip-installer.org/en/latest/\n", "type": "Text_excerpt", "original_header": "Requirements"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/kjchalup/fcit/master/README.rst"}], "full_title": [{"result": {"type": "String", "value": ""}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/kjchalup/fcit/master/README.rst"}]}