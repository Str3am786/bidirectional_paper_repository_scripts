{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:16:22"}, "code_repository": [{"result": {"value": "https://github.com/ahmedfgad/8QueensGenetic", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "ahmedfgad", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2019-05-24T14:19:40Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-05-18T11:44:05Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "description": [{"result": {"value": "Optimizing the 8 Queens Puzzle using the Genetic Algorithm (PyGAD).", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "A Python project for optimizing the 8 Queens Puzzle using the Genetic Algorithm implemented in PyGAD. \nThe project uses the [Kivy cross-platform Python framework](https://github.com/kivy/kivy) for building the GUI of the 8 queens puzzle. The GUI helps to visualize the solutions reached while the genetic algorithm (GA) is optimizing the problem to find the best solution. \n", "original_header": "8QueensGenetic"}, "confidence": 0.9713439305070166, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "There are different resources that can be used to get started with the building CNN and its Python implementation. \n \n", "original_header": "For More Information"}, "confidence": 0.9731124286376982, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "You can also check my book cited as [**Ahmed Fawzy Gad 'Practical Computer Vision Applications Using Deep Learning with CNNs'. Dec. 2018, Apress, 978-1-4842-4167-7**](https://www.amazon.com/Practical-Computer-Vision-Applications-Learning/dp/1484241665) which discusses neural networks, convolutional neural networks, deep learning, genetic algorithm, and more. \n", "original_header": "Book: Practical Computer Vision Applications Using Deep Learning with CNNs"}, "confidence": 0.9156269457663441, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}], "name": [{"result": {"value": "8QueensGenetic", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "ahmedfgad/8QueensGenetic", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/ahmedfgad/8QueensGenetic/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/ahmedfgad/8QueensGenetic/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 17, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "8-queens-problem, cross-platform, genetic-algorithm, kivy, numpy, optimization, python", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 10, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/ahmedfgad/8QueensGenetic/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 30177}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "installation": [{"result": {"value": "To install [PyGAD](https://pypi.org/project/pygad), simply use pip to download and install the library from [PyPI](https://pypi.org/project/pygad) (Python Package Index). The library lives a PyPI at this page https://pypi.org/project/pygad.\n\nFor Windows, issue the following command:\n\n```python\npip install pygad\n```\n\nFor Linux and Mac, replace `pip` by use `pip3` because the library only supports Python 3.\n\n```python\npip3 install pygad\n```\n\nPyGAD is developed in Python 3.7.3 and depends on NumPy for creating and manipulating arrays and Matplotlib for creating figures. The exact NumPy version used in developing PyGAD is 1.16.4. For Matplotlib, the version is 3.1.0.\n", "type": "Text_excerpt", "original_header": "PyGAD Installation"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "The project comes with a GUI built in Kivy, a cross-platform Python framework for building natural user interfaces. Before using the project, install Kivy:\n\n```python\npip install kivy\n```\n\nBecause the project is built using Python 3, use `pip3` instead of `pip` for Mac/Linux:\n\n```python\npip3 install kivy\n```\n\nCheck this [Stackoverflow answer](https://stackoverflow.com/a/44220712) to install other libraries that are essential to run Kivy: https://stackoverflow.com/a/44220712\n\nThe main file for this project is called `main.py` which holds the code for building the GUI and instantiating PyGAD for running the genetic algorithm. \n\nAfter running the `main.py` file successfully, the window will appear as given in the figure below. The GUI uses a GridLayout for creating an 8x8 grid. This grid represents the board of the 8 queen puzzle.\n\n![main](https://user-images.githubusercontent.com/16560492/58335124-2f1e4e00-7e41-11e9-9328-fc3b5cd95f41.jpg)\n\nThe objective of the GA is to find the best locations for the 8 queens so that no queen is attacking another horizontally, vertically, or diagonally. This project assumes that no 2 queens are in the same row. As a result, we are sure that no 2 queens will attack each other horizontally. This leaves us to the 2 other types of attacks (vertically and diagonally).\n\nThe bottom part of the window has 3 Button widgets and 1 Label widget. From left to right, the description of the 3 Button widgets is as follows:\n\n* The **Initial Population** button creates the initial population of the GA.\n* The **Show Best Solution** button shows the best solution in the last generation the GA stopped at.\n* The **Start GA** button starts the GA iterations/generations.\n\nThe Label widget just prints some informational messages to the user. For example, it prints the fitness value of the best solution when the user presses the **Show Best Solution** button.\n", "type": "Text_excerpt", "original_header": "Project GUI", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "After running the `main.py` file and pressing the **Initial Population** button, the next figure shows one possible initial population in which 6 out of 8 queens are attacking each other. \n\n![1  6 attacks](https://user-images.githubusercontent.com/16560492/58335727-840e9400-7e42-11e9-830d-6d6b9bdad67a.jpg)\n\nIn the Label, the fitness value is calculated as `1.0/number of attacks`. In this case, the fitness value is equal to 1.0/6.0 which is 0.1667.\n\nThe next figures shows how the GA evolves the solutions until reaching the best solution in which 0 attacks exists.\n", "type": "Text_excerpt", "original_header": "6 Attacks", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "![2  5 attacks](https://user-images.githubusercontent.com/16560492/58336029-321a3e00-7e43-11e9-860e-99aaf16a1d67.jpg)\n", "type": "Text_excerpt", "original_header": "5 Attacks", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "![3  4 attacks](https://user-images.githubusercontent.com/16560492/58336030-321a3e00-7e43-11e9-972d-1e948fbd62ee.jpg)\n", "type": "Text_excerpt", "original_header": "4 Attacks", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "![4  3 attacks](https://user-images.githubusercontent.com/16560492/58336031-321a3e00-7e43-11e9-9b6b-83b9de252186.jpg)\n", "type": "Text_excerpt", "original_header": "3 Attacks", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "![5  2 attacks](https://user-images.githubusercontent.com/16560492/58336032-32b2d480-7e43-11e9-87d1-48dfdd305cc6.jpg)\n", "type": "Text_excerpt", "original_header": "2 Attacks", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "![6  1 attack](https://user-images.githubusercontent.com/16560492/58336033-32b2d480-7e43-11e9-9626-080f5e922825.jpg)\n", "type": "Text_excerpt", "original_header": "1 Attack", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "![7  0 attack](https://user-images.githubusercontent.com/16560492/58336034-32b2d480-7e43-11e9-801d-38bf028c7359.jpg)\n", "type": "Text_excerpt", "original_header": "0 Attacks (Optimal Solution)", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "It is very important to note that the GA does not guarantee reaching the optimal solution each time it works. You can make changes in the number of solutions per population, the number of generations, or the number of mutations. Other than doing that, the initial population might also be another factor for not reaching the optimal solution for a given trial.\n", "type": "Text_excerpt", "original_header": "IMPORTANT", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "**IMPORTANT** *If you are coming for the code of the tutorial [8 Queen Puzzle Optimization Using a Genetic Algorithm in Python](https://heartbeat.fritz.ai/8-queen-puzzle-optimization-using-a-genetic-algorithm-in-python-1d9ca769ede8), then it has been moved to the [TutorialProject](https://github.com/ahmedfgad/8QueensGenetic/tree/master/TutorialProject) directory on 17 June 2020.*\n \n", "original_header": "8QueensGenetic"}, "confidence": 0.8281218659091271, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}], "usage": [{"result": {"value": "Follow these steps to use the project:\n\n1. Run the **main.py** file.\n2. Press the **Initial Population** Button.\n3. Press the **Start GA** Button.\n\nAfter pressing the **Start GA** button, the GA uses the initial population and evolves its solutions until reaching the best possible solution. \n\nBehind the scenes, some important stuff was built that includes building the Kivy GUI, instantiating PyGAD, preparing the the fitness function, preparing the callback function, and more. For more information, please check the tutorial titled [8 Queen Puzzle Optimization Using a Genetic Algorithm in Python](https://heartbeat.fritz.ai/8-queen-puzzle-optimization-using-a-genetic-algorithm-in-python-1d9ca769ede8).\n", "type": "Text_excerpt", "original_header": "Steps to Use the Project", "parent_header": ["PyGAD Installation"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "In 1 May 2019, I wrote a tutorial discussing this project. The tutorial is titled [**8 Queen Puzzle Optimization Using a Genetic Algorithm in Python**](https://heartbeat.fritz.ai/8-queen-puzzle-optimization-using-a-genetic-algorithm-in-python-1d9ca769ede8) which is published at Heartbeat. Check it at these links:\n\n- [Heartbeat](https://heartbeat.fritz.ai/8-queen-puzzle-optimization-using-a-genetic-algorithm-in-python-1d9ca769ede8): https://heartbeat.fritz.ai/8-queen-puzzle-optimization-using-a-genetic-algorithm-in-python-1d9ca769ede8\n\n[![Tutorial Cover Image](https://miro.medium.com/max/3240/1*4tHGUbApzoB5rKHIJi9zmg.jpeg)](https://heartbeat.fritz.ai/8-queen-puzzle-optimization-using-a-genetic-algorithm-in-python-1d9ca769ede8)\n", "type": "Text_excerpt", "original_header": "Tutorial: 8 Queen Puzzle Optimization Using a Genetic Algorithm in Python", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}], "citation": [{"result": {"value": "If you used PyGAD, please consider adding a citation to the following paper about PyGAD:\n\n```\n@misc{gad2021pygad,\n      title={PyGAD: An Intuitive Genetic Algorithm Python Library}, \n      author={Ahmed Fawzy Gad},\n      year={2021},\n      eprint={2106.06158},\n      archivePrefix={arXiv},\n      primaryClass={cs.NE}\n}\n```\n", "type": "Text_excerpt", "original_header": "Citing PyGAD - Bibtex Formatted Citation"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"value": "@misc{gad2021pygad,\n      title={PyGAD: An Intuitive Genetic Algorithm Python Library}, \n      author={Ahmed Fawzy Gad},\n      year={2021},\n      eprint={2106.06158},\n      archivePrefix={arXiv},\n      primaryClass={cs.NE}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}], "contact": [{"result": {"value": "* E-mail: ahmed.f.gad@gmail.com\n* [LinkedIn](https://www.linkedin.com/in/ahmedfgad)\n* [Amazon Author Page](https://amazon.com/author/ahmedgad)\n* [Heartbeat](https://heartbeat.fritz.ai/@ahmedfgad)\n* [Paperspace](https://blog.paperspace.com/author/ahmed)\n* [KDnuggets](https://kdnuggets.com/author/ahmed-gad)\n* [TowardsDataScience](https://towardsdatascience.com/@ahmedfgad)\n* [GitHub](https://github.com/ahmedfgad)\n", "type": "Text_excerpt", "original_header": "Contact Us"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "8QueensGenetic"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}], "image": [{"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58335124-2f1e4e00-7e41-11e9-9328-fc3b5cd95f41.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58335727-840e9400-7e42-11e9-830d-6d6b9bdad67a.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58336029-321a3e00-7e43-11e9-860e-99aaf16a1d67.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58336030-321a3e00-7e43-11e9-972d-1e948fbd62ee.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58336031-321a3e00-7e43-11e9-9b6b-83b9de252186.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58336032-32b2d480-7e43-11e9-87d1-48dfdd305cc6.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58336033-32b2d480-7e43-11e9-9626-080f5e922825.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/58336034-32b2d480-7e43-11e9-801d-38bf028c7359.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://miro.medium.com/max/3240/1*4tHGUbApzoB5rKHIJi9zmg.jpeg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/78830077-ae7c2800-79e7-11ea-980b-53b6bd879eeb.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/8QueensGenetic/master/README.md"}]}