{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:09:54"}, "code_repository": [{"result": {"value": "https://github.com/lvrcek/NeuralLayout", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "lvrcek", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2020-10-05T17:24:20Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-01-17T13:12:47Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "MIT License\n\nCopyright (c) 2019 Lovro Vr\u010dek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/LICENSE"}], "description": [{"result": {"value": "A GNN model that executes simplification algorithms used in the layout phase of de novo genome assembly process.", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "Neural execution of algorithms used in Layout phase of the Overlap-Layout-Consensus genome assembly paradigm, based on MPNNs. \nOverlap-Layout-Consensus is on the most common approaches to genome assembly with long reads obtained from the third-generation sequencers (mainly Oxford Nanopore and PacBio).\nHere we focus on one part of the Layout phase, were an assembly graph is constructed from the overlapped sequences and path needs to be found through that graph.\nAt first, the graph is overly complicated and needs to be simplified. This is done by the initial simplification algorithms which detect and remove structures such as transitive edges, tips (dead ends), and bubbles (alternative paths between the same nodes), that are commonly foudn in the assembly graphs. \nBy relying on Pytorch Geometric, we construct an MPNN-based model to which would simulate the deterministic algorithms. This is a proof-of-concept work to show that graph neural networks can be used on assembly graphs.\n \n", "original_header": "Neural Layout"}, "confidence": 0.9750296571038222, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md"}], "name": [{"result": {"value": "NeuralLayout", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "lvrcek/NeuralLayout", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/lvrcek/NeuralLayout/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/lvrcek/NeuralLayout/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 10, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 3, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/lvrcek/NeuralLayout/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 56808}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 109}, "confidence": 1, "technique": "GitHub_API"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/setup.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "usage": [{"result": {"value": "- Python >= 3.8\n- Pip >= 19.2\n", "type": "Text_excerpt", "original_header": "Basic usage:", "parent_header": ["Neural Layout", "Requirements"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md"}, {"result": {"value": "Basic dataset is already included in this repository. It consists of synthetic training data, synthetic testing data,\nand real testing data obtained from the assembly graph of lambda phage. This enables you to run two\nplug&play examples. For training the model on synthetic data and testing also on synthetic data, run:\n```bash\npython train.py --test_path data/test_synth\n```\nFor training on synthetic data and testing on real lambda phage data, run:\n```bash\npython train.py --test_path data/test_real\n```\n\nYou can also generate the training and testing data manually, by running:\n```bash\npython graph_generator.py data/train/raw --training\npython graph_generator.py data/test/raw --testing\n```\n\nTo test this model on some other reads in FASTQ format, put them into the `data/reads` directory.\nFor example, in case you `ecoli.fastq`, you should first run Raven assembler to generate graphs in CSV format,\nand then create TXT files suitable for this model and save them into e.g. `data/test/raw`.\nThis can be done by running the following commands:\n```bash\npython graph_generator.py --from_fastq --fastq_path data/reads/ecoli.fastq --fastq_type ecoli data/csv\npython graph_generator.py --from_csv --csv_path data/csv/ecoli.csv --csv_type ecoli data/test/raw\npython train.py\n```\nThis will first create the graph in the CSV format and save it into `data/csv` directory under the name `ecoli.csv`.\nThe second line will parse the `ecoli.csv` file and save it in a more appropriate format into the `data/test/raw` directory.\nFinally, you run the training loop with default arguments `data/train` for train path and `data/test` for test path.\n\n", "type": "Text_excerpt", "original_header": "Usage", "parent_header": ["Neural Layout"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md"}], "requirements": [{"result": {"value": "- gcc 4.8+ | clang 4.0+\n- cmake 3.11+\n- zlib 1.2.8+\n", "type": "Text_excerpt", "original_header": "Dependencies for Raven", "parent_header": ["Neural Layout", "Requirements"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md"}], "installation": [{"result": {"value": "First download the code:\n```bash\ngit clone --recursive https://github.com/lvrcek/NeuralLayout.git\ncd NeuralLayout\n```\n\nCreate the virtual environment:\n```bash\npython -m venv env\nsource env/bin/activate\n```\n\nInstall the requirements:\n```bash\npip install -r requirements.txt\n```\n\nIf you want to use Raven for creating the graphs from raw genomic reads in FASTQ format, run the following script.\nIf not, you can skip this part.\n```bash\nsource setup.sh\n```\n", "type": "Text_excerpt", "original_header": "Installation", "parent_header": ["Neural Layout"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md"}], "acknowledgement": [{"result": {"value": "This work was performed at Faculty of Electrical Engineering and Computing, University of Zagreb,\nand Genome Institute of Singapore, A*STAR, as a part of the ARAP program. It was also partially\nfunded by the European Union through the European Regional Development Fund under the grant\nKK.01.1.1.01.0009 (DATACROSS) and has been supported in part by the Croatian Science Foun-\ndation under the project Single genome and metagenome assembly (IP-2018-01-5886) and \u201cYoung\nResearchers\u201d Career Development Program.", "type": "Text_excerpt", "original_header": "Acknowledgement", "parent_header": ["Neural Layout"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Graphs"}, "confidence": 0.8543227383513147, "technique": "supervised_classification"}], "full_title": [{"result": {"type": "String", "value": "Neural Layout"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/lvrcek/NeuralLayout/master/README.md"}]}