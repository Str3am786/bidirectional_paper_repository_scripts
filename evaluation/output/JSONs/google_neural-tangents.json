{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:15:39"}, "code_repository": [{"result": {"value": "https://github.com/google/neural-tangents", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "google", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2019-04-08T16:48:48Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-20T03:40:22Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/apache-2.0", "type": "License", "name": "Apache License 2.0", "url": "https://api.github.com/licenses/apache-2.0", "spdx_id": "Apache-2.0"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/LICENSE"}], "description": [{"result": {"value": "Fast and Easy Infinite Neural Networks in Python", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "The `neural_tangents` (`nt`) package contains the following modules and functions:\n\n* `stax` - primitives to construct neural networks like `Conv`, `Relu`, `serial`, `parallel` etc.\n\n* `predict` - predictions with infinite networks:\n\n  * `predict.gradient_descent_mse` - inference with a single infinite width / linearized network trained on MSE loss with continuous gradient descent for an arbitrary finite or infinite (`t=None`) time. Computed in closed form.\n\n  * `predict.gradient_descent` - inference with a single infinite width / linearized network trained on arbitrary loss with continuous (momentum) gradient descent for an arbitrary finite time. Computed using an ODE solver.\n\n  * `predict.gradient_descent_mse_ensemble` - inference with an infinite ensemble of infinite width networks, either fully Bayesian (`get='nngp'`) or inference with MSE loss using continuous gradient descent (`get='ntk'`). Finite-time Bayesian inference (e.g. `t=1., get='nngp'`) is interpreted as [gradient descent on the top layer only](https://arxiv.org/abs/1902.06720), since it converges to exact Gaussian process inference with NNGP (`t=None, get='nngp'`). Computed in closed form.\n\n  * `predict.gp_inference` - exact closed form Gaussian process inference using NNGP (`get='nngp'`), NTK (`get='ntk'`), or both (`get=('nngp', 'ntk')`). Equivalent to `predict.gradient_descent_mse_ensemble` with `t=None` (infinite training time), but has a slightly different API (accepting precomputed kernel matrix `k_train_train` instead of `kernel_fn` and `x_train`).\n\n* `monte_carlo_kernel_fn` - compute a Monte Carlo kernel estimate  of _any_ `(init_fn, apply_fn)`, not necessarily specified via `nt.stax`, enabling the kernel computation of infinite networks without closed-form expressions.\n\n* Tools to investigate training dynamics of _wide but finite_ neural networks, like `linearize`, `taylor_expand`, `empirical_kernel_fn` and more. See [Training dynamics of wide but finite networks](#training-dynamics-of-wide-but-finite-networks) for details.\n\n", "type": "Text_excerpt", "original_header": "Package description", "parent_header": ["Neural Tangents"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Freedom of thought is fundamental to all of science. Right now, our freedom is being suppressed with bombing of civilians in Ukraine. **Don't be against the war - fight against the war! [supportukrainenow.org](https://supportukrainenow.org/)**.\n \n", "original_header": "**Stand with Ukraine!** \ud83c\uddfa\ud83c\udde6"}, "confidence": 0.975205558975706, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Neural Tangents is a high-level neural network API for specifying complex, hierarchical, neural networks of both finite and _infinite_ width. Neural Tangents allows researchers to define, train, and evaluate infinite networks as easily as finite ones. The library has been used in [>100 papers](https://scholar.google.com/scholar?oi=bibs&hl=en&cites=4030630874639258770,4161931758707925692,2891750348147928089,8612471018033907356,10117604240015578443,4178323439418493877). \nInfinite (in width or channel count) neural networks are Gaussian Processes (GPs) with a kernel function determined by their architecture. See [this listing](https://github.com/google/neural-tangents/wiki/Overparameterized-Neural-Networks:-Theory-and-Empirics) of papers written by the creators of Neural Tangents which study the infinite width limit of neural networks. \nNeural Tangents allows you to construct a neural network model from common building blocks like convolutions, pooling, residual connections, nonlinearities, and more, and obtain not only the finite model, but also the kernel function of the respective GP. \nThe library is written in python using [JAX](https://github.com/google/jax) and leveraging [XLA](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/g3doc/index.md) to run out-of-the-box on CPU, GPU, or TPU. Kernel computation is highly optimized for speed and memory efficiency, and can be automatically distributed over multiple accelerators with near-perfect scaling. \nNeural Tangents is a work in progress.\nWe happily welcome contributions! \n", "original_header": "Overview"}, "confidence": 0.9277779889054134, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "An easy way to get started with Neural Tangents is by playing around with the following interactive notebooks in Colaboratory. They demo the major features of Neural Tangents and show how it can be used in research. \n- [Neural Tangents Cookbook](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/neural_tangents_cookbook.ipynb)\n- [Weight Space Linearization](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/weight_space_linearization.ipynb)\n- [Function Space Linearization](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/function_space_linearization.ipynb)\n- [Neural Network Phase Diagram](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/phase_diagram.ipynb)\n- [Performance Benchmark](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/myrtle_kernel_with_neural_tangents.ipynb): simple benchmark for [Myrtle kernels](https://arxiv.org/abs/2003.02237). See also [Performance](#myrtle-network)\n- [**New**] Empirical NTK:\n  - [Fully-connected network](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/empirical_ntk_fcn.ipynb)\n  - [FLAX ResNet18](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/empirical_ntk_resnet.ipynb)\n  - [Experimental: Tensorflow ResNet50](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/experimental/empirical_ntk_resnet_tf.ipynb)\n- [**New**] [Automatic NNGP/NTK of elementwise nonlinearities](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/elementwise.ipynb) \n", "original_header": "Colab Notebooks"}, "confidence": 0.9609055099394861, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "<b>See this [Colab](https://colab.research.google.com/github/google/neural-tangents/blob/main/notebooks/neural_tangents_cookbook.ipynb) for a detailed tutorial. Below is a very quick introduction.</b> \nOur library closely follows JAX's API for specifying neural networks,  [`stax`](https://github.com/google/jax/blob/main/jax/example_libraries/stax.py). In `stax` a network is defined by a pair of functions `(init_fn, apply_fn)` initializing the trainable parameters and computing the outputs of the network respectively. Below is an example of defining a 3-layer network and computing its outputs `y` given inputs `x`.\n```python\nfrom jax import random\nfrom jax.example_libraries import stax\n\ninit_fn, apply_fn = stax.serial(\n    stax.Dense(512), stax.Relu,\n    stax.Dense(512), stax.Relu,\n    stax.Dense(1)\n)\n\nkey = random.PRNGKey(1)\nx = random.normal(key, (10, 100))\n_, params = init_fn(key, input_shape=x.shape)\n\ny = apply_fn(params, x)  # (10, 1) jnp.ndarray outputs of the neural network\n```\nNeural Tangents is designed to serve as a drop-in replacement for `stax`, extending the `(init_fn, apply_fn)` tuple to a triple `(init_fn, apply_fn, kernel_fn)`, where `kernel_fn` is the kernel function of the infinite network (GP) of the given architecture. Below is an example of computing the covariances of the GP between two batches of inputs `x1` and `x2`.\n```python\nfrom jax import random\nfrom neural_tangents import stax\n\ninit_fn, apply_fn, kernel_fn = stax.serial(\n    stax.Dense(512), stax.Relu(),\n    stax.Dense(512), stax.Relu(),\n    stax.Dense(1)\n)\n\nkey1, key2 = random.split(random.PRNGKey(1))\nx1 = random.normal(key1, (10, 100))\nx2 = random.normal(key2, (20, 100))\n\nkernel = kernel_fn(x1, x2, 'nngp')\n```\nNote that `kernel_fn` can compute _two_ covariance matrices corresponding to the [Neural Network Gaussian Process (NNGP)](https://en.wikipedia.org/wiki/Neural_network_Gaussian_process) and [Neural Tangent (NT)](https://en.wikipedia.org/wiki/Neural_tangent_kernel) kernels respectively. The NNGP kernel corresponds to the _Bayesian_ infinite neural network. The NTK corresponds to the _(continuous) gradient descent trained_ infinite network. In the above example, we compute the NNGP kernel, but we could compute the NTK or both:\n```python\n# Get kernel of a single type\nnngp = kernel_fn(x1, x2, 'nngp') # (10, 20) jnp.ndarray\nntk = kernel_fn(x1, x2, 'ntk') # (10, 20) jnp.ndarray\n\n# Get kernels as a namedtuple\nboth = kernel_fn(x1, x2, ('nngp', 'ntk'))\nboth.nngp == nngp  # True\nboth.ntk == ntk  # True\n\n# Unpack the kernels namedtuple\nnngp, ntk = kernel_fn(x1, x2, ('nngp', 'ntk'))\n```\nAdditionally, if no third-argument is specified then the `kernel_fn` will return a `Kernel` namedtuple that contains additional metadata. This can be useful for composing applications of `kernel_fn` as follows:\n```python\nkernel = kernel_fn(x1, x2)\nkernel = kernel_fn(kernel)\nprint(kernel.nngp)\n```\nDoing inference with infinite networks trained on MSE loss reduces to classical GP inference, for which we also provide convenient tools:\n```python\nimport neural_tangents as nt\n\nx_train, x_test = x1, x2\ny_train = random.uniform(key1, shape=(10, 1))  # training targets\n\npredict_fn = nt.predict.gradient_descent_mse_ensemble(kernel_fn, x_train,\n                                                      y_train)\n\ny_test_nngp = predict_fn(x_test=x_test, get='nngp')\n# (20, 1) jnp.ndarray test predictions of an infinite Bayesian network\n\ny_test_ntk = predict_fn(x_test=x_test, get='ntk')\n# (20, 1) jnp.ndarray test predictions of an infinite continuous\n# gradient descent trained network at convergence (t = inf)\n\n# Get predictions as a namedtuple\nboth = predict_fn(x_test=x_test, get=('nngp', 'ntk'))\nboth.nngp == y_test_nngp  # True\nboth.ntk == y_test_ntk  # True\n\n# Unpack the predictions namedtuple\ny_test_nngp, y_test_ntk = predict_fn(x_test=x_test, get=('nngp', 'ntk'))\n```\n \n", "original_header": "5-Minute intro"}, "confidence": 0.9452770465406898, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "We remark the following differences between our library and the JAX one. \n", "original_header": "<a href=\"https://github.com/google/neural-tangents/blob/main/neural_tangents/stax.py\">`nt.stax`</a> vs <a href=\"https://github.com/google/jax/blob/main/jax/example_libraries/stax.py\">`jax.example_libraries.stax`</a>"}, "confidence": 0.8646711401955661, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "For CNNs w/ pooling, our CPU and TPU performance is suboptimal due to low core\nutilization (10-20%, looks like an XLA:CPU issue), and excessive padding\nrespectively. We will look into improving performance, but recommend NVIDIA GPUs\nin the meantime. See [Performance](#performance). \n", "original_header": "CPU and TPU performance"}, "confidence": 0.9457102346986176, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The kernel of an infinite network `kernel_fn(x1, x2).ntk` combined with  `nt.predict.gradient_descent_mse` together allow to analytically track the outputs of an infinitely wide neural network trained on MSE loss throughout training. Here we discuss the implications for _wide but finite_ neural networks and present tools to study their evolution in _weight space_ (trainable parameters of the network) and _function space_ (outputs of the network).\n \n", "original_header": "Training dynamics of wide but finite networks"}, "confidence": 0.990150839255964, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Continuous gradient descent in an infinite network [has been shown in](https://arxiv.org/abs/1902.06720) to correspond to training a _linear_ (in trainable parameters) model, which makes linearized neural networks an important subject of study for understanding the behavior of parameters in wide models. \nwhich allow us to linearize or get an arbitrary-order Taylor expansion of any function `apply_fn(params, x)` around some initial parameters `params_0` as `apply_fn_lin = nt.linearize(apply_fn, params_0)`. \nOne can use `apply_fn_lin(params, x)` exactly as you would any other function\n(including as an input to JAX optimizers). This makes it easy to compare the\ntraining trajectory of neural networks with that of its linearization.\nPrior theory and experiments have examined the linearization of neural\nnetworks from inputs to logits or pre-activations, rather than from inputs to\npost-activations which are substantially more nonlinear.\n \n", "original_header": "Weight space"}, "confidence": 0.9607540898503907, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "Outputs of a linearized model [evolve identically to those of an infinite one](https://arxiv.org/abs/1902.06720) but with a different kernel - precisely, the [Neural Tangent Kernel](https://arxiv.org/1806.07572) evaluated on the specific `apply_fn` of the finite network given specific `params_0` that the network is initialized with. For this we provide the `nt.empirical_kernel_fn` function that accepts any `apply_fn` and returns a `kernel_fn(x1, x2, get, params)` that allows to compute the empirical NTK and/or NNGP (based on `get`) kernels on specific `params`. \n", "original_header": "Function space:"}, "confidence": 0.9964000849377392, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The success or failure of the linear approximation is highly architecture\ndependent. However, some rules of thumb that we've observed are: \n   * For fully-connected networks one generally observes very strong\n     agreement by the time the layer-width is 512 (RMSE of about 0.05 at the\n     end of training). \n   * For convolutional networks one generally observes reasonable\n     agreement by the time the number of channels is 512. \nWith a new model it is therefore advisable to start with large width on a small dataset using a small learning rate. \n", "original_header": "What to Expect"}, "confidence": 0.9562497664876921, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "In the table below we measure time to compute a single NTK\nentry in a 21-layer CNN (`3x3` filters, no strides, `SAME` padding, `ReLU`) on inputs of shape `3x32x32`. Precisely:\n```python\nlayers = []\nfor _ in range(21):\n  layers += [stax.Conv(1, (3, 3), (1, 1), 'SAME'), stax.Relu()]\n```\n \n", "original_header": "Performance"}, "confidence": 0.9059162106158767, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "\nTested using version `0.2.1`. All GPU results are per single accelerator.\nNote that runtime is proportional to the depth of your network.\nIf your performance differs significantly,\nplease [file a bug](https://github.com/google/neural-tangents/issues/new)! \n", "original_header": "CNN without pooling"}, "confidence": 0.9114238292818011, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "name": [{"result": {"value": "neural-tangents", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "google/neural-tangents", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/google/neural-tangents/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/google/neural-tangents/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 2152, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "bayesian-inference, bayesian-networks, deep-networks, gaussian-processes, gradient-descent, gradient-flow, infinite-networks, jax, kernel, kernel-computation, neural-networks, neural-tangents, training-dynamics", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 236, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/google/neural-tangents/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Jupyter Notebook", "name": "Jupyter Notebook", "type": "Programming_language", "size": 3147387}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 858762}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/133417130", "tag": "v0.6.5", "name": "v0.6.5", "author": {"name": "romanngg", "type": "User"}, "description": "Maintenance release: \r\n* [refactoring and minor improvements](https://github.com/google/neural-tangents/commit/3c3dc9fb0cdce9d8e6ada76ae5d11b6cec060875)\r\n* Support and require \r\n  * [JAX >= 0.4.16](https://github.com/google/neural-tangents/commit/ad47437a31a578912cef764496d889f48362b9de)\r\n  * [Tensorflow >= 2.15](https://github.com/google/neural-tangents/commit/429dc13617bd1b7e71f5f362bd4b394c1176e633)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.6.5", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.6.5", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.6.5", "url": "https://api.github.com/repos/google/neural-tangents/releases/133417130", "release_id": 133417130, "date_created": "2023-12-11T01:57:13Z", "date_published": "2023-12-11T14:10:12Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/118643010", "tag": "v0.6.4", "name": "v0.6.4", "author": {"name": "romanngg", "type": "User"}, "description": "Improvements:\r\n\r\n* [Support Python 3.11](https://github.com/google/neural-tangents/commit/2c38d69372c9cbfdd750df3e70af358da346bd4d)\r\n* [Use modern generic type annotations](https://github.com/google/neural-tangents/commit/2c38d69372c9cbfdd750df3e70af358da346bd4d)\r\n* Various [bugfixes](https://github.com/google/neural-tangents/commit/ed115c751f544c1ad3fa64e550266be13a013916), [compatibility](https://github.com/google/neural-tangents/commit/c5f8eb9c60b3970b5cffe840ac24bad265df4931) and [documentation](https://github.com/google/neural-tangents/commit/11c024eb879c3a62fee21e2d235e6d90539c4e61) improvements\r\n\r\nBreaking changes:\r\n\r\n* [Drop support for Python 3.8 following JAX and tf2jax version policy](https://github.com/google/neural-tangents/commit/2c38d69372c9cbfdd750df3e70af358da346bd4d)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.6.4", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.6.4", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.6.4", "url": "https://api.github.com/repos/google/neural-tangents/releases/118643010", "release_id": 118643010, "date_created": "2023-08-24T23:47:14Z", "date_published": "2023-08-25T00:01:21Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/92088327", "tag": "v0.6.2", "name": "v0.6.2", "author": {"name": "romanngg", "type": "User"}, "description": "New features:\r\n\r\n* [`nt.stax.repeat` layer allowing fast compilation of very deep networks](https://github.com/google/neural-tangents/commit/fe98c9c047847a4a31f03aa81992d7328eda29e2) (see #168  and thanks @jglaser!)\r\n* Add a [Colab notebook](https://github.com/google/neural-tangents/commit/5ffa88ae4bf0257a7e1af017c49c94cb6bdf228d) accompanying [Precise Learning Curves and Higher-Order Scaling Limits for Dot Product Kernel Regression](https://arxiv.org/abs/2205.14846)\r\n\r\nImprovements:\r\n* [Support M1 macs](https://github.com/google/neural-tangents/commit/0272225ee56d8878f5bde30f84d58e058d06b348) (see #171)\r\n* [Internal changes to support newer versions of JAX](https://github.com/google/neural-tangents/commit/edb7af53eed4f3c6e9d1d921fe3dad28aff2daa2)\r\n\r\nBreaking changes:\r\n* [Drop support for Python 3.7 following JAX and tf2jax version policy](https://github.com/google/neural-tangents/commit/0272225ee56d8878f5bde30f84d58e058d06b348)\r\n* [On GPU, require CuDNN>=8.2 to support JAX 0.4.3](https://github.com/google/neural-tangents/commit/46306b6a28617a0d03f8d586da132d6766c9b301)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.6.2", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.6.2", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.6.2", "url": "https://api.github.com/repos/google/neural-tangents/releases/92088327", "release_id": 92088327, "date_created": "2023-02-11T00:20:02Z", "date_published": "2023-02-11T00:45:44Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/77075617", "tag": "v0.6.1", "name": "v0.6.1", "author": {"name": "romanngg", "type": "User"}, "description": "New features:\r\n\r\n* `nt.stax`:\r\n    * [New nonlinearities (`Gabor`, `Polynomial`, `Monomial`, `RectifiedMonomial`)](https://github.com/google/neural-tangents/commit/47ffb1bd48206b3cdbc5f5137abd6c6036e6cc4a) following the release of **[Fast Neural Kernel Embeddings for General Activations](https://arxiv.org/abs/2209.04121)**.\r\n\r\n* `nt.empirical`:\r\n    * [An efficient NTK-vector product function `nt.empirical_ntk_vp_fn`](https://github.com/google/neural-tangents/commit/628ce0e58905ba2b16d924c2119d661a01856c83) (without instantiating the NTK).\r\n\r\nImprovements:\r\n* [Make `nt.stax.Hermite` support arbitrary degrees](https://github.com/google/neural-tangents/commit/47ffb1bd48206b3cdbc5f5137abd6c6036e6cc4a).\r\n* [Various documentation improvements](https://github.com/google/neural-tangents/commit/6019cc8e013cdacfa5acd53d57fc99b25e6165e0).", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.6.1", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.6.1", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.6.1", "url": "https://api.github.com/repos/google/neural-tangents/releases/77075617", "release_id": 77075617, "date_created": "2022-09-12T20:18:10Z", "date_published": "2022-09-14T04:58:56Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/72261508", "tag": "v0.6.0", "name": "v0.6.0", "author": {"name": "romanngg", "type": "User"}, "description": "New features:\r\n* `nt.empirical`:\r\n    * New `implementation=3` for `nt.empirical`, allowing to often speed-up or reduce the memory of the empirical NTK by orders of magnitude. Please see our ICML2022 paper [Fast Finite Width Neural Tangent Kernel](https://arxiv.org/abs/2206.08720), new [empirical NTK examples](https://github.com/google/neural-tangents#colab-notebooks), and [visit us on Thursday at ICML in-person](https://icml.cc/virtual/2022/spotlight/17194)!\r\n    * [New experimental prototype of using our empirical NTK implementations in Tensorflow via `nt.experimental.empirical_ntk_fn_tf`](https://github.com/google/neural-tangents/commit/e28971ce224857094dce8766a8127f1c17aa3c5f).\r\n    * [Make `nt.empircial` work with arbitrary pytrees](https://github.com/google/neural-tangents/commit/f86dafae0477900cf1b73ea7030ec7220949a03d).\r\n\r\n* `nt.stax`:\r\n    * [`nt.stax.Index` layer mimicking numpy indexing](https://github.com/google/neural-tangents/commit/6f10d16979d9a69b1ddac31a4f2a3813abb30c78).\r\n    * [Expose the layer scaling parameter `s` in `parameterization=\"standard\"`](https://github.com/google/neural-tangents/commit/239cc849cf55d672018bce0e3539e56b1a50870f).\r\n\r\nImprovements:\r\n* [Slightly lower memory usage in batching](https://github.com/google/neural-tangents/commit/d065a8c508d9cbac57604815ea5944d874bc8a28).\r\n* [Many improvements to documentation and type annotations](https://github.com/google/neural-tangents/commit/eec18f56562864540f8141372d7df67f9c34373e).\r\n* [Simplify test specifications and avoid relying on JAX testing utilities](https://github.com/google/neural-tangents/commit/a137b9672f855996748ad5a2f79e9ef0ebc0b8a8).\r\n\r\nBugfixes:\r\n* [Make `nt.batch` use the correct (local) number of devices in a multi-host setting](https://github.com/google/neural-tangents/commit/23bea9f10e40a470521c8ca887be0fc6f5f2570f) (thanks @jglaser).\r\n\r\nBreaking changes:\r\n* [If you've been using `nt.empirical` or `nt.monte_carlo` with `mask_constant` (empirical kernels with masking, for variable-lengths sequences), you now need to pass `nt.empirical_kernel_fn(stax.unmask_fn(apply_fn))` instead of `nt.empirical_kernel_fn(apply_fn)`. This is done in order to decouple `nt.empirical` and `nt.stax`, and the under-the-hood unmasking happening in `nt.empirical` is now delegated to `stax.unmask_fn`](https://github.com/google/neural-tangents/commit/f86dafae0477900cf1b73ea7030ec7220949a03d).", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.6.0", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.6.0", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.6.0", "url": "https://api.github.com/repos/google/neural-tangents/releases/72261508", "release_id": 72261508, "date_created": "2022-07-18T18:57:20Z", "date_published": "2022-07-18T19:09:09Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/60247738", "tag": "v0.5.0", "name": "v0.5.0", "author": {"name": "romanngg", "type": "User"}, "description": "Potentially breaking changes:\r\n- [Significant internal refactoring, notably splitting `stax` into multiple sub-modules, and moving implementations into an `_src` folder](https://github.com/google/neural-tangents/commit/4b183cec5e14b5ada427a0c63303f0ebe6b97854). This could break your code if you use internal function like `nt.utils.typing`, `nt.utils.utils`, `nt.utils.Kernel` etc. (public [API](https://neural-tangents.readthedocs.io/en/latest/) will remain unchanged). This should be easily fixed by updating the imports, e.g. `nt.utils -> nt._src.utils`.\r\n\r\nNew features:\r\n- [Improve documentation with (sub-)sections and better type annotations.](https://github.com/google/neural-tangents/commit/22b3aaeda3f8ff2f516c4725997bf542bae53741)\r\n- [Improve type annotations via typing protocols](https://github.com/google/neural-tangents/commit/b0d489e58228642e65d7cce9abc7c1a0db0526ea)\r\n- [Run pytype in GitHub Actions](https://github.com/google/neural-tangents/commit/b0d489e58228642e65d7cce9abc7c1a0db0526ea)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.5.0", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.5.0", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.5.0", "url": "https://api.github.com/repos/google/neural-tangents/releases/60247738", "release_id": 60247738, "date_created": "2022-02-23T16:48:35Z", "date_published": "2022-02-23T16:58:57Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/59755496", "tag": "v0.4.0", "name": "v0.4.0", "author": {"name": "romanngg", "type": "User"}, "description": "**WARNING:**\r\nOur next major release (v0.5.0) will include significant refactoring, and could break your code if you use internal function like `nt.utils.typing`, `nt.utils.utils`, `nt.utils.Kernel` etc. (public [API](https://neural-tangents.readthedocs.io/en/latest/) will remain unchanged). This should be easily fixed by updating the imports, e.g. `nt.utils -> nt._src.utils`.\r\n\r\n**This release (v0.4.0):**\r\n\r\nNew feature:\r\n- [Add continuous integration with GitHub Actions.](https://github.com/google/neural-tangents/commit/bb1b6debd0dc7009547facf794ad05cac89bc465)\r\n- [Python 3.10 support.](https://github.com/google/neural-tangents/commit/bb1b6debd0dc7009547facf794ad05cac89bc465)\r\n\r\nImprovements:\r\n- Various internal refactoring and [tighter tests](https://github.com/google/neural-tangents/commit/7055fd97c7b9fb8644e8467ed3071a2a61551d2d).\r\n\r\nBugfixes:\r\n- [Fix values and gradients of non-differentiable `kernel_fn` at zero inputs to be consistent with finite-width kernels, and how JAX defines gradients of non-differentiable functions to be the mean sub-gradient](https://github.com/google/neural-tangents/commit/31ab161d923cfd9bf82a9e8d234744ce29fb99ed), see also #123.\r\n- [Fix wrong treatment of `b_std=None` in the infinite-width limit with `parameterization='standard'`](https://github.com/google/neural-tangents/commit/a3b2a8c5bcdcb1d168e2b8290d2d96fe768188d6), see also #123. \r\n- [Fix a bug in `nt.batch` when `x2 = None` and inputs are PyTrees](https://github.com/google/neural-tangents/commit/ae01c9f487598f6350e5efcd8bcdb701c2dd10b4).\r\n\r\nBreaking changes:\r\n- Bump requirements to `jax==0.3` and `frozendict==2.3`.", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.4.0", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.4.0", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.4.0", "url": "https://api.github.com/repos/google/neural-tangents/releases/59755496", "release_id": 59755496, "date_created": "2022-02-17T00:47:12Z", "date_published": "2022-02-17T00:57:43Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/53527865", "tag": "v0.3.9", "name": "v0.3.9", "author": {"name": "romanngg", "type": "User"}, "description": "New Features:\r\n* [New nonlinearities](0409a42fadd9e6da1ec6680c23bddfd64e9d32ce): \r\n  * [`stax.Hermite`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Hermite);\r\n  * [`stax.Exp`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Exp);\r\n  * [`stax.Gaussian`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Gaussian);\r\n  * [`stax.ExpNormalized`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.ExpNormalized).\r\n* [Support and default to `b_std=None` in `stax` layers, treated as symbolic zero, i.e. providing same behavior as `b_std=0.`, but without creating a redundant bias array.](7d01d6513bf7bce5d227aa9f223eb8353cc8c74b)\r\n\r\nBreaking changes:\r\n* [Bump requirements to JAX v0.2.25](65d80277e4f2d2b0c285bca52937a3248200877f). In consequence, drop CUDA 10 support to prevent https://github.com/google/neural-tangents/issues/122\r\n* [The `b_std=None` change could be breaking in very rare edge cases. The dummy bias array is replaced with `None` in this case and might potentially break your serialization routine.](7d01d6513bf7bce5d227aa9f223eb8353cc8c74b)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.9", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.9", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.9", "url": "https://api.github.com/repos/google/neural-tangents/releases/53527865", "release_id": 53527865, "date_created": "2021-11-17T06:10:15Z", "date_published": "2021-11-17T06:35:11Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/50928629", "tag": "v0.3.8", "name": "v0.3.8", "author": {"name": "romanngg", "type": "User"}, "description": "New Features:\r\n\r\n* [`stax.Elementwise`](https://github.com/google/neural-tangents/commit/25788a98b4a93b80f4f695247c745453baa48bc5) - a layer for generic elementwise functions requiring the user to specify _only_ scalar-valued `nngp_fn : (cov12, var1, var2) |-> E[fn(x_1) * fn(x_2)]`. The NTK computation (thanks to @SiuMath) and vectorization over the underlying `Kernel` happen automatically under the hood. If you can't derive the `nngp_fn` for your function, use [`stax.ElementwiseNumerical`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.ElementwiseNumerical). See [docs](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Elementwise) for more details.\r\n\r\nBugfixes:\r\n\r\n* Compatibility with [JAX 0.2.21](https://github.com/google/jax/releases/tag/jax-v0.2.21).\r\n\r\n**Full Changelog**: https://github.com/google/neural-tangents/compare/v0.3.7...v0.3.8", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.8", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.8", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.8", "url": "https://api.github.com/repos/google/neural-tangents/releases/50928629", "release_id": 50928629, "date_created": "2021-10-01T22:10:59Z", "date_published": "2021-10-07T00:14:06Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/48315121", "tag": "v0.3.7", "name": "v0.3.7", "author": {"name": "romanngg", "type": "User"}, "description": "New Features:\r\n* [`nt.stax.Cos`](68e8df0ca2c0007b535ef8cd85c3a0d5a5392b68)\r\n* [`nt.stax.ImageResize`](f8a964feab46a96426440f8998c9039403f2a1d6)\r\n* [New implementation `implementation=\"SPARSE\"` in `nt.stax.Aggregate` for efficient handling of sparse graphs (see #86, #9)](b29337daf9a4e1f5b817f1689809021f52385f02)\r\n* [Support `approximate=True` in `nt.stax.Gelu`](6ab76aa3ed072f6c34bb61784178eb2d8b85c2cb)\r\n\r\nBugfixes:\r\n* [Fix a bug that might alter `Kernel` requirements](199b077fd0c6d4267db8e927a0c3c2a4e0a095cd)\r\n* [Fix `nt.batch` handling of `diagonal_axes` (see #87)](fd1611660c87edcb0c2e50403f691b60d2cc252b)\r\n* [Remove the frequent but redundant warning about type conversion in `kernel_fn`](b6eede90b7e89208e95d4154e0586c80a69d42a3)\r\n* [Minor fixes to documentation and code clean-up](https://github.com/google/neural-tangents/commit/8ca8b985f13ad431eb818e7e5f8986f693651de7#diff-0c18e3e747635221997019d022bea51886f28fa1f153e93f50069b763ee83710)\r\n\r\nBreaking changes:\r\n* [Parameters initialized by `init_fn` now follow the setting of `JAX_ENABLE_X64` instead of always defaulting to 32-bit (see #112)](https://github.com/google/jax/commit/693d2e20cf40e17b567c4a252f37a4d6b9366e5d)\r\n* [Drop python 3.6 support and add python 3.9 support](https://github.com/google/neural-tangents/commit/42cf4d55d4ab7525bd183b3f9e4d7dd889c3f810)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.7", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.7", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.7", "url": "https://api.github.com/repos/google/neural-tangents/releases/48315121", "release_id": 48315121, "date_created": "2021-08-23T21:30:53Z", "date_published": "2021-08-23T23:15:21Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/36887340", "tag": "v0.3.6", "name": "v0.3.6", "author": {"name": "romanngg", "type": "User"}, "description": "New Features:\r\n* [`nt.stax.Sign`](https://github.com/google/neural-tangents/commit/dacd4f9c5531e93b4a0b70b9102414391c2f7b16)\r\n* [Allow to pass a `to_dense` function to `nt.stax.Aggregate` to allow storing the entire graph in a sparse format in GNNs.](https://github.com/google/neural-tangents/commit/9bb8816c7953aa97630a7984f9eae7a59c472d8f) See #86. \r\n* [Support `get=\"ntkgp\"` in `nt.predict.gp_inference (thanks @bobby-he!).](https://github.com/google/neural-tangents/commit/ae3af8aa677f71416a56c45545c593ca18060ce7) See #93 and https://arxiv.org/abs/2007.05864.\r\n\r\nBugfixes:\r\n* [Improve numerical stability of differentiating nonlinearities, and avoid `NaN`s, notably in `nt.stax.Relu`](https://github.com/google/neural-tangents/commit/b1e750cb86f98e73cfe426494e8c647a271df928). See #88 and #73.\r\n* [Allow to pass different test/train `kwargs` in `nt.predict.gradient_descent_mse_ensemble`](https://github.com/google/neural-tangents/commit/2d199177911f6939ad850be3f745f28f5b48f612). See #79.", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.6", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.6", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.6", "url": "https://api.github.com/repos/google/neural-tangents/releases/36887340", "release_id": 36887340, "date_created": "2021-01-25T21:28:09Z", "date_published": "2021-01-25T23:20:02Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/34097302", "tag": "v0.3.5", "name": "v0.3.5", "author": {"name": "romanngg", "type": "User"}, "description": "New features:\r\n- [Major speedup of the empirical NTK via `vmap_axes` ](https://github.com/google/neural-tangents/commit/f15b6528a47a73b1940f069309e69111b5235e13) - please see https://neural-tangents.readthedocs.io/en/latest/neural_tangents.empirical.html and discussion in #30\r\n- [Allow to compute maximum theoretical learning rate for a momentum optimizer](https://github.com/google/neural-tangents/commit/0916a4ff28be66c1664d331ca2aa2805340abbe3)\r\n- [Add an IMDB sentiment analysis example](https://github.com/google/neural-tangents/commit/49ace9611e3f459fe3fe91ba32d8748642d19e57)\r\n- [Allow pytrees as outputs of functions to linearize/taylorize](https://github.com/google/neural-tangents/commit/e639f6a857f2d588032b7f9e16144ee5e74846aa)\r\n\r\nBreaking changes:\r\n- [Fuse `nt.empirical_direct_ntk_fn`,  `nt.empirical_ntk_fn` into a single `nt.empirical_direct_ntk_fn` accepting `implementation=1/2` argument (`1` - direct, default; `2` - implicit)](https://github.com/google/neural-tangents/commit/f15b6528a47a73b1940f069309e69111b5235e13)\r\n- [Rename `nt.stax.NumericalActivation` into `nt.stax.ElementwiseNumerical`](https://github.com/google/neural-tangents/commit/8ac41614c60824ffd654b518c4c21d18f82b2945)\r\n\r\n[Minor bugfixes](https://github.com/google/neural-tangents/commit/06e8ffed34547f833d224899a0facb644a1e10be)\r\n", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.5", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.5", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.5", "url": "https://api.github.com/repos/google/neural-tangents/releases/34097302", "release_id": 34097302, "date_created": "2020-11-18T01:42:02Z", "date_published": "2020-11-18T04:34:54Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/32592993", "tag": "v0.3.4", "name": "v0.3.4", "author": {"name": "romanngg", "type": "User"}, "description": "New layers:\r\n* [`nt.stax.DotGeneral`](https://github.com/google/neural-tangents/commit/b582a89600860d331cb91064e3b0075a9e898c89)\r\n* [`nt.stax.ConvTranspose`](https://github.com/google/neural-tangents/commit/780ad0ce22d482bcefd12f4d3390090de7206da5)\r\n* [`nt.stax.ConvLocal`](https://github.com/google/neural-tangents/commit/cb6cf8027ecc72bc4964f7e24f56508f668678d2)\r\n\r\nNew features:\r\n* [Support arbitrary nested structures of arrays (tuples, lists of lists etc) as inputs and/or outputs](https://github.com/google/neural-tangents/commit/8a627885296715e51d162e326ebcb5796e30fe4b)\r\n* [You can now debug your NT code with `config.update('jax_numpy_rank_promotion', 'raise')`, as NT and related JAX code no longer rank-promote](https://github.com/google/neural-tangents/commit/be351c56e0b5ed293527292afdc9df48a21dc064)\r\n\r\nBreaking changes:\r\n* [Remove `nt.stax.GeneralConv` (use `nt.stax.Conv` instead)](https://github.com/google/neural-tangents/commit/dcc77da2c5aef24c2dd9baca00edd98dc47408f7)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.4", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.4", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.4", "url": "https://api.github.com/repos/google/neural-tangents/releases/32592993", "release_id": 32592993, "date_created": "2020-10-15T00:45:04Z", "date_published": "2020-10-15T01:43:25Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/30546471", "tag": "v0.3.3", "name": "v0.3.3", "author": {"name": "romanngg", "type": "User"}, "description": "* [`nt.stax.Sigmoid_like`](https://github.com/google/neural-tangents/commit/de2a61d3097f9691290f2c67d61ed4f345b53bb6)\r\n* [`nt.stax.FanInProd`](https://github.com/google/neural-tangents/commit/484dfa24b95722206134bbc8a2c457988c794822)\r\n* [Speedup masking](https://github.com/google/neural-tangents/commit/74498fc8d106842869dda14cedf391f524d7c8be)\r\n* [Bugfixes](https://github.com/google/neural-tangents/commit/cfcda489548b0e5bf6e499416ac8b68bf4c612dc)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.3", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.3", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.3", "url": "https://api.github.com/repos/google/neural-tangents/releases/30546471", "release_id": 30546471, "date_created": "2020-09-01T23:59:56Z", "date_published": "2020-09-02T00:54:22Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/28987535", "tag": "v0.3.2", "name": "v0.3.2", "author": {"name": "romanngg", "type": "User"}, "description": "* [Arbitrary nonlinearity approximation via Gaussian quadrature (`stax.NumericalActivation`)](https://github.com/google/neural-tangents/commit/841a33a03081680b6f09ebcdcc7b4e7b12378d22)\r\n* [Initial support for Graph Neural Networks (`stax.Aggregate`)](https://github.com/google/neural-tangents/commit/03be2577e82c35a3ddd95ef478976ead722e039b)\r\n* [Further improvements and new features for attention (`stax.GlobalSelfAtttention`)](https://github.com/google/neural-tangents/commit/253ddeaa4c34d75baac129efd9891e9c27efc5ee) from [Infinite attention: NNGP and NTK for deep attention networks](https://arxiv.org/abs/2006.10540)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.2", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.2", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.2", "url": "https://api.github.com/repos/google/neural-tangents/releases/28987535", "release_id": 28987535, "date_created": "2020-07-27T13:26:38Z", "date_published": "2020-07-27T13:51:03Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/28460799", "tag": "v0.3.1", "name": "v0.3.1", "author": {"name": "romanngg", "type": "User"}, "description": "* New nonlinearities:  [`a Erf(b x + c)`](https://github.com/google/neural-tangents/commit/d7fc2dbb6844096fd382be78a0869de653542db0), [`Gelu`](https://github.com/google/neural-tangents/commit/70b983d5cb437c06baf213595da0a1c57f6a9533), [`RBF`](https://github.com/google/neural-tangents/commit/6be0179a252b4ff5b1fe8ba7426804f582e9ce1c)\r\n* [Numpy `1.19` compatibility](https://github.com/google/neural-tangents/commit/11d70e11c3ddcc11feae65f502ac0c42291b52ce)\r\n* Bugfixes and documentation improvements", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.1", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.1", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.1", "url": "https://api.github.com/repos/google/neural-tangents/releases/28460799", "release_id": 28460799, "date_created": "2020-07-10T21:47:56Z", "date_published": "2020-07-11T00:10:04Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/google/neural-tangents/releases/27915958", "tag": "v0.3.0", "name": "v0.3.0", "author": {"name": "romanngg", "type": "User"}, "description": "* [Huge overhaul of `nt.predict` and `nt.utils.empirical` for improved performance and cleaner API](https://github.com/google/neural-tangents/commit/a76bbb494f19af4f8c9c1a1b0904e91b105f769e) - breaking change!\r\n\r\n* [Support for `a sin(b x + c)` activation.](https://github.com/google/neural-tangents/commit/a936d8794c4cefc27359484c01eac77b4a4ddde1)\r\n\r\n* [Much improved and expanded documentation and type annotations](https://neural-tangents.readthedocs.io/en/latest/index.html)", "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.0", "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.0", "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.0", "url": "https://api.github.com/repos/google/neural-tangents/releases/27915958", "release_id": 27915958, "date_created": "2020-06-25T10:54:22Z", "date_published": "2020-06-25T13:07:05Z"}, "confidence": 1, "technique": "GitHub_API"}], "citation": [{"result": {"value": "# Infinite width NTK/NNGP:\n@inproceedings{neuraltangents2020,\n    title={Neural Tangents: Fast and Easy Infinite Neural Networks in Python},\n    author={Roman Novak and Lechao Xiao and Jiri Hron and Jaehoon Lee and Alexander A. Alemi and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Learning Representations},\n    year={2020},\n    pdf={https://arxiv.org/abs/1912.02803},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Finite width, empirical NTK/NNGP:\n@inproceedings{novak2022fast,\n    title={Fast Finite Width Neural Tangent Kernel},\n    author={Roman Novak and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Machine Learning},\n    year={2022},\n    pdf={https://arxiv.org/abs/2206.08720},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Attention and variable-length inputs:\n@inproceedings{hron2020infinite,\n    title={Infinite attention: NNGP and NTK for deep attention networks},\n    author={Jiri Hron and Yasaman Bahri and Jascha Sohl-Dickstein and Roman Novak},\n    booktitle={International Conference on Machine Learning},\n    year={2020},\n    pdf={https://arxiv.org/abs/2006.10540},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Infinite-width \"standard\" parameterization:\n@misc{sohl2020on,\n    title={On the infinite width limit of neural networks with a standard parameterization},\n    author={Jascha Sohl-Dickstein and Roman Novak and Samuel S. Schoenholz and Jaehoon Lee},\n    publisher = {arXiv},\n    year={2020},\n    pdf={https://arxiv.org/abs/2001.07301},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Elementwise nonlinearities and sketching:\n@inproceedings{han2022fast,\n    title={Fast Neural Kernel Embeddings for General Activations},\n    author={Insu Han and Amir Zandieh and Jaehoon Lee and Roman Novak and Lechao Xiao and Amin Karbasi},\n    booktitle = {Advances in Neural Information Processing Systems},\n    year={2022},\n    pdf={https://arxiv.org/abs/2209.04121},\n    url={https://github.com/google/neural-tangents}\n}\n", "type": "File_dump", "format": "bibtex"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/CITATION"}, {"result": {"value": "If you use the code in a publication, please cite our papers:\n\n```bibtex\n# Infinite width NTK/NNGP:\n@inproceedings{neuraltangents2020,\n    title={Neural Tangents: Fast and Easy Infinite Neural Networks in Python},\n    author={Roman Novak and Lechao Xiao and Jiri Hron and Jaehoon Lee and Alexander A. Alemi and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Learning Representations},\n    year={2020},\n    pdf={https://arxiv.org/abs/1912.02803},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Finite width, empirical NTK/NNGP:\n@inproceedings{novak2022fast,\n    title={Fast Finite Width Neural Tangent Kernel},\n    author={Roman Novak and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Machine Learning},\n    year={2022},\n    pdf={https://arxiv.org/abs/2206.08720},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Attention and variable-length inputs:\n@inproceedings{hron2020infinite,\n    title={Infinite attention: NNGP and NTK for deep attention networks},\n    author={Jiri Hron and Yasaman Bahri and Jascha Sohl-Dickstein and Roman Novak},\n    booktitle={International Conference on Machine Learning},\n    year={2020},\n    pdf={https://arxiv.org/abs/2006.10540},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Infinite-width \"standard\" parameterization:\n@misc{sohl2020on,\n    title={On the infinite width limit of neural networks with a standard parameterization},\n    author={Jascha Sohl-Dickstein and Roman Novak and Samuel S. Schoenholz and Jaehoon Lee},\n    publisher = {arXiv},\n    year={2020},\n    pdf={https://arxiv.org/abs/2001.07301},\n    url={https://github.com/google/neural-tangents}\n}\n\n# Elementwise nonlinearities and sketching:\n@inproceedings{han2022fast,\n    title={Fast Neural Kernel Embeddings for General Activations},\n    author={Insu Han and Amir Zandieh and Jaehoon Lee and Roman Novak and Lechao Xiao and Amin Karbasi},\n    booktitle = {Advances in Neural Information Processing Systems},\n    year={2022},\n    pdf={https://arxiv.org/abs/2209.04121},\n    url={https://github.com/google/neural-tangents}\n}\n```\n", "type": "Text_excerpt", "original_header": "Citation", "parent_header": ["Neural Tangents"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"value": "@inproceedings{neuraltangents2020,\n    title={Neural Tangents: Fast and Easy Infinite Neural Networks in Python},\n    author={Roman Novak and Lechao Xiao and Jiri Hron and Jaehoon Lee and Alexander A. Alemi and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Learning Representations},\n    year={2020},\n    pdf={https://arxiv.org/abs/1912.02803},\n    url={https://github.com/google/neural-tangents}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"value": "@inproceedings{novak2022fast,\n    title={Fast Finite Width Neural Tangent Kernel},\n    author={Roman Novak and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Machine Learning},\n    year={2022},\n    pdf={https://arxiv.org/abs/2206.08720},\n    url={https://github.com/google/neural-tangents}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"value": "@inproceedings{hron2020infinite,\n    title={Infinite attention: NNGP and NTK for deep attention networks},\n    author={Jiri Hron and Yasaman Bahri and Jascha Sohl-Dickstein and Roman Novak},\n    booktitle={International Conference on Machine Learning},\n    year={2020},\n    pdf={https://arxiv.org/abs/2006.10540},\n    url={https://github.com/google/neural-tangents}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"value": "@misc{sohl2020on,\n    title={On the infinite width limit of neural networks with a standard parameterization},\n    author={Jascha Sohl-Dickstein and Roman Novak and Samuel S. Schoenholz and Jaehoon Lee},\n    publisher = {arXiv},\n    year={2020},\n    pdf={https://arxiv.org/abs/2001.07301},\n    url={https://github.com/google/neural-tangents}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"value": "@inproceedings{han2022fast,\n    title={Fast Neural Kernel Embeddings for General Activations},\n    author={Insu Han and Amir Zandieh and Jaehoon Lee and Roman Novak and Lechao Xiao and Amin Karbasi},\n    booktitle = {Advances in Neural Information Processing Systems},\n    year={2022},\n    pdf={https://arxiv.org/abs/2209.04121},\n    url={https://github.com/google/neural-tangents}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributing_guidelines": [{"result": {"value": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google.com/conduct/).\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/CONTRIBUTING.md"}], "executable_example": [{"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/Disentangling_Trainability_and_Generalization.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/Disentangling_Trainability_and_Generalization.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/learning_curves.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/learning_curves.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/weight_space_linearization.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/weight_space_linearization.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/neural_tangents_cookbook.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/neural_tangents_cookbook.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/elementwise.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/elementwise.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/myrtle_kernel_with_neural_tangents.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/myrtle_kernel_with_neural_tangents.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/phase_diagram.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/phase_diagram.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/empirical_ntk_fcn.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/empirical_ntk_fcn.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/function_space_linearization.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/function_space_linearization.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/empirical_ntk_resnet.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/empirical_ntk_resnet.ipynb"}, {"result": {"value": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/experimental/empirical_ntk_resnet_tf.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/experimental/empirical_ntk_resnet_tf.ipynb"}], "installation": [{"result": {"value": "To use GPU, first follow [JAX's](https://www.github.com/google/jax/) GPU installation instructions. Otherwise, install JAX on CPU by running\n\n```\npip install jax jaxlib --upgrade\n```\n\nOnce JAX is installed install Neural Tangents by running\n\n```\npip install neural-tangents\n```\nor, to use the bleeding-edge version from GitHub source,\n\n```\ngit clone https://github.com/google/neural-tangents; cd neural-tangents\npip install -e .\n```\n\nYou can now run the examples and tests by calling:\n\n```\npip install .[testing]\nset -e; for f in examples/*.py; do python $f; done  # Run examples\nset -e; for f in tests/*.py; do python $f; done  # Run tests\n```\n\n", "type": "Text_excerpt", "original_header": "Installation", "parent_header": ["Neural Tangents"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "\nTested using version `0.2.1`. All GPU results are per single accelerator.\nNote that runtime is proportional to the depth of your network.\nIf your performance differs significantly,\nplease [file a bug](https://github.com/google/neural-tangents/issues/new)! \n", "original_header": "CNN without pooling"}, "confidence": 0.8170930502932383, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "usage": [{"result": {"value": "```python\nimport jax.numpy as jnp\nimport neural_tangents as nt\n\ndef apply_fn(params, x):\n  W, b = params\n  return jnp.dot(x, W) + b\n\nW_0 = jnp.array([[1., 0.], [0., 1.]])\nb_0 = jnp.zeros((2,))\n\napply_fn_lin = nt.linearize(apply_fn, (W_0, b_0))\nW = jnp.array([[1.5, 0.2], [0.1, 0.9]])\nb = b_0 + 0.2\n\nx = jnp.array([[0.3, 0.2], [0.4, 0.5], [1.2, 0.2]])\nlogits = apply_fn_lin((W, b), x)  # (3, 2) jnp.ndarray\n```\n", "type": "Text_excerpt", "original_header": "Example:", "parent_header": ["Neural Tangents", "Training dynamics of wide but finite networks", "Function space:"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "#### Example:\n```python\nimport jax.random as random\nimport jax.numpy as jnp\nimport neural_tangents as nt\n\n\ndef apply_fn(params, x):\n  W, b = params\n  return jnp.dot(x, W) + b\n\n\nW_0 = jnp.array([[1., 0.], [0., 1.]])\nb_0 = jnp.zeros((2,))\nparams = (W_0, b_0)\n\nkey1, key2 = random.split(random.PRNGKey(1), 2)\nx_train = random.normal(key1, (3, 2))\nx_test = random.normal(key2, (4, 2))\ny_train = random.uniform(key1, shape=(3, 2))\n\nkernel_fn = nt.empirical_kernel_fn(apply_fn)\nntk_train_train = kernel_fn(x_train, None, 'ntk', params)\nntk_test_train = kernel_fn(x_test, x_train, 'ntk', params)\nmse_predictor = nt.predict.gradient_descent_mse(ntk_train_train, y_train)\n\nt = 5.\ny_train_0 = apply_fn(params, x_train)\ny_test_0 = apply_fn(params, x_test)\ny_train_t, y_test_t = mse_predictor(t, y_train_0, y_test_0, ntk_test_train)\n# (3, 2) and (4, 2) jnp.ndarray train and test outputs after `t` units of time\n# training with continuous gradient descent\n```\n \n", "original_header": "Function space:"}, "confidence": 0.9386780374801497, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "full_title": [{"result": {"type": "String", "value": "Stand with Ukraine! \ud83c\uddfa\ud83c\udde6"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "documentation": [{"result": {"type": "Url", "value": "https://neural-tangents.readthedocs.io/", "format": "readthedocs"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://github.com/google/neural-tangents/wiki", "format": "wiki"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "package_distribution": [{"result": {"type": "Url", "value": "https://pypi.org/project/neural-tangents/"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/2003.02237"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1912.02803"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/2206.08720"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1902.06720"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/2006.10540"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1605.07146"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/1806.07572"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/2001.07301"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/1806.07572"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/2003.02237"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}, {"result": {"type": "Url", "value": "https://arxiv.org/abs/2209.04121"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/google/neural-tangents/main/README.md"}]}