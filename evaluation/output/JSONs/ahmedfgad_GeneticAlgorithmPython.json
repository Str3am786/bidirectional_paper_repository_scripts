{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:15:47"}, "code_repository": [{"result": {"value": "https://github.com/ahmedfgad/GeneticAlgorithmPython", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "ahmedfgad", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2018-12-11T11:19:33Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-12-21T10:06:26Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/bsd-3-clause", "type": "License", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "url": "https://api.github.com/licenses/bsd-3-clause", "spdx_id": "BSD-3-Clause"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Copyright GeneticAlgorithmPython Contributors\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/LICENSE"}], "description": [{"result": {"value": "Source code of PyGAD, a Python 3 library for building the genetic algorithm and training machine learning algorithms (Keras & PyTorch).", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Get started with the genetic algorithm by reading the tutorial titled [**Introduction to Optimization with Genetic Algorithm**](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad) which is available at these links:\n\n* [LinkedIn](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad)\n* [Towards Data Science](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)\n* [KDnuggets](https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html)\n\n[![Introduction to Genetic Algorithm](https://user-images.githubusercontent.com/16560492/82078259-26252d00-96e1-11ea-9a02-52a99e1054b9.jpg)](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad)\n", "type": "Text_excerpt", "original_header": "Tutorial: Introduction to Genetic Algorithm", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "[PyGAD](https://pypi.org/project/pygad) is an open-source easy-to-use Python 3 library for building the genetic algorithm and optimizing machine learning algorithms. It supports Keras and PyTorch. PyGAD supports optimizing both single-objective and multi-objective problems. \nCheck documentation of the [PyGAD](https://pygad.readthedocs.io/en/latest). \n[PyGAD](https://pypi.org/project/pygad) supports different types of crossover, mutation, and parent selection. [PyGAD](https://pypi.org/project/pygad) allows different types of problems to be optimized using the genetic algorithm by customizing the fitness function.  \nThe library is under active development and more features are added regularly. If you want a feature to be supported, please check the **Contact Us** section to send a request.\n \n", "original_header": "PyGAD:  Genetic Algorithm in Python"}, "confidence": 0.9379849698207349, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "The source code of the PyGAD' modules is found in the following GitHub projects: \nThe documentation of PyGAD is available at [Read The Docs](https://pygad.readthedocs.io/) https://pygad.readthedocs.io.\n \n", "original_header": "PyGAD Source Code"}, "confidence": 0.901883636418644, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "The next figure lists the different stages in the lifecycle of an instance of the `pygad.GA` class. Note that PyGAD stops when either all generations are completed or when the function passed to the `on_generation` parameter returns the string `stop`. \n", "original_header": "Life Cycle of PyGAD"}, "confidence": 0.9855421386553792, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "There are different resources that can be used to get started with the genetic algorithm and building it in Python. \n \n", "original_header": "For More Information"}, "confidence": 0.9627721920995013, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "You can also check my book cited as [**Ahmed Fawzy Gad 'Practical Computer Vision Applications Using Deep Learning with CNNs'. Dec. 2018, Apress, 978-1-4842-4167-7**](https://www.amazon.com/Practical-Computer-Vision-Applications-Learning/dp/1484241665) which discusses neural networks, convolutional neural networks, deep learning, genetic algorithm, and more. \n", "original_header": "Book: Practical Computer Vision Applications Using Deep Learning with CNNs"}, "confidence": 0.9156269457663441, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "name": [{"result": {"value": "GeneticAlgorithmPython", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "ahmedfgad/GeneticAlgorithmPython", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 1578, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "deep-learning, evolutionary-algorithms, genetic-algorithm, machine-learning, neural-networks, numpy, optimization, pygad, pygad-documentation, python", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 484, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 993199}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Cython", "name": "Cython", "type": "Programming_language", "size": 6994}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/120363328", "tag": "3.2.0", "name": "PyGAD-3.2.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. A new module `pygad.utils.nsga2` is created that has the `NSGA2` class that includes the functionalities of NSGA-II. The class has these methods: 1) `get_non_dominated_set()` 2) `non_dominated_sorting()` 3) `crowding_distance()` 4) `sort_solutions_nsga2()`. Check [[this section](https://pygad.readthedocs.io/en/latest/pygad_more.html#multi-objective-optimization)](https://pygad.readthedocs.io/en/latest/pygad_more.html#multi-objective-optimization) for an example. \r\n2. Support of multi-objective optimization using Non-Dominated Sorting Genetic Algorithm II (NSGA-II) using the `NSGA2` class in the `pygad.utils.nsga2` module. Just return a `list`, `tuple`, or `numpy.ndarray` from the fitness function and the library will consider the problem as multi-objective optimization. All the objectives are expected to be maximization. Check [[this section](https://pygad.readthedocs.io/en/latest/pygad_more.html#multi-objective-optimization)](https://pygad.readthedocs.io/en/latest/pygad_more.html#multi-objective-optimization) for an example. \r\n3. The parent selection methods and adaptive mutation are edited to support multi-objective optimization.\r\n4. Two new NSGA-II parent selection methods are supported in the `pygad.utils.parent_selection` module: 1) Tournament selection for NSGA-II 2) NSGA-II selection.\r\n5. The `plot_fitness()` method in the `pygad.plot` module has a new optional parameter named `label` to accept the label of the plots. This is only used for multi-objective problems. Otherwise, it is ignored. It defaults to `None` and accepts a `list`, `tuple`, or `numpy.ndarray`. The labels are used in a legend inside the plot.\r\n6. The default color in the methods of the `pygad.plot` module is changed to the greenish `#64f20c` color.\r\n7. A new instance attribute named `pareto_fronts` added to the `pygad.GA` instances that holds the pareto fronts when solving a multi-objective problem. \r\n8. The `gene_type` accepts a `list`, `tuple`, or `numpy.ndarray` for integer data types given that the precision is set to `None` (e.g. `gene_type=[float, [int, None]]`).\r\n9. In the `cal_pop_fitness()` method, the fitness value is re-used if `save_best_solutions=True` and the solution is found in the `best_solutions` attribute. These parameters also can help re-using the fitness of a solution instead of calling the fitness function: `keep_elitism`, `keep_parents`, and `save_solutions`.\r\n10. The value `99999999999` is replaced by `float('inf')` in the 2 methods `wheel_cumulative_probs()` and `stochastic_universal_selection()` inside the `pygad.utils.parent_selection.ParentSelection` class.\r\n11. The `plot_result()` method in the `pygad.visualize.plot.Plot` class is removed. Instead, please use the `plot_fitness()` if you did not upgrade yet.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/3.2.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/3.2.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/3.2.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/120363328", "release_id": 120363328, "date_created": "2023-09-08T00:33:25Z", "date_published": "2023-09-08T00:47:14Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/109280405", "tag": "3.1.0", "name": "PyGAD-3.1.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Release Date 20 June 2023\r\n\r\n1. Fix a bug when the initial population has duplciate genes if a nested gene space is used.\r\n2. The `gene_space` parameter can no longer be assigned a tuple.\r\n3. Fix a bug when the `gene_space` parameter has a member of type `tuple`.\r\n4. A new instance attribute called `gene_space_unpacked` which has the unpacked `gene_space`. It is used to solve duplicates. For infinite ranges in the `gene_space`, they are unpacked to a limited number of values (e.g. 100).\r\n5. Bug fixes when creating the initial population using `gene_space` attribute.\r\n6. When a `dict` is used with the `gene_space` attribute, the new gene value was calculated by summing 2 values: 1) the value sampled from the `dict` 2) a random value returned from the random mutation range defined by the 2 parameters `random_mutation_min_val` and `random_mutation_max_val`. This might cause the gene value to exceed the range limit defined in the `gene_space`. To respect the `gene_space` range, this release only returns the value from the `dict` without summing it to a random value.\r\n7. Formatting the strings using f-string instead of the `format()` method. https://github.com/ahmedfgad/GeneticAlgorithmPython/pull/189\r\n8. In the `__init__()` of the `pygad.GA` class, the logged error messages are handled using a `try-except` block instead of repeating the `logger.error()` command. https://github.com/ahmedfgad/GeneticAlgorithmPython/pull/189\r\n9. A new class named `CustomLogger` is created in the `pygad.cnn` module to create a default logger using the `logging` module assigned to the `logger` attribute. This class is extended in all other classes in the module. The constructors of these classes have a new parameter named `logger` which defaults to `None`. If no logger is passed, then the default logger in the `CustomLogger` class is used.\r\n10. Except for the `pygad.nn` module, the `print()` function in all other modules are replaced by the `logging` module to log messages.\r\n11. The callback functions/methods `on_fitness()`, `on_parents()`, `on_crossover()`, and `on_mutation()` can return values. These returned values override the corresponding properties. The output of `on_fitness()` overrides the population fitness. The `on_parents()` function/method must return 2 values representing the parents and their indices. The output of `on_crossover()` overrides the crossover offspring. The output of `on_mutation()` overrides the mutation offspring.\r\n12. Fix a bug when adaptive mutation is used while `fitness_batch_size`>1. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/195\r\n13. When `allow_duplicate_genes=False` and a user-defined `gene_space` is used, it sometimes happen that there is no room to solve the duplicates between the 2 genes by simply replacing the value of one gene by another gene. This release tries to solve such duplicates by looking for a third gene that will help in solving the duplicates. These examples explain how it works. Check [[this section](https://pygad.readthedocs.io/en/latest/pygad.html#prevent-duplicates-in-gene-values)](https://pygad.readthedocs.io/en/latest/pygad.html#prevent-duplicates-in-gene-values) for more information.\r\n14. Use probabilities to select parents using the rank parent selection method. https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/205\r\n15. The 2 parameters `random_mutation_min_val` and `random_mutation_max_val` can accept iterables (list/tuple/numpy.ndarray) with length equal to the number of genes. This enables customizing the mutation range for each individual gene.  https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/198\r\n16. The 2 parameters `init_range_low` and `init_range_high` can accept iterables (list/tuple/numpy.ndarray) with length equal to the number of genes. This enables customizing the initial range for each individual gene when creating the initial population. \r\n17. The `data` parameter in the `predict()` function of the `pygad.kerasga` module can be assigned a data generator. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/115 https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/207\r\n18. The `predict()` function of the `pygad.kerasga` module accepts 3 optional parameters: 1) `batch_size=None`, `verbose=0`, and `steps=None`. Check documentation of the [[Keras Model.predict()](https://keras.io/api/models/model_training_apis)](https://keras.io/api/models/model_training_apis) method for more information. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/207\r\n19. The documentation is updated to explain how mutation works when `gene_space` is used with `int` or `float` data types. Check [[this section](https://pygad.readthedocs.io/en/latest/pygad.html#limit-the-gene-value-range-using-the-gene-space-parameter)](https://pygad.readthedocs.io/en/latest/pygad.html#limit-the-gene-value-range-using-the-gene-space-parameter). https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/198", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/3.1.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/3.1.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/3.1.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/109280405", "release_id": 109280405, "date_created": "2023-06-20T19:27:49Z", "date_published": "2023-06-20T19:32:17Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/100202373", "tag": "3.0.1", "name": "PyGAD-3.0.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Fix an issue with passing user-defined function/method for parent selection. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/179", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/3.0.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/3.0.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/3.0.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/100202373", "release_id": 100202373, "date_created": "2023-04-20T13:35:05Z", "date_published": "2023-04-20T13:35:43Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/98630872", "tag": "3.0.0", "name": "PyGAD-3.0.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "**This release has a major change where the fitness function accepts a mandatory parameter referring to the instance of the `pygad.GA` class.**\r\n\r\nThis is the release notes:\r\n1. The structure of the library is changed and some methods defined in the `pygad.py` module are moved to the `pygad.utils`, `pygad.helper`, and `pygad.visualize` submodules.\r\n  2. The `pygad.utils.parent_selection` module has a class named `ParentSelection` where all the parent selection operators exist. The `pygad.GA` class extends this class.\r\n  3. The `pygad.utils.crossover` module has a class named `Crossover` where all the crossover operators exist. The `pygad.GA` class extends this class.\r\n  4. The `pygad.utils.mutation` module has a class named `Mutation` where all the mutation operators exist. The `pygad.GA` class extends this class.\r\n  5. The `pygad.helper.unique` module has a class named `Unique` some helper methods exist to solve duplicate genes and make sure every gene is unique. The `pygad.GA` class extends this class.\r\n  6. The `pygad.visualize.plot` module has a class named `Plot` where all the methods that create plots exist. The `pygad.GA` class extends this class.\r\n\r\n```python\r\n...\r\nclass GA(utils.parent_selection.ParentSelection, \r\n         utils.crossover.Crossover, \r\n         utils.mutation.Mutation, \r\n         helper.unique.Unique,\r\n         visualize.plot.Plot):\r\n...\r\n```\r\n\r\n2. Support of using the `logging` module to log the outputs to both the console and text file instead of using the `print()` function. This is by assigning the `logging.Logger` to the new `logger` parameter. Check the [[Logging Outputs](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#logging-outputs)](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#logging-outputs) for more information.\r\n3. A new instance attribute called `logger` to save the logger. \r\n4. The function/method passed to the `fitness_func` parameter accepts a new parameter that refers to the instance of the `pygad.GA` class. Check this for an example: [[Use Functions and Methods to Build Fitness Function and Callbacks](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#use-functions-and-methods-to-build-fitness-and-callbacks)](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#use-functions-and-methods-to-build-fitness-and-callbacks). https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/163\r\n5. Update the documentation to include an example of using functions and methods to calculate the fitness and build callbacks. Check this for more details: [[Use Functions and Methods to Build Fitness Function and Callbacks](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#use-functions-and-methods-to-build-fitness-and-callbacks)](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#use-functions-and-methods-to-build-fitness-and-callbacks). https://github.com/ahmedfgad/GeneticAlgorithmPython/pull/92#issuecomment-1443635003\r\n6. Validate the value passed to the `initial_population` parameter.\r\n7. Validate the type and length of the `pop_fitness` parameter of the `best_solution()` method.\r\n8. Some edits in the documentation. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/106\r\n9. Fix an issue when building the initial population as (some) genes have their value taken from the mutation range (defined by the parameters `random_mutation_min_val` and `random_mutation_max_val`) instead of using the parameters `init_range_low` and `init_range_high`.\r\n10. The `summary()` method returns the summary as a single-line string. Just log/print the returned string it to see it properly.\r\n11. The `callback_generation` parameter is removed. Use the `on_generation` parameter instead.\r\n12. There was an issue when using the `parallel_processing` parameter with Keras and PyTorch. As Keras/PyTorch are not thread-safe, the `predict()` method gives incorrect and weird results when more than 1 thread is used. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/145 https://github.com/ahmedfgad/TorchGA/issues/5 https://github.com/ahmedfgad/KerasGA/issues/6. Thanks to this [[StackOverflow answer](https://stackoverflow.com/a/75606666/5426539)](https://stackoverflow.com/a/75606666/5426539).\r\n13. Replace `numpy.float` by `float` in the 2 parent selection operators roulette wheel and stochastic universal. https://github.com/ahmedfgad/GeneticAlgorithmPython/pull/168", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/3.0.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/3.0.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/3.0.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/98630872", "release_id": 98630872, "date_created": "2023-04-08T19:16:22Z", "date_published": "2023-04-08T19:19:32Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/93441665", "tag": "2.19.2", "name": "PyGAD-2.19.2", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. Fix an issue when paralell processing was used where the elitism solutions' fitness values are not re-used. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/160#issuecomment-1441718184", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.19.2", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.19.2", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.19.2", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/93441665", "release_id": 93441665, "date_created": "2023-02-23T13:36:28Z", "date_published": "2023-02-23T13:37:57Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/93310764", "tag": "2.19.1", "name": "PyGAD-2.19.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. A new `summary()` method is supported to return a Keras-like summary of the PyGAD lifecycle.\r\n2. A new optional parameter called `fitness_batch_size` is supported to calculate the fitness function in batches. If it is assigned the value `1` or `None` (default), then the normal flow is used where the fitness function is called for each individual solution. If the `fitness_batch_size` parameter is assigned a value satisfying this condition `1 < fitness_batch_size <= sol_per_pop`, then the solutions are grouped into batches of size `fitness_batch_size` and the fitness function is called once for each batch. In this case, the fitness function must return a list/tuple/numpy.ndarray with a length equal to the number of solutions passed. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/136.\r\n3. The `cloudpickle` library (https://github.com/cloudpipe/cloudpickle) is used instead of the `pickle` library to pickle the `pygad.GA` objects. This solves the issue of having to redefine the functions (e.g. fitness function). The `cloudpickle` library is added as a dependancy in the `requirements.txt` file. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/159\r\n4. Support of assigning methods to these parameters: `fitness_func`, `crossover_type`, `mutation_type`, `parent_selection_type`, `on_start`, `on_fitness`, `on_parents`, `on_crossover`, `on_mutation`, `on_generation`, and `on_stop`. https://github.com/ahmedfgad/GeneticAlgorithmPython/pull/92 https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/138\r\n5. Validating the output of the parent selection, crossover, and mutation functions.\r\n6. The built-in parent selection operators return the parent's indices as a NumPy array.\r\n7. The outputs of the parent selection, crossover, and mutation operators must be NumPy arrays.\r\n8. Fix an issue when `allow_duplicate_genes=True`. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/39\r\n9. Fix an issue creating scatter plots of the solutions' fitness.\r\n10. Sampling from a `set()` is no longer supported in Python 3.11. Instead, sampling happens from a `list()`. Thanks `Marco Brenna` for pointing to this issue.\r\n11. The lifecycle is updated to reflect that the new population's fitness is calculated at the end of the lifecycle not at the beginning. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/154#issuecomment-1438739483\r\n12. There was an issue when `save_solutions=True` that causes the fitness function to be called for solutions already explored and have their fitness pre-calculated. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/160\r\n13. A new instance attribute named `last_generation_elitism_indices` added to hold the indices of the selected elitism. This attribute helps to re-use the fitness of the elitism instead of calling the fitness function.\r\n14. Fewer calls to the `best_solution()` method which in turns saves some calls to the fitness function.\r\n15. Some updates in the documentation to give more details about the `cal_pop_fitness()` method. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/79#issuecomment-1439605442", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.19.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.19.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.19.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/93310764", "release_id": 93310764, "date_created": "2023-02-22T15:20:14Z", "date_published": "2023-02-22T15:21:53Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/92421055", "tag": "2.18.3", "name": "PyGAD-2.18.3", "author": {"name": "ahmedfgad", "type": "User"}, "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.18.3", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.18.3", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.18.3", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/92421055", "release_id": 92421055, "date_created": "2023-02-14T20:38:25Z", "date_published": "2023-02-14T20:39:51Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/92412382", "tag": "2.18.2", "name": "PyGAD-2.18.2", "author": {"name": "ahmedfgad", "type": "User"}, "description": "PyGAD 2.18.2 release notes\r\n1. Remove `numpy.int` and `numpy.float` from the list of supported data types. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/151 https://github.com/ahmedfgad/GeneticAlgorithmPython/pull/152\r\n2. Call the `on_crossover()` callback function even if `crossover_type` is `None`. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/138\r\n3. Call the `on_mutation()` callback function even if `mutation_type` is `None`. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/138", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.18.2", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.18.2", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.18.2", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/92412382", "release_id": 92412382, "date_created": "2023-02-14T18:59:47Z", "date_published": "2023-02-14T19:25:36Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/77581749", "tag": "2.18.1", "name": "PyGAD-2.18.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "PyGAD 2.18.1\r\n1. A big fix when `keep_elitism` is used. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/132", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.18.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.18.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.18.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/77581749", "release_id": 77581749, "date_created": "2022-09-19T19:06:36Z", "date_published": "2022-09-19T19:08:15Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/76676208", "tag": "2.18.0", "name": "PyGAD-2.18.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. Raise an exception if the sum of fitness values is zero while either roulette wheel or stochastic universal parent selection is used. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/129\r\n2. Initialize the value of the `run_completed` property to `False`. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/122\r\n3. The values of these properties are no longer reset with each call to the `run()` method `self.best_solutions, self.best_solutions_fitness, self.solutions, self.solutions_fitness`: https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/123. Now, the user can have the flexibility of calling the `run()` method more than once while extending the data collected after each generation. Another advantage happens when the instance is loaded and the `run()` method is called, as the old fitness value are shown on the graph alongside with the new fitness values. Read more in this section: [[Continue without Loosing Progress](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#continue-without-loosing-progress)](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#continue-without-loosing-progress)\r\n4. Thanks [[Prof. Fernando Jim\u00e9nez Barrionuevo](http://webs.um.es/fernan)](http://webs.um.es/fernan) (Dept. of Information and Communications Engineering, University of Murcia, Murcia, Spain) for editing this [[comment](https://github.com/ahmedfgad/GeneticAlgorithmPython/blob/5315bbec02777df96ce1ec665c94dece81c440f4/pygad.py#L73)](https://github.com/ahmedfgad/GeneticAlgorithmPython/blob/5315bbec02777df96ce1ec665c94dece81c440f4/pygad.py#L73) in the code. https://github.com/ahmedfgad/GeneticAlgorithmPython/commit/5315bbec02777df96ce1ec665c94dece81c440f4\r\n5. A bug fixed when `crossover_type=None`.\r\n6. Support of elitism selection through a new parameter named `keep_elitism`. It defaults to 1 which means for each generation keep only the best solution in the next generation. If assigned 0, then it has no effect. Read more in this section: [[Elitism Selection](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#elitism-selection)](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#elitism-selection). https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/74\r\n7. A new instance attribute named `last_generation_elitism` added to hold the elitism in the last generation.\r\n8. A new parameter called `random_seed` added to accept a seed for the random function generators. Credit to this issue https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/70 and [[Prof. Fernando Jim\u00e9nez Barrionuevo](http://webs.um.es/fernan)](http://webs.um.es/fernan). Read more in this section: [[Random Seed](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#random-seed)](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#random-seed).\r\n9. Editing the `pygad.TorchGA` module to make sure the tensor data is moved from GPU to CPU. Thanks to Rasmus Johansson for opening this pull request: https://github.com/ahmedfgad/TorchGA/pull/2", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.18.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.18.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.18.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/76676208", "release_id": 76676208, "date_created": "2022-09-09T05:38:58Z", "date_published": "2022-09-09T05:39:53Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/71533758", "tag": "2.17.0", "name": "PyGAD-2.17.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "## PyGAD 2.17.0\r\n\r\nRelease Date: 8 July 2022\r\n\r\n1. An issue is solved when the `gene_space` parameter is given a fixed value. e.g. gene_space=[range(5), 4]. The second gene's value is static (4) which causes an exception.\r\n2. Fixed the issue where the `allow_duplicate_genes` parameter did not work when mutation is disabled (i.e. `mutation_type=None`). This is by checking for duplicates after crossover directly. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/39\r\n3. Solve an issue in the `tournament_selection()` method as the indices of the selected parents were incorrect. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/89\r\n4. Reuse the fitness values of the previously explored solutions rather than recalculating them. This feature only works if `save_solutions=True`.\r\n5. Parallel processing is supported. This is by the introduction of a new parameter named `parallel_processing` in the constructor of the `pygad.GA` class. Thanks to [[@windowshopr](https://github.com/windowshopr)](https://github.com/windowshopr) for opening the issue [[#78](https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/78)](https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/78) at GitHub. Check the [[Parallel Processing in PyGAD](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#parallel-processing-in-pygad)](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#parallel-processing-in-pygad) section for more information and examples.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.17.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.17.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.17.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/71533758", "release_id": 71533758, "date_created": "2022-07-08T03:55:54Z", "date_published": "2022-07-08T04:10:04Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/58562599", "tag": "2.16.3", "name": "PyGAD-2.16.3", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Changes in PyGAD 2.16.3\r\n1. A new instance attribute called `previous_generation_fitness` added in the `pygad.GA` class. It holds the fitness values of one generation before the fitness values saved in the `last_generation_fitness`.\r\n2. Issue in the `cal_pop_fitness()` method in getting the correct indices of the previous parents. This is solved by using the previous generation's fitness saved in the new attribute `previous_generation_fitness` to return the parents' fitness values. Thanks to Tobias Tischhauser (M.Sc. - [[Mitarbeiter Institut EMS, Departement Technik, OST \u2013 Ostschweizer Fachhochschule, Switzerland](https://www.ost.ch/de/forschung-und-dienstleistungen/technik/systemtechnik/ems/team)](https://www.ost.ch/de/forschung-und-dienstleistungen/technik/systemtechnik/ems/team)) for detecting this bug.\r\n3. Validate the fitness value returned from the fitness function. An exception is raised if something is wrong. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/67", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.16.3", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.16.3", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.16.3", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/58562599", "release_id": 58562599, "date_created": "2022-02-03T01:34:29Z", "date_published": "2022-02-03T01:36:10Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/50437937", "tag": "2.16.1", "name": "PyGAD-2.16.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. Reuse the fitness of previously explored solutions rather than recalculating them. This feature only works if `save_solutions=True`.\r\n2. The user can use the `tqdm` library to show a progress bar. https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/50\r\n\r\n```python\r\nimport pygad\r\nimport numpy\r\nimport tqdm\r\n\r\nequation_inputs = [4,-2,3.5]\r\ndesired_output = 44\r\n\r\ndef fitness_func(solution, solution_idx):\r\n    output = numpy.sum(solution * equation_inputs)\r\n    fitness = 1.0 / (numpy.abs(output - desired_output) + 0.000001)\r\n    return fitness\r\n\r\nnum_generations = 10000\r\nwith tqdm.tqdm(total=num_generations) as pbar:\r\n    ga_instance = pygad.GA(num_generations=num_generations,\r\n                           sol_per_pop=5,\r\n                           num_parents_mating=2,\r\n                           num_genes=len(equation_inputs),\r\n                           fitness_func=fitness_func,\r\n                           on_generation=lambda _: pbar.update(1))\r\n    \r\n    ga_instance.run()\r\n\r\nga_instance.plot_result()\r\n```\r\n\r\n3. Solved the issue of unequal length between the `solutions` and `solutions_fitness` when the `save_solutions` parameter is set to `True`. Now, the fitness of the last population is appended to the `solutions_fitness` array. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/64\r\n4. There was an issue of getting the length of these 4 variables (`solutions`, `solutions_fitness`, `best_solutions`, and `best_solutions_fitness`) doubled after each call of the `run()` method. This is solved by resetting these variables at the beginning of the `run()` method. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/62\r\n5. Bug fixes when adaptive mutation is used (`mutation_type=\"adaptive\"`). https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/65", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.16.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.16.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.16.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/50437937", "release_id": 50437937, "date_created": "2021-09-29T01:45:01Z", "date_published": "2021-09-29T01:46:30Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44913066", "tag": "2.16.0", "name": "PyGAD-2.16.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "A user-defined function can be passed to the mutation_type, crossover_type, and parent_selection_type parameters in the pygad.GA class to create a custom mutation, crossover, and parent selection operators. Check the User-Defined Crossover, Mutation, and Parent Selection Operators section in the documentation: https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#user-defined-crossover-mutation-and-parent-selection-operators\r\nThe example_custom_operators.py script gives an example of building and using custom functions for the 3 operators.\r\nhttps://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/50", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.16.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.16.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.16.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44913066", "release_id": 44913066, "date_created": "2021-06-20T02:17:27Z", "date_published": "2021-06-20T02:23:03Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44844268", "tag": "2.15.1", "name": "PyGAD-2.15.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Fix a bug when `keep_parents` is set to a positive integer. https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/49", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.15.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.15.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.15.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44844268", "release_id": 44844268, "date_created": "2021-06-18T06:16:34Z", "date_published": "2021-06-18T06:17:09Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44840240", "tag": "2.15.0", "name": "PyGAD-2.15.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. Control the precision of all genes/individual genes. Thanks to [Rainer](https://github.com/rengel8) for asking about this feature: https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/43#discussioncomment-763452\r\n2. A new attribute named `last_generation_parents_indices` holds the indices of the selected parents in the last generation.\r\n3. In adaptive mutation, no need to recalculate the fitness values of the parents selected in the last generation as these values can be returned based on the `last_generation_fitness` and `last_generation_parents_indices` attributes. This speeds-up the adaptive mutation.\r\n4. When a sublist has a value of `None` in the `gene_space` parameter (e.g. `gene_space=[[1, 2, 3], [5, 6, None]]`), then its value will be randomly generated for each solution rather than being generated once for all solutions. Previously, a value of `None` in a sublist of the `gene_space` parameter was identical across all solutions.\r\n5. The dictionary assigned to the `gene_space` parameter itself or one of its elements has a new key called `\"step\"` to specify the step of moving from the start to the end of the range specified by the 2 existing keys `\"low\"` and `\"high\"`.  An example is `{\"low\": 0, \"high\": 30, \"step\": 2}` to have only even values for the gene(s) starting from 0 to 30. For more information, check the [More about the `gene_space` Parameter](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#more-about-the-gene-space-parameter) section. https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/48\r\n6. A new function called `predict()` is added in both the `pygad.kerasga` and `pygad.torchga` modules to make predictions. This makes it easier than using custom code each time a prediction is to be made.\r\n7. A new parameter called `stop_criteria` allows the user to specify one or more stop criteria to stop the evolution based on some conditions. Each criterion is passed as `str` which has a stop word. The current 2 supported words are `reach` and `saturate`. `reach` stops the `run()` method if the fitness value is equal to or greater than a given fitness value. An example for `reach` is `\"reach_40\"` which stops the evolution if the fitness is >= 40. `saturate` means stop the evolution if the fitness saturates for a given number of consecutive generations. An example for `saturate` is `\"saturate_7\"` which means stop the `run()` method if the fitness does not change for 7 consecutive generations. Thanks to [Rainer](https://github.com/rengel8) for asking about this feature: https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/44\r\n8. A new bool parameter, defaults to `False`, named `save_solutions` is added to the constructor of the `pygad.GA` class. If `True`, then all solutions in each generation are appended into an attribute called `solutions` which is NumPy array.\r\n9. The `plot_result()` method is renamed to `plot_fitness()`. The users should migrate to the new name as the old name will be removed in the future.\r\n10. Four new optional parameters are added to the `plot_fitness()` function in the `pygad.GA` class which are `font_size=14`, `save_dir=None`, `color=\"#3870FF\"`, and `plot_type=\"plot\"`. Use `font_size` to change the font of the plot title and labels. `save_dir` accepts the directory to which the figure is saved. It defaults to `None` which means do not save the figure. `color` changes the color of the plot. `plot_type` changes the plot type which can be either `\"plot\"` (default), `\"scatter\"`, or `\"bar\"`. https://github.com/ahmedfgad/GeneticAlgorithmPython/pull/47\r\n11. The default value of the `title` parameter in the `plot_fitness()` method is `\"PyGAD - Generation vs. Fitness\"` rather than `\"PyGAD - Iteration vs. Fitness\"`.\r\n12. A new method named `plot_new_solution_rate()` creates, shows, and returns a figure showing the rate of new/unique solutions explored in each generation. It accepts the same parameters as in the `plot_fitness()` method. This method only works when `save_solutions=True` in the `pygad.GA` class's constructor.\r\n13. A new method named `plot_genes()` creates, shows, and returns a figure to show how each gene changes per each generation. It accepts similar parameters like the `plot_fitness()` method in addition to the `graph_type`, `fill_color`, and `solutions` parameters. The `graph_type` parameter can be either `\"plot\"` (default), `\"boxplot\"`, or `\"histogram\"`. `fill_color` accepts the fill color which works when `graph_type` is either `\"boxplot\"` or `\"histogram\"`. `solutions` can be either `\"all\"` or `\"best\"` to decide whether all solutions or only best solutions are used.\r\n14. The `gene_type` parameter now supports controlling the precision of `float` data types. For a gene, rather than assigning just the data type like `float`, assign a `list`/`tuple`/`numpy.ndarray` with 2 elements where the first one is the type and the second one is the precision. For example, `[float, 2]` forces a gene with a value like `0.1234` to be `0.12`. For more information, check the [More about the `gene_type` Parameter](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#more-about-the-gene-type-parameter) section.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.15.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.15.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.15.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44840240", "release_id": 44840240, "date_created": "2021-06-18T03:08:12Z", "date_published": "2021-06-18T03:20:02Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44159983", "tag": "2.14.3", "name": "PyGAD-2.14.3", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Some bug fixes when setting the `save_best_solutions` parameter to `True`. Previously, the best solution for generation `i` was added into the `best_solutions` attribute at generation `i+1`. Now, the `best_solutions` attribute is updated by each solution at its exact generation.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.14.3", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.14.3", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.14.3", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/44159983", "release_id": 44159983, "date_created": "2021-06-06T06:21:19Z", "date_published": "2021-06-06T06:22:27Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/43734126", "tag": "2.14.2", "name": "PyGAD-2.14.2", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Some bug fixes when the `gene_type` parameter is nested. Thanks to [Rainer Engel](https://www.linkedin.com/in/rainer-matthias-engel-5ba47a9) for opening [a discussion](https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/43#discussioncomment-763342) to report this bug: https://github.com/ahmedfgad/GeneticAlgorithmPython/discussions/43#discussioncomment-763342\r\n\r\n[Rainer Engel](https://www.linkedin.com/in/rainer-matthias-engel-5ba47a9) helped a lot in suggesting new features and suggesting enhancements in 2.14.0 to 2.14.2 releases. ", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.14.2", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.14.2", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.14.2", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/43734126", "release_id": 43734126, "date_created": "2021-05-27T23:51:39Z", "date_published": "2021-05-28T00:04:54Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/43193822", "tag": "2.14.1", "name": "PyGAD-2.14.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. [Issue #40](https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/40) is solved. Now, the `None` value works with the `crossover_type` and `mutation_type` parameters: https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/40\r\n2. The `gene_type` parameter supports accepting a `list/tuple/numpy.ndarray` of numeric data types for the genes. This helps to control the data type of each individual gene. Previously, the `gene_type` can be assigned only to a single data type that is applied for all genes.\r\n3. A new `bool` attribute named `gene_type_single` is added to the `pygad.GA` class. It is `True` when there is a single data type assigned to the `gene_type` parameter. When the `gene_type` parameter is assigned a `list/tuple/numpy.ndarray`, then `gene_type_single` is set to `False`.\r\n4. The `mutation_by_replacement` flag now has no effect if `gene_space` exists except for the genes with `None` values. For example, for `gene_space=[None, [5, 6]]` the `mutation_by_replacement` flag affects only the first gene which has `None` for its value space.\r\n5. When an element has a value of `None` in the `gene_space` parameter (e.g. `gene_space=[None, [5, 6]]`), then its value will be randomly generated for each solution rather than being generate once for all solutions. Previously, the gene with `None` value in `gene_space` is the same across all solutions\r\n6. Some changes in the documentation according to [issue #32](https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/32): https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/32 ", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.14.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.14.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.14.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/43193822", "release_id": 43193822, "date_created": "2021-05-19T07:28:03Z", "date_published": "2021-05-19T07:37:37Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/39751744", "tag": "2.13.0", "name": "PyGAD-2.13.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "## PyGAD 2.13.0 \r\n\r\nRelease Date: 12 March 2021\r\n\r\n1. A new `bool` parameter called `allow_duplicate_genes` is supported. If `True`, which is the default, then a solution/chromosome may have duplicate gene values. If `False`, then each gene will have a unique value in its solution. Check the [Prevent Duplicates in Gene Values](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#prevent-duplicates-in-gene-values) section for more details.\r\n2. The `last_generation_fitness` is updated at the end of each generation not at the beginning. This keeps the fitness values of the most up-to-date population assigned to the `last_generation_fitness` parameter.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.13.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.13.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.13.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/39751744", "release_id": 39751744, "date_created": "2021-03-13T00:01:13Z", "date_published": "2021-03-13T00:47:29Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/38350398", "tag": "2.12.0", "name": "PyGAD-2.12.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Release Date: 20 February 2021\r\n\r\n1. 4 new instance attributes are added to hold temporary results after each generation: `last_generation_fitness` holds the fitness values of the solutions in the last generation, `last_generation_parents` holds the parents selected from the last generation, `last_generation_offspring_crossover` holds the offspring generated after applying the crossover in the last generation, and `last_generation_offspring_mutation` holds the offspring generated after applying the mutation in the last generation. You can access these attributes inside the `on_generation()` method for example.\r\n2. A bug fixed when the `initial_population` parameter is used. The bug occurred due to a mismatch between the data type of the array assigned to `initial_population` and the gene type in the `gene_type` attribute. Assuming that the array assigned to the `initial_population` parameter is `((1, 1), (3, 3), (5, 5), (7, 7))` which has type `int`. When `gene_type` is set to `float`, then the genes will not be float but casted to `int` because the defined array has `int` type. The bug is fixed by forcing the array assigned to `initial_population` to have the data type in the `gene_type` attribute. Check the [issue at GitHub](https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/27): https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/27\r\n\r\nThanks to [Marios Giouvanakis](https://www.researchgate.net/profile/Marios-Giouvanakis), a PhD candidate in Electrical & Computer Engineer, [Aristotle University of Thessaloniki (\u0391\u03c1\u03b9\u03c3\u03c4\u03bf\u03c4\u03ad\u03bb\u03b5\u03b9\u03bf \u03a0\u03b1\u03bd\u03b5\u03c0\u03b9\u03c3\u03c4\u03ae\u03bc\u03b9\u03bf \u0398\u03b5\u03c3\u03c3\u03b1\u03bb\u03bf\u03bd\u03af\u03ba\u03b7\u03c2), Greece](https://www.auth.gr/en), for emailing me about these issues.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.12.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.12.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.12.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/38350398", "release_id": 38350398, "date_created": "2021-02-20T06:48:14Z", "date_published": "2021-02-20T06:57:46Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/38092199", "tag": "2.11.0", "name": "PyGAD-2.11.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "## PyGAD 2.11.0\r\n\r\nRelease Date: 16 February 2021\r\n\r\n1. In the `gene_space` argument, the user can use a dictionary to specify the lower and upper limits of the gene. This dictionary must have only 2 items with keys `low` and `high` to specify the low and high limits of the gene, respectively. This way, PyGAD takes care of not exceeding the value limits of the gene. For a problem with only 2 genes, then using `gene_space=[{'low': 1, 'high': 5}, {'low': 0.2, 'high': 0.81}]` means the accepted values in the first gene start from 1 (inclusive) to 5 (exclusive) while the second one has values between 0.2 (inclusive) and 0.85 (exclusive). For more information, please check the [Limit the Gene Value Range](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#limit-the-gene-value-range) section of the documentation.\r\n2. The `plot_result()` method returns the figure so that the user can save it.\r\n3. Bug fixes in copying elements from the gene space.\r\n4. For a gene with a set of discrete values (more than 1 value) in the `gene_space` parameter like `[0, 1]`, it was possible that the gene value may not change after mutation. That is if the current value is 0, then the randomly selected value could also be 0. Now, it is verified that the new value is changed. So, if the current value is 0, then the new value after mutation will not be 0 but 1.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.11.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.11.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.11.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/38092199", "release_id": 38092199, "date_created": "2021-02-16T06:53:36Z", "date_published": "2021-02-16T07:02:10Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/36458069", "tag": "2.10.2", "name": "PyGAD-2.10.2", "author": {"name": "ahmedfgad", "type": "User"}, "description": "A bug fix when save_best_solutions=True. Refer to this issue for more information: https://github.com/ahmedfgad/GeneticAlgorithmPython/issues/25", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.10.2", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.10.2", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.10.2", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/36458069", "release_id": 36458069, "date_created": "2021-01-15T16:18:02Z", "date_published": "2021-01-15T16:18:35Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/36206919", "tag": "2.10.1", "name": "PyGAD-2.10.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Changes in PyGAD 2.10.1\r\n1. In the `gene_space` parameter, any `None` value (regardless of its index or axis), is replaced by a randomly generated number based on the 3 parameters `init_range_low`, `init_range_high`, and `gene_type`. So, the `None` value in `[..., None, ...]` or `[..., [..., None, ...], ...]` are replaced with random values. This gives more freedom in building the space of values for the genes.\r\n2. All the numbers passed to the `gene_space` parameter are casted to the type specified in the `gene_type` parameter.\r\n3. The `numpy.uint` data type is supported for the parameters that accept integer values.\r\n4. In the `pygad.kerasga` module, the `model_weights_as_vector()` function uses the `trainable` attribute of the model's layers to only return the trainable weights in the network. So, only the trainable layers with their `trainable` attribute set to `True` (`trainable=True`), which is the default value, have their weights evolved. All non-trainable layers with the `trainable` attribute set to `False` (`trainable=False`) will not be evolved. Thanks to [Prof. Tamer A. Farrag](https://github.com/tfarrag2000) for pointing about that at [GitHub](https://github.com/ahmedfgad/KerasGA/issues/1).", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.10.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.10.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.10.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/36206919", "release_id": 36206919, "date_created": "2021-01-11T02:46:01Z", "date_published": "2021-01-11T02:55:20Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/35933693", "tag": "2.10.0", "name": "PyGAD-2.10.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. Support of a new module `pygad.torchga` to train PyTorch models using PyGAD. Check [its documentation](https://pygad.readthedocs.io/en/latest/README_pygad_torchga_ReadTheDocs.html).\r\n2. Support of adaptive mutation where the mutation rate is determined by the fitness value of each solution. Read the [Adaptive Mutation](https://pygad.readthedocs.io/en/latest/README_pygad_ReadTheDocs.html#adaptive-mutation) section for more details. Also, read this paper: [Libelli, S. Marsili, and P. Alba. \"Adaptive mutation in genetic algorithms.\" Soft computing 4.2 (2000): 76-80.](https://www.researchgate.net/publication/225642916_Adaptive_mutation_in_genetic_algorithms)\r\n3. Before the `run()` method completes or exits, the fitness value of the best solution in the current population is appended to the `best_solution_fitness` list attribute. Note that the fitness value of the best solution in the initial population is already saved at the beginning of the list. So, the fitness value of the best solution is saved before the genetic algorithm starts and after it ends.\r\n4. When the parameter `parent_selection_type` is set to `sss` (steady-state selection), then a warning message is printed if the value of the `keep_parents` parameter is set to 0.\r\n5. More validations to the user input parameters.\r\n6. The default value of the `mutation_percent_genes` is set to the string `\"default\"` rather than the integer 10. This change helps to know whether the user explicitly passed a value to the `mutation_percent_genes` parameter or it is left to its default one. The `\"default\"` value is later translated into the integer 10. \r\n7. The `mutation_percent_genes` parameter is no longer accepting the value 0. It must be `>0` and `<=100`.\r\n8. The built-in `warnings` module is used to show warning messages rather than just using the `print()` function.\r\n9. A new `bool` parameter called `suppress_warnings` is added to the constructor of the `pygad.GA` class. It allows the user to control whether the warning messages are printed or not. It defaults to `False` which means the messages are printed.\r\n10. A helper method called `adaptive_mutation_population_fitness()` is created to calculate the average fitness value used in adaptive mutation to filter the solutions.\r\n11. The `best_solution()` method accepts a new optional parameter called `pop_fitness`. It accepts a list of the fitness values of the solutions in the population. If `None`, then the `cal_pop_fitness()` method is called to calculate the fitness values of the population.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.10.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.10.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.10.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/35933693", "release_id": 35933693, "date_created": "2021-01-04T02:09:26Z", "date_published": "2021-01-04T02:17:27Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/34885992", "tag": "2.9.0", "name": "PyGAD-2.9.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Changes in PyGAD 2.9.0 (06 December 2020):\r\n1. The fitness values of the initial population are considered in the `best_solutions_fitness` attribute.\r\n2. An optional parameter named `save_best_solutions` is added. It defaults to `False`. When it is `True`, then the best solution after each generation is saved into an attribute named `best_solutions`. If `False`, then no solutions are saved and the `best_solutions` attribute will be empty.\r\n3. Scattered crossover is supported. To use it, assign the `crossover_type` parameter the value `\"scattered\"`.\r\n4. NumPy arrays are now supported by the `gene_space` parameter.\r\n5. The following parameters (`gene_type`, `crossover_probability`, `mutation_probability`, `delay_after_gen`) can be assigned to a numeric value of any of these data types: `int`, `float`, `numpy.int`, `numpy.int8`, `numpy.int16`, `numpy.int32`, `numpy.int64`, `numpy.float`, `numpy.float16`, `numpy.float32`, or `numpy.float64`. ", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.9.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.9.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.9.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/34885992", "release_id": 34885992, "date_created": "2020-12-05T23:29:23Z", "date_published": "2020-12-05T23:30:29Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/32132937", "tag": "2.8.1", "name": "PyGAD-2.8.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "1. Bug fix in applying the crossover operation when the `crossover_probability` parameter is used. Thanks to [Eng. Hamada Kassem, Research and Teaching Assistant, Construction Engineering and Management, Faculty of Engineering, Alexandria University, Egypt](https://www.linkedin.com/in/hamadakassem).", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.8.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.8.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.8.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/32132937", "release_id": 32132937, "date_created": "2020-10-03T03:53:38Z", "date_published": "2020-10-04T04:06:35Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/31581367", "tag": "2.8.0", "name": "PyGAD-2.8.0", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Support of a new module named `pygad.kerasga` to train Keras models using the genetic algorithm.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.8.0", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.8.0", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.8.0", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/31581367", "release_id": 31581367, "date_created": "2020-09-20T21:49:13Z", "date_published": "2020-09-20T21:53:26Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/31272706", "tag": "2.7.2", "name": "PyGAD-2.7.2", "author": {"name": "ahmedfgad", "type": "User"}, "description": "Bug fix to support building and training regression neural networks with multiple outputs.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.7.2", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.7.2", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.7.2", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/31272706", "release_id": 31272706, "date_created": "2020-09-14T16:49:47Z", "date_published": "2020-09-14T16:51:59Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/31272680", "tag": "2.7.1", "name": "PyGAD-2.7.1", "author": {"name": "ahmedfgad", "type": "User"}, "description": "A bug fix when the `problem_type` argument is set to `regression`.", "tarball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/tarball/2.7.1", "zipball_url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/zipball/2.7.1", "html_url": "https://github.com/ahmedfgad/GeneticAlgorithmPython/releases/tag/2.7.1", "url": "https://api.github.com/repos/ahmedfgad/GeneticAlgorithmPython/releases/31272680", "release_id": 31272680, "date_created": "2020-09-14T16:49:47Z", "date_published": "2020-09-14T16:51:21Z"}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "executable_example": [{"result": {"value": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/examples/example_travelling_salesman.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/examples/example_travelling_salesman.ipynb"}], "installation": [{"result": {"value": "To install [PyGAD](https://pypi.org/project/pygad), simply use pip to download and install the library from [PyPI](https://pypi.org/project/pygad) (Python Package Index). The library is at PyPI at this page https://pypi.org/project/pygad.\n\nInstall PyGAD with the following command:\n\n```python\npip install pygad\n```\n\nTo get started with PyGAD, please read the documentation at [Read The Docs](https://pygad.readthedocs.io/) https://pygad.readthedocs.io.\n", "type": "Text_excerpt", "original_header": "Installation"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "- [pygad](https://github.com/ahmedfgad/GeneticAlgorithmPython): (https://github.com/ahmedfgad/GeneticAlgorithmPython)\n- [pygad.nn](https://github.com/ahmedfgad/NumPyANN): https://github.com/ahmedfgad/NumPyANN\n- [pygad.gann](https://github.com/ahmedfgad/NeuralGenetic): https://github.com/ahmedfgad/NeuralGenetic\n- [pygad.cnn](https://github.com/ahmedfgad/NumPyCNN): https://github.com/ahmedfgad/NumPyCNN\n- [pygad.gacnn](https://github.com/ahmedfgad/CNNGenetic): https://github.com/ahmedfgad/CNNGenetic\n- [pygad.kerasga](https://github.com/ahmedfgad/KerasGA): https://github.com/ahmedfgad/KerasGA\n- [pygad.torchga](https://github.com/ahmedfgad/TorchGA): https://github.com/ahmedfgad/TorchGA \n", "original_header": "PyGAD Source Code"}, "confidence": 0.8918974083095406, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "documentation": [{"result": {"value": "The documentation of the PyGAD library is available at [Read The Docs](https://pygad.readthedocs.io) at this link: https://pygad.readthedocs.io. It discusses the modules supported by PyGAD, all its classes, methods, attribute, and functions. For each module, a number of examples are given.\n\nIf there is an issue using PyGAD, feel free to post at issue in this [GitHub repository](https://github.com/ahmedfgad/GeneticAlgorithmPython) https://github.com/ahmedfgad/GeneticAlgorithmPython or by sending an e-mail to ahmed.f.gad@gmail.com. \n\nIf you built a project that uses PyGAD, then please drop an e-mail to ahmed.f.gad@gmail.com with the following information so that your project is included in the documentation.\n\n- Project title\n- Brief description\n- Preferably, a link that directs the readers to your project\n\nPlease check the **Contact Us** section for more contact details.\n", "type": "Text_excerpt", "original_header": "PyGAD Documentation"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "usage": [{"result": {"value": "Check the [PyGAD's documentation](https://pygad.readthedocs.io/en/latest/pygad.html) for information about the implementation of this example. It solves a single-objective problem.\n\n```python\nimport pygad\nimport numpy\n\n\"\"\"\nGiven the following function:\n    y = f(w1:w6) = w1x1 + w2x2 + w3x3 + w4x4 + w5x5 + 6wx6\n    where (x1,x2,x3,x4,x5,x6)=(4,-2,3.5,5,-11,-4.7) and y=44\nWhat are the best values for the 6 weights (w1 to w6)? We are going to use the genetic algorithm to optimize this function.\n\"\"\"\n\nfunction_inputs = [4,-2,3.5,5,-11,-4.7] # Function inputs.\ndesired_output = 44 # Function output.\n\ndef fitness_func(ga_instance, solution, solution_idx):\n    # Calculating the fitness value of each solution in the current population.\n    # The fitness function calulates the sum of products between each input and its corresponding weight.\n    output = numpy.sum(solution*function_inputs)\n    fitness = 1.0 / numpy.abs(output - desired_output)\n    return fitness\n\nfitness_function = fitness_func\n\nnum_generations = 100 # Number of generations.\nnum_parents_mating = 7 # Number of solutions to be selected as parents in the mating pool.\n\n# To prepare the initial population, there are 2 ways:\n# 1) Prepare it yourself and pass it to the initial_population parameter. This way is useful when the user wants to start the genetic algorithm with a custom initial population.\n# 2) Assign valid integer values to the sol_per_pop and num_genes parameters. If the initial_population parameter exists, then the sol_per_pop and num_genes parameters are useless.\nsol_per_pop = 50 # Number of solutions in the population.\nnum_genes = len(function_inputs)\n\nlast_fitness = 0\ndef callback_generation(ga_instance):\n    global last_fitness\n    print(f\"Generation = {ga_instance.generations_completed}\")\n    print(f\"Fitness    = {ga_instance.best_solution()[1]}\")\n    print(f\"Change     = {ga_instance.best_solution()[1] - last_fitness}\")\n    last_fitness = ga_instance.best_solution()[1]\n\n# Creating an instance of the GA class inside the ga module. Some parameters are initialized within the constructor.\nga_instance = pygad.GA(num_generations=num_generations,\n                       num_parents_mating=num_parents_mating, \n                       fitness_func=fitness_function,\n                       sol_per_pop=sol_per_pop, \n                       num_genes=num_genes,\n                       on_generation=callback_generation)\n\n# Running the GA to optimize the parameters of the function.\nga_instance.run()\n\n# After the generations complete, some plots are showed that summarize the how the outputs/fitenss values evolve over generations.\nga_instance.plot_fitness()\n\n# Returning the details of the best solution.\nsolution, solution_fitness, solution_idx = ga_instance.best_solution()\nprint(f\"Parameters of the best solution : {solution}\")\nprint(f\"Fitness value of the best solution = {solution_fitness}\")\nprint(f\"Index of the best solution : {solution_idx}\")\n\nprediction = numpy.sum(numpy.array(function_inputs)*solution)\nprint(f\"Predicted output based on the best solution : {prediction}\")\n\nif ga_instance.best_solution_generation != -1:\n    print(f\"Best fitness value reached after {ga_instance.best_solution_generation} generations.\")\n\n# Saving the GA instance.\nfilename = 'genetic' # The filename to which the instance is saved. The name is without extension.\nga_instance.save(filename=filename)\n\n# Loading the saved GA instance.\nloaded_ga_instance = pygad.load(filename=filename)\nloaded_ga_instance.plot_fitness()\n```\n", "type": "Text_excerpt", "original_header": "Example"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"value": "To start with coding the genetic algorithm, you can check the tutorial titled [**Genetic Algorithm Implementation in Python**](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad) available at these links:\n\n- [LinkedIn](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad)\n- [Towards Data Science](https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6)\n- [KDnuggets](https://www.kdnuggets.com/2018/07/genetic-algorithm-implementation-python.html)\n\n[This tutorial](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad) is prepared based on a previous version of the project but it still a good resource to start with coding the genetic algorithm.\n\n[![Genetic Algorithm Implementation in Python](https://user-images.githubusercontent.com/16560492/78830052-a3c19300-79e7-11ea-8b9b-4b343ea4049c.png)](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad)\n", "type": "Text_excerpt", "original_header": "Tutorial: Implementing Genetic Algorithm in Python", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"value": "Get started with the genetic algorithm by reading the tutorial titled [**Introduction to Optimization with Genetic Algorithm**](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad) which is available at these links:\n\n* [LinkedIn](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad)\n* [Towards Data Science](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)\n* [KDnuggets](https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html)\n\n[![Introduction to Genetic Algorithm](https://user-images.githubusercontent.com/16560492/82078259-26252d00-96e1-11ea-9a02-52a99e1054b9.jpg)](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad)\n", "type": "Text_excerpt", "original_header": "Tutorial: Introduction to Genetic Algorithm", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"value": "Read about building neural networks in Python through the tutorial titled [**Artificial Neural Network Implementation using NumPy and Classification of the Fruits360 Image Dataset**](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad) available at these links:\n\n* [LinkedIn](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad)\n* [Towards Data Science](https://towardsdatascience.com/artificial-neural-network-implementation-using-numpy-and-classification-of-the-fruits360-image-3c56affa4491)\n* [KDnuggets](https://www.kdnuggets.com/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html)\n\n[![Building Neural Networks Python](https://user-images.githubusercontent.com/16560492/82078281-30472b80-96e1-11ea-8017-6a1f4383d602.jpg)](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad)\n", "type": "Text_excerpt", "original_header": "Tutorial: Build Neural Networks in Python", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"value": "Read about training neural networks using the genetic algorithm through the tutorial titled [**Artificial Neural Networks Optimization using Genetic Algorithm with Python**](https://www.linkedin.com/pulse/artificial-neural-networks-optimization-using-genetic-ahmed-gad) available at these links:\n\n- [LinkedIn](https://www.linkedin.com/pulse/artificial-neural-networks-optimization-using-genetic-ahmed-gad)\n- [Towards Data Science](https://towardsdatascience.com/artificial-neural-networks-optimization-using-genetic-algorithm-with-python-1fe8ed17733e)\n- [KDnuggets](https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html)\n\n[![Training Neural Networks using Genetic Algorithm Python](https://user-images.githubusercontent.com/16560492/82078300-376e3980-96e1-11ea-821c-aa6b8ceb44d4.jpg)](https://www.linkedin.com/pulse/artificial-neural-networks-optimization-using-genetic-ahmed-gad)\n", "type": "Text_excerpt", "original_header": "Tutorial: Optimize Neural Networks with Genetic Algorithm", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"value": "To start with coding the genetic algorithm, you can check the tutorial titled [**Building Convolutional Neural Network using NumPy from Scratch**](https://www.linkedin.com/pulse/building-convolutional-neural-network-using-numpy-from-ahmed-gad) available at these links:\n\n- [LinkedIn](https://www.linkedin.com/pulse/building-convolutional-neural-network-using-numpy-from-ahmed-gad)\n- [Towards Data Science](https://towardsdatascience.com/building-convolutional-neural-network-using-numpy-from-scratch-b30aac50e50a)\n- [KDnuggets](https://www.kdnuggets.com/2018/04/building-convolutional-neural-network-numpy-scratch.html)\n- [Chinese Translation](http://m.aliyun.com/yunqi/articles/585741)\n\n[This tutorial](https://www.linkedin.com/pulse/building-convolutional-neural-network-using-numpy-from-ahmed-gad)) is prepared based on a previous version of the project but it still a good resource to start with coding CNNs.\n\n[![Building CNN in Python](https://user-images.githubusercontent.com/16560492/82431022-6c3a1200-9a8e-11ea-8f1b-b055196d76e3.png)](https://www.linkedin.com/pulse/building-convolutional-neural-network-using-numpy-from-ahmed-gad)\n", "type": "Text_excerpt", "original_header": "Tutorial: Building CNN in Python", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"value": "Get started with the genetic algorithm by reading the tutorial titled [**Derivation of Convolutional Neural Network from Fully Connected Network Step-By-Step**](https://www.linkedin.com/pulse/derivation-convolutional-neural-network-from-fully-connected-gad) which is available at these links:\n\n* [LinkedIn](https://www.linkedin.com/pulse/derivation-convolutional-neural-network-from-fully-connected-gad)\n* [Towards Data Science](https://towardsdatascience.com/derivation-of-convolutional-neural-network-from-fully-connected-network-step-by-step-b42ebafa5275)\n* [KDnuggets](https://www.kdnuggets.com/2018/04/derivation-convolutional-neural-network-fully-connected-step-by-step.html)\n\n[![Derivation of CNN from FCNN](https://user-images.githubusercontent.com/16560492/82431369-db176b00-9a8e-11ea-99bd-e845192873fc.png)](https://www.linkedin.com/pulse/derivation-convolutional-neural-network-from-fully-connected-gad)\n", "type": "Text_excerpt", "original_header": "Tutorial: Derivation of CNN from FCNN", "parent_header": ["For More Information"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "citation": [{"result": {"value": "If you used PyGAD, please consider adding a citation to the following paper about PyGAD:\n\n```\n@misc{gad2021pygad,\n      title={PyGAD: An Intuitive Genetic Algorithm Python Library}, \n      author={Ahmed Fawzy Gad},\n      year={2021},\n      eprint={2106.06158},\n      archivePrefix={arXiv},\n      primaryClass={cs.NE}\n}\n```\n", "type": "Text_excerpt", "original_header": "Citing PyGAD - Bibtex Formatted Citation"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"value": "@misc{gad2021pygad,\n      title={PyGAD: An Intuitive Genetic Algorithm Python Library}, \n      author={Ahmed Fawzy Gad},\n      year={2021},\n      eprint={2106.06158},\n      archivePrefix={arXiv},\n      primaryClass={cs.NE}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "contact": [{"result": {"value": "* E-mail: ahmed.f.gad@gmail.com\n* [LinkedIn](https://www.linkedin.com/in/ahmedfgad)\n* [Paperspace](https://blog.paperspace.com/author/ahmed)\n* [KDnuggets](https://kdnuggets.com/author/ahmed-gad)\n* [TowardsDataScience](https://towardsdatascience.com/@ahmedfgad)\n* [GitHub](https://github.com/ahmedfgad)\n", "type": "Text_excerpt", "original_header": "Contact Us"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "The next code implements all the callback functions to trace the execution of the genetic algorithm. Each callback function prints its name.\n```python\nimport pygad\nimport numpy\n\nfunction_inputs = [4,-2,3.5,5,-11,-4.7]\ndesired_output = 44\n\ndef fitness_func(ga_instance, solution, solution_idx):\n    output = numpy.sum(solution*function_inputs)\n    fitness = 1.0 / (numpy.abs(output - desired_output) + 0.000001)\n    return fitness\n\nfitness_function = fitness_func\n\ndef on_start(ga_instance):\n    print(\"on_start()\")\n\ndef on_fitness(ga_instance, population_fitness):\n    print(\"on_fitness()\")\n\ndef on_parents(ga_instance, selected_parents):\n    print(\"on_parents()\")\n\ndef on_crossover(ga_instance, offspring_crossover):\n    print(\"on_crossover()\")\n\ndef on_mutation(ga_instance, offspring_mutation):\n    print(\"on_mutation()\")\n\ndef on_generation(ga_instance):\n    print(\"on_generation()\")\n\ndef on_stop(ga_instance, last_population_fitness):\n    print(\"on_stop()\")\n\nga_instance = pygad.GA(num_generations=3,\n                       num_parents_mating=5,\n                       fitness_func=fitness_function,\n                       sol_per_pop=10,\n                       num_genes=len(function_inputs),\n                       on_start=on_start,\n                       on_fitness=on_fitness,\n                       on_parents=on_parents,\n                       on_crossover=on_crossover,\n                       on_mutation=on_mutation,\n                       on_generation=on_generation,\n                       on_stop=on_stop)\n\nga_instance.run()\n```\nBased on the used 3 generations as assigned to the `num_generations` argument, here is the output.\n```\non_start()\n\non_fitness()\non_parents()\non_crossover()\non_mutation()\non_generation()\n\non_fitness()\non_parents()\non_crossover()\non_mutation()\non_generation()\n\non_fitness()\non_parents()\non_crossover()\non_mutation()\non_generation()\n\non_stop()\n```\n \n", "original_header": "Life Cycle of PyGAD"}, "confidence": 0.9252697003073708, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "PyGAD:  Genetic Algorithm in Python"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "related_documentation": [{"result": {"type": "Url", "value": "https://pygad.readthedocs.io/", "format": "readthedocs"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}], "image": [{"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/101267295-c74c0180-375f-11eb-9ad0-f8e37bd796ce.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/220486073-c5b6089d-81e4-44d9-a53c-385f479a7273.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/78830052-a3c19300-79e7-11ea-8b9b-4b343ea4049c.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/82078259-26252d00-96e1-11ea-9a02-52a99e1054b9.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/82078281-30472b80-96e1-11ea-8017-6a1f4383d602.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/82078300-376e3980-96e1-11ea-821c-aa6b8ceb44d4.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/82431022-6c3a1200-9a8e-11ea-8f1b-b055196d76e3.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/82431369-db176b00-9a8e-11ea-99bd-e845192873fc.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}, {"result": {"type": "Url", "value": "https://user-images.githubusercontent.com/16560492/78830077-ae7c2800-79e7-11ea-980b-53b6bd879eeb.jpg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/ahmedfgad/GeneticAlgorithmPython/master/README.md"}]}