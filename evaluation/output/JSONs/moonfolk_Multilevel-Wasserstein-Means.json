{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 18:44:42"}, "code_repository": [{"result": {"value": "https://github.com/moonfolk/Multilevel-Wasserstein-Means", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "moonfolk", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2017-06-12T18:43:00Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-04-25T15:08:57Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "name": [{"result": {"value": "Multilevel-Wasserstein-Means", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "moonfolk/Multilevel-Wasserstein-Means", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/moonfolk/Multilevel-Wasserstein-Means/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/moonfolk/Multilevel-Wasserstein-Means/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 21, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 10, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/moonfolk/Multilevel-Wasserstein-Means/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 26583}, "confidence": 1, "technique": "GitHub_API"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "usage": [{"result": {"value": "```\nW_means(K=5, K_a=6, k=4, n_iter=10, weight=True, verbose=0, init = 'kmeans', k_init=5, method = 'NC', n_iter_cuturi = [5, 10, 50])\n```\n\nParameters:\n\nK: number of global clusters\n\nK_a: number of atoms in global clusters (can be list of len(K_a) = K or integer)\n\nk: number of atoms in local clusters (if method = 'LC' - number of atoms in the constraint set)\n\nn_iter: number of iterations of the main algorithm\n\nweight: Wheather to use a scaling factor 1/M when updating local barycenters. True is recommended\n\nverbose: if 1, objective function value will be printed on every iteration and total running time\n\ninit: which initialization to use. 'kmeans' is recommended for 3stage kmeans initialization\n\nk_init: used for 'kmeans' initialization of 'LC' method; Recomended - value of k if you were to fit 'NC' method\n\nmethod: 'NC' for no constraint; 'LC' for local constraint; '3means' for 3 stage kmeans\n\nn_iter_cuturi: Number of iterations to run for Cuturi [algo2; algo1; algo3]\n\n\nMethods:\n```\nfit(data, truth=None)\n```\n\ndata: list of length M (number of groups) of d x Nm arrays (d - dimensionality; Nm - number of points in group m)\ntruth: can be used by score function later\n\nReturns:\nH_: list of atoms of global barycenters  \na_: list of weights of atoms of global barycenters  \nY_: list of atoms of local barycenters (equal to len(Z)*[S] for LC method)  \nb_: lsit of weights of atoms of local barycneters  \nS_: array of atoms in the constraint set (only if method = 'LC')  \nlabels_: list of label assignments of groups to global clusters  \n\n```\nscore(truth=None)\n```\n\nNote: can only be used on fitted object.  \nUnless truth provided before, provide either true label assignments or true model parameters (later is used for simulations).\n\nReturns:\nWasserstein distance to truth if true model parameters are given\nAMI score if true label assignemtns are given\n", "type": "Text_excerpt", "original_header": "Usage guide", "parent_header": ["Multilevel Clustering via Wasserstein Means"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md"}], "installation": [{"result": {"value": "```\nW_means(K=5, K_a=6, k=4, n_iter=10, weight=True, verbose=0, init = 'kmeans', k_init=5, method = 'NC', n_iter_cuturi = [5, 10, 50])\n```\n\nParameters:\n\nK: number of global clusters\n\nK_a: number of atoms in global clusters (can be list of len(K_a) = K or integer)\n\nk: number of atoms in local clusters (if method = 'LC' - number of atoms in the constraint set)\n\nn_iter: number of iterations of the main algorithm\n\nweight: Wheather to use a scaling factor 1/M when updating local barycenters. True is recommended\n\nverbose: if 1, objective function value will be printed on every iteration and total running time\n\ninit: which initialization to use. 'kmeans' is recommended for 3stage kmeans initialization\n\nk_init: used for 'kmeans' initialization of 'LC' method; Recomended - value of k if you were to fit 'NC' method\n\nmethod: 'NC' for no constraint; 'LC' for local constraint; '3means' for 3 stage kmeans\n\nn_iter_cuturi: Number of iterations to run for Cuturi [algo2; algo1; algo3]\n\n\nMethods:\n```\nfit(data, truth=None)\n```\n\ndata: list of length M (number of groups) of d x Nm arrays (d - dimensionality; Nm - number of points in group m)\ntruth: can be used by score function later\n\nReturns:\nH_: list of atoms of global barycenters  \na_: list of weights of atoms of global barycenters  \nY_: list of atoms of local barycenters (equal to len(Z)*[S] for LC method)  \nb_: lsit of weights of atoms of local barycneters  \nS_: array of atoms in the constraint set (only if method = 'LC')  \nlabels_: list of label assignments of groups to global clusters  \n\n```\nscore(truth=None)\n```\n\nNote: can only be used on fitted object.  \nUnless truth provided before, provide either true label assignments or true model parameters (later is used for simulations).\n\nReturns:\nWasserstein distance to truth if true model parameters are given\nAMI score if true label assignemtns are given\n", "type": "Text_excerpt", "original_header": "Usage guide", "parent_header": ["Multilevel Clustering via Wasserstein Means"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "First compile Cython code in cython_cuturi folder. Install Anaconda and run (on Ubuntu):\n```\ncython algos.pyx\npython setup.py build_ext --inplace\n``` \n", "original_header": "Overview"}, "confidence": 0.9329979886835796, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md"}], "description": [{"result": {"type": "Text_excerpt", "value": "This is a Python 2 implementation of MWM and MWMS algorithms of Multilevel Clustering via Wasserstein Means (N. Ho, X. Nguyen, M. Yurochkin, H. Bui, V. Huynh, D. Phung); plus implementation of Algorithms 1, 2 and 3 of Fast Computation of Wasserstein Barycenters (M. Cuturi, A. Doucet). Code written by Mikhail Yurochkin.\n \n", "original_header": "Multilevel Clustering via Wasserstein Means"}, "confidence": 0.9858784704139065, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "It implemets Algorithm 3 of Cuturi, which is the main computational routine. \nW_means_class.py implements our clustering algoritms as a scikit-learn estimator \nImplementation is designed to be used in the interactive mode (e.g. Python IDE like Spyder).\n \n", "original_header": "Overview"}, "confidence": 0.9263515802040171, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md"}], "invocation": [{"result": {"type": "Text_excerpt", "value": "simul_example.py has some simulated examples \n", "original_header": "Overview"}, "confidence": 0.8615701187360111, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md"}], "full_title": [{"result": {"type": "String", "value": "Multilevel Clustering via Wasserstein Means"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/moonfolk/Multilevel-Wasserstein-Means/master/README.md"}]}