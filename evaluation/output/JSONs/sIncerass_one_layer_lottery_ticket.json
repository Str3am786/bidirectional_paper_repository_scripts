{"somef_provenance": {"somef_version": "0.9.4", "somef_schema_version": "1.0.0", "date": "2023-12-21 19:18:10"}, "code_repository": [{"result": {"value": "https://github.com/sIncerass/one_layer_lottery_ticket", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "sIncerass", "type": "User"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2021-09-03T00:29:34Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-01-10T07:03:36Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/mit", "type": "License", "name": "MIT License", "url": "https://api.github.com/licenses/mit", "spdx_id": "MIT"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "MIT License\n\nCopyright (c) Facebook, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/LICENSE"}], "description": [{"result": {"value": "[EMNLP 2021] code for \"What\u2019s Hidden in a One-layer Randomly Weighted Transformer?\"", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "This repo contains the code for the paper [\"What\u2019s Hidden in a One-layer Randomly Weighted Transformer?\"](https://arxiv.org/pdf/2109.03939.pdf) at EMNLP 2021 (short) main conference. \n\nWe demonstrate that one-layer randomly weighted Transformer contain subnet-works that can achieve impressive performance **without ever modifying the weight values**  on  machine  translation  tasks. \n\nTo find subnetworks for one-layer randomly weighted Transformer, we apply different binary masks to the same weight matrix to generate different layers. Hidden in a one-layer randomly weighted Transformer`wide/wider`, we find subnetworks can achieve **29.45/17.29** BLEU on IWSLT14/WMT14.  Using a fixed pre-trained embedding  layer, the previously found subnetworks are smaller than, but can match **98%/92%** (34.14/25.24 BLEU) the performance of a trained Transformer`small/base` on IWSLT14/WMT14. \n", "type": "Text_excerpt", "original_header": "Introduction"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}, {"result": {"value": "We have the pre-processed data for IWSLT/WMT and the pre-trained encoder/decoder embedding at [data](https://drive.google.com/file/d/1cqOP2FKn_z26lNu03Q6XZusYHDdNGLt4/view?usp=sharing). \n\nTo train a one-layer randomly weighted Transformer on IWSLT with one GPU, you can run the script below:\n```\nOUTPUT_PATH=\nDATA_PATH=data-bin/iwslt14.tokenized.de-en/\nprune_ratio=0.5\nshare_mask=layer_weights\ninit=kaiming_uniform\n_arch=masked_transformer_iwslt_de_en/masked_transformerbig_iwslt_de_en\n\npython train.py ${DATA_PATH} --seed 1 --fp16 --no-progress-bar \\\n        --max-epoch 55 --save-interval 1 --keep-last-epochs 5 \\\n        --arch ${_arch} --optimizer adam --adam-betas '(0.9, 0.98)' --clip-norm 0.0 \\\n        --lr 5e-4 --lr-scheduler inverse_sqrt --warmup-updates 4000 \\\n        --dropout 0.3 --weight-decay 0.0001 --criterion label_smoothed_cross_entropy --label-smoothing 0.1 \\\n        --max-tokens 4096 --eval-bleu --eval-bleu-args '{{\"beam\": 5, \"max_len_a\": 1.2, \"max_len_b\": 10}}' \\\n        --eval-bleu-detok moses --eval-bleu-remove-bpe --best-checkpoint-metric bleu --maximize-best-checkpoint-metric \\\n        --share-mask ${share_mask} --clip-norm 0.5 --mask-layernorm-type masked_layernorm \\\n        --prune-ratio ${prune_ratio} --mask-init standard --prune-method super_mask --mask-constant 0. \\\n        --init ${init} --scale-fan --share-decoder-input-output-embed \\\n        --save-dir ${OUTPUT_PATH} | tee -a ${OUTPUT_PATH}/train_log.txt\n```\n\n\nTo train a one-layer randomly weighted Transformer on WMT with 8 GPUs, you can run the script below:\n```\nOUTPUT_PATH=\nDATA_PATH=data-bin/wmt14_en_de_joined_dict/\nprune_ratio=0.5\nshare_mask=layer_weights\n_arch=masked_transformer_wmt_en_de/masked_transformer_wmt_en_de_big\ninit=kaiming_uniform\n\npython train.py ${DATA_PATH} \\\n    --seed 1 --dropout 0.2 --no-progress-bar --fp16 \\\n    --arch ${_arch} --share-decoder-input-output-embed --optimizer adam --adam-betas '(0.9, 0.98)' --clip-norm 0.0 \\\n    --lr-scheduler inverse_sqrt --warmup-init-lr 1e-7 --warmup-updates 4000 \\\n    --lr 1e-3 --update-freq 1 --log-interval 50 \\\n    --criterion label_smoothed_cross_entropy --label-smoothing 0.1 --weight-decay 0.0 \\\n    --max-tokens 4096 --save-dir ${OUTPUT_PATH} --distributed-world-size 8 --distributed-port 61024 \\\n    --ddp-backend no_c10d --keep-interval-updates 20 --keep-last-epochs 10 --max-epoch 100 \\\n    --share-mask ${share_mask} --mask-layernorm-type masked_layernorm \\\n    --prune-ratio ${prune_ratio} --mask-init standard --prune-method super_mask --mask-constant 0. \\\n    --init ${init} --scale-fan --share-decoder-input-output-embed  | tee -a ${OUTPUT_PATH}/train_log.txt\n```\n\nYou can add the ``--encoder-embed-path data/iwslt_embed/encoder_embed.txt --decoder-embed-pat data/iwslt_embed/decoder_embed.txt`` with pre-trained word embeddings. \n", "type": "Text_excerpt", "original_header": "Training", "parent_header": ["Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}, {"result": {"value": "To test on IWSLT, you can run the following script\n```\npython fairseq_cli/generate.py ${DATA_PATH} --path ${OUTPUT_PATH}/checkpoint_best.pt --batch-size 128  --beam 5 \\\n        --lenpen 1.0 --remove-bpe --log-format simple --source-lang de --target-lang en > res.txt\"\n```\nTo test on WMT, you can run the following script\n```\npython scripts/average_checkpoints.py --inputs ${OUTPUT_PATH} --num-epoch-checkpoints 10 --output ${OUTPUT_PATH}/averaged_model.pt\npython fairseq_cli/generate.py ${DATA_PATH} --path ${OUTPUT_PATH}/averaged_model.pt --beam 5 --remove-bpe > res.txt\n```\n", "type": "Text_excerpt", "original_header": "Testing", "parent_header": ["Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}], "name": [{"result": {"value": "one_layer_lottery_ticket", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "sIncerass/one_layer_lottery_ticket", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/sIncerass/one_layer_lottery_ticket/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/sIncerass/one_layer_lottery_ticket/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 8, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 0, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/sIncerass/one_layer_lottery_ticket/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 2730795}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Cuda", "name": "Cuda", "type": "Programming_language", "size": 36486}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "C++", "name": "C++", "type": "Programming_language", "size": 15854}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Cython", "name": "Cython", "type": "Programming_language", "size": 10519}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Lua", "name": "Lua", "type": "Programming_language", "size": 4210}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 925}, "confidence": 1, "technique": "GitHub_API"}], "code_of_conduct": [{"result": {"value": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <conduct@pytorch.org>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/CODE_OF_CONDUCT.md"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributing_guidelines": [{"result": {"value": "# Contributing to Facebook AI Research Sequence-to-Sequence Toolkit (fairseq)\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\n## License\nBy contributing to Facebook AI Research Sequence-to-Sequence Toolkit (fairseq),\nyou agree that your contributions will be licensed under the LICENSE file in\nthe root directory of this source tree.\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/CONTRIBUTING.md"}], "documentation": [{"result": {"value": "https://github.com/sIncerass/one_layer_lottery_ticket/tree/master/docs", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://github.com/sIncerass/one_layer_lottery_ticket/tree/master/examples/simultaneous_translation/docs", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/backtranslation/prepare-de-monolingual.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/backtranslation/sacrebleu.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/backtranslation/tokenized_bleu.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/backtranslation/prepare-wmt18en2de.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/m2m_100/tok.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/m2m_100/install_dependecies.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/m2m_100/tokenizers/tokenizer_ar.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/m2m_100/tokenizers/seg_ja.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/m2m_100/tokenizers/seg_ko.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/translation/prepare-wmt14en2de.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/translation/prepare-wmt14en2fr.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/translation/prepare-iwslt14.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/translation/prepare-iwslt17-multilingual.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/speech_recognition/datasets/prepare-librispeech.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/multilingual/train_multilingual_model.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/multilingual/finetune_multilingual_model.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/multilingual/multilingual_fairseq_gen.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/joint_alignment_translation/prepare-wmt18en2de_no_norm_no_escape_no_agressive.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/language_model/prepare-wikitext-103.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/roberta/preprocess_RACE.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/roberta/preprocess_GLUE_tasks.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/roberta/commonsense_qa/download_cqa_data.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/criss/download_and_preprocess_flores_test.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/criss/download_and_preprocess_tatoeba.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/criss/mining/mine_example.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/criss/sentence_retrieval/sentence_retrieval_tatoeba.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/criss/unsupervised_mt/eval.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/examples/byte_level_bpe/get_data.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/scripts/compound_split_bleu.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/scripts/sacrebleu.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "requirements": [{"result": {"value": "* [PyTorch](http://pytorch.org/) version >= 1.5.0\n* Python version >= 3.6\n* For training new models, you'll also need an NVIDIA GPU and [NCCL](https://github.com/NVIDIA/nccl)\n* **To install fairseq** and develop locally:\n\n``` bash\ngit clone https://github.com/pytorch/fairseq\ncd fairseq\npip install --editable ./\n```\n", "type": "Text_excerpt", "original_header": "Requirements and Installation", "parent_header": ["Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}], "installation": [{"result": {"value": "* [PyTorch](http://pytorch.org/) version >= 1.5.0\n* Python version >= 3.6\n* For training new models, you'll also need an NVIDIA GPU and [NCCL](https://github.com/NVIDIA/nccl)\n* **To install fairseq** and develop locally:\n\n``` bash\ngit clone https://github.com/pytorch/fairseq\ncd fairseq\npip install --editable ./\n```\n", "type": "Text_excerpt", "original_header": "Requirements and Installation", "parent_header": ["Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}], "citation": [{"result": {"value": "This repo has been developed as part of the following paper. We appreciate it if you would please cite the following paper if you found the library useful for your work:\n```\n@article{shen2021whats,\n  title={What\u2019s Hidden in a One-layer Randomly Weighted Transformer?},\n  author={Shen, Sheng and Yao, Zhewei and Kiela, Douwe and Keutzer, Kurt and Mahoney, Michael W},\n  booktitle={EMNLP},\n  year={2021}\n}\n```\n", "type": "Text_excerpt", "original_header": "Citation", "parent_header": ["Introduction"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}, {"result": {"value": "@article{shen2021whats,\n  title={What\u2019s Hidden in a One-layer Randomly Weighted Transformer?},\n  author={Shen, Sheng and Yao, Zhewei and Kiela, Douwe and Keutzer, Kurt and Mahoney, Michael W},\n  booktitle={EMNLP},\n  year={2021}\n}", "type": "Text_excerpt", "format": "bibtex"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Natural Language Processing"}, "confidence": 0.8044081128413202, "technique": "supervised_classification"}], "full_title": [{"result": {"type": "String", "value": "Introduction"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/pdf/2109.03939.pdf"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/sIncerass/one_layer_lottery_ticket/master/README.md"}]}