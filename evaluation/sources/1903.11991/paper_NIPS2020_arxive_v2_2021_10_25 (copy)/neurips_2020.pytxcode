=>PYTHONTEX#py#default#defaultverb#0#verbatim#####1342#
Input:max_num_of_search_steps
def binary_line_search(last_loss, step, counter, is_extrapolate):
    if counter == max_num_of_search_steps:
        return last_loss
    counter += 1
    if is_extrapolate:
        current_loss = do_step_on_line(step)
        if current_loss < last_loss:
            return binary_line_search(current_loss, step,counter, is_extrapolate)
        else:
            is_extrapolate = False
            do_step_on_line(-step,get_loss=False)
    if not is_extrapolate:
        loss_right = do_step_on_line(0.5*step, True)
        if loss_right < last_loss:
            return binary_line_search(loss_right, 0.5*step,counter, is_extrapolate)
        loss_left = do_step_on_line(-1*step, True)
        elif loss_left < last_loss:
            return binary_line_search(loss_left, 0.5*step,counter, is_extrapolate)
        elif loss_right > last_loss and loss_left > last_loss:
            do_step_on_line(0.5*step,get_loss=False)
            return binary_line_search(loss_left, 0.5*step, counter, is_extrapolate)
        elif loss_right == last_loss:
            return binary_line_search(loss_right, -0.5*step, counter, is_extrapolate)
        elif loss_left == last_loss:
            return binary_line_search(loss_left, -0.5*step,counter, is_extrapolate)
        else:
            #"this state is not possible"
=>PYTHONTEX:SETTINGS#
version=0.16
outputdir=pythontex-files-neurips_2020
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=false
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python|
pygfamily=pycon|pycon|
pygfamily=sympy|python|
pygfamily=sympycon|pycon|
pygfamily=pylab|python|
pygfamily=pylabcon|pycon|
