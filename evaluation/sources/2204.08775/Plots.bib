
@book{alfredj.lotkaElementsPhysicalBiology1925,
  title = {Elements of {{Physical Biology}}},
  author = {{Alfred J.Lotka}},
  date = {1925},
  publisher = {{Williams and Wilkins Company}},
  url = {http://archive.org/details/elementsofphysic017171mbp},
  urldate = {2022-05-31},
  editora = {{Indian Institute Of Science} and {IISc Library} and {Jiju}},
  editoratype = {collaborator},
  langid = {english},
  pagetotal = {495},
  keywords = {Biology}
}

@book{angevaareInfectiousDiseaseTransmission2020,
  title = {Infectious {{Disease Transmission Network Modelling}} with {{Julia}}},
  author = {Angevaare, Justin and Feng, Zeny and Deardon, Rob},
  date = {2020-02-13},
  abstract = {Julia is a modern programming language that increases accessibility of high performance computing. We leverage Julia's features in the creation of a high performance package for computationally intensive epidemic models. Specifically, we introduce Pathogen.jl for simulation and inference of transmission network individual level models (TN-ILMs), which are an extension of the individual level model framework of Deardon et al. (2010). TN-ILMs can be used to jointly infer transmission networks, event times, and model parameters within a Bayesian framework via MCMC. We detail our specific strategies for conducting MCMC for TN-ILMs, our implementation of these strategies in Pathogen.jl, and finally provide an example using Pathogen.jl to simulate an epidemic following a susceptible-infectious-removed (SIR) TN-ILM, then performing inference using observations that were generated from that epidemic.}
}

@online{Asymptote,
  title = {Asymptote},
  url = {https://asymptote.sourceforge.io/index.html},
  urldate = {2021-06-03},
  file = {/home/schrist/Zotero/storage/RGFUI4CM/index.html}
}

@article{baggecarlsonMonteCarloMeasurementsJlPropagation2019,
  title = {{{MonteCarloMeasurements}}.Jl : {{Propagation}} of Distributions by {{Monte-Carlo}} Sampling: {{Real}} Number Types with Uncertainty Represented by Particle Clouds.},
  shorttitle = {{{MonteCarloMeasurements}}.Jl},
  author = {Bagge Carlson, Fredrik},
  date = {2019},
  publisher = {{github}},
  url = {http://lup.lub.lu.se/record/8ff6a743-0ad6-4d98-bbb3-5d549c698bc1},
  urldate = {2021-05-03},
  abstract = {This package facilitates working with probability distributions by means of Monte-Carlo methods, in a way that allows for propagation of probability distributions through functions. This is useful for, e.g., nonlinear uncertainty propagation. A variable or parameter might be associated with uncertainty if it is measured or otherwise estimated from data. We provide two core types to represent probability distributions: Particles and StaticParticles, both \&lt;: Real. (The name "Particles" comes from the particle-filtering literature.) These types all form a Monte-Carlo approximation of the distribution of a floating point number, i.e., the distribution is represented by samples/particles. Correlated quantities are handled as well, see multivariate particles below.{$<$}br{$>$} {$<$}br{$>$} Although several interesting use cases for doing calculations with probability distributions have popped up (see Examples), the original goal of the package is similar to that of Measurements.jl, to propagate the uncertainty from input of a function to the output. The difference compared to a Measurement is that Particles represent the distribution using a vector of unweighted particles, and can thus represent arbitrary distributions and handle nonlinear uncertainty propagation well. Functions like f(x) = x², f(x) = sign(x) at x=0 and long-time integration, are examples that are not handled well using linear uncertainty propagation ala Measurements.jl. MonteCarloMeasurements also support correlations between quantities.{$<$}br{$>$} {$<$}br{$>$} A number of type Particles behaves just as any other Number while partaking in calculations. After a calculation, an approximation to the complete distribution of the output is captured and represented by the output particles. mean, std etc. can be extracted from the particles using the corresponding functions. Particles also interact with Distributions.jl, so that you can call, e.g., Normal(p) and get back a Normal type from distributions or fit(Gamma, p) to get a Gammadistribution. Particles can also be iterated, asked for maximum/minimum, quantile etc. If particles are plotted with plot(p), a histogram is displayed. This requires Plots.jl. A kernel-density estimate can be obtained by density(p) is StatsPlots.jl is loaded.},
  langid = {english},
  file = {/home/schrist/Zotero/storage/D8TZUCS9/8ff6a743-0ad6-4d98-bbb3-5d549c698bc1.html}
}

@article{bezansonJuliaFreshApproach2017a,
  title = {Julia: {{A Fresh Approach}} to {{Numerical Computing}}},
  shorttitle = {Julia},
  author = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
  date = {2017-01},
  journaltitle = {SIAM Rev.},
  volume = {59},
  number = {1},
  pages = {65--98},
  issn = {0036-1445, 1095-7200},
  doi = {10.1137/141000671},
  langid = {english},
  file = {/home/schrist/Zotero/storage/GDIHAN8U/Bezanson et al. - 2017 - Julia A Fresh Approach to Numerical Computing.pdf}
}

@article{bonhamMicrobiomeJlBiobakeryUtils2021,
  title = {Microbiome.Jl and {{BiobakeryUtils}}.Jl - {{Julia}} Packages for Working with Microbial Community Data},
  author = {Bonham, Kevin S. and Kayisire, Annelle Abatoni and Luo, Anika S. and Klepac-Ceraj, Vanja},
  date = {2021-11-17},
  journaltitle = {Journal of Open Source Software},
  volume = {6},
  number = {67},
  pages = {3876},
  issn = {2475-9066},
  doi = {10.21105/joss.03876},
  abstract = {Bonham et al., (2021). Microbiome.jl and BiobakeryUtils.jl - Julia packages for working with microbial community data. Journal of Open Source Software, 6(67), 3876, https://doi.org/10.21105/joss.03876},
  langid = {english},
  file = {/home/schrist/Zotero/storage/VK6FG4R5/Bonham et al. - 2021 - Microbiome.jl and BiobakeryUtils.jl - Julia packag.pdf;/home/schrist/Zotero/storage/4IFZTECF/joss.html}
}

@online{bostockD3JsDataDriven,
  title = {D3.Js - {{Data-Driven Documents}}},
  author = {Bostock, Mike},
  url = {https://d3js.org/},
  urldate = {2022-03-02},
  abstract = {D3 is a JavaScript library for visualizing data with HTML, SVG, and CSS.},
  file = {/home/schrist/Zotero/storage/NLLT8TGD/d3js.org.html}
}

@book{boydIntroductionAppliedLinear2018,
  title = {Introduction to {{Applied Linear Algebra}}: {{Vectors}}, {{Matrices}}, and {{Least Squares}}},
  shorttitle = {Introduction to {{Applied Linear Algebra}}},
  author = {Boyd, Stephen and Vandenberghe, Lieven},
  date = {2018-06-07},
  edition = {1},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/9781108583664},
  isbn = {978-1-316-51896-0 978-1-108-58366-4},
  langid = {english},
  file = {/home/schrist/Zotero/storage/SY9RM96I/Boyd und Vandenberghe - 2018 - Introduction to Applied Linear Algebra Vectors, M.pdf}
}

@article{caldwellBATJlUpgrading2020,
  title = {{{BAT}}.Jl {{Upgrading}} the {{Bayesian Analysis Toolkit}}},
  author = {Caldwell, Allen and Grunwald, Cornelius and Hafych, Vasyl and Kröninger, Kevin and Cagnina, Salvatore La and Schulz, Oliver and Shtembari, Lolian},
  date = {2020},
  journaltitle = {EPJ Web Conf.},
  volume = {245},
  pages = {06001},
  publisher = {{EDP Sciences}},
  issn = {2100-014X},
  doi = {10.1051/epjconf/202024506001},
  abstract = {In all but the simplest cases, performing data analysis based on Bayesian reasoning requires the use of advanced algorithms. The Bayesian Analysis Toolkit (BAT) provides a collection of algorithms and methods that facilitate the application of Bayesian statistics to user-defined problems of arbitrary complexity. With BAT.jl, we present a modern rewrite of BAT in the Julia programming language. Through the use of a modular software design that is capable of running parallel and distributed, and by extending the tool with new sampling and integration algorithms, BAT.jl is a high-performance framework for Bayesian inference, meeting the requirements of modern data analysis.},
  langid = {english},
  file = {/home/schrist/Zotero/storage/D9J55TVB/Caldwell et al. - 2020 - BAT.jl Upgrading the Bayesian Analysis Toolkit.pdf;/home/schrist/Zotero/storage/25RR2ZZ6/epjconf_chep2020_06001.html}
}

@article{constantinouGeophysicalFlowsJlSolvers2021,
  title = {{{GeophysicalFlows}}.Jl: {{Solvers}} for Geophysical Fluid Dynamics Problems in Periodic Domains on {{CPUs GPUs}}},
  shorttitle = {{{GeophysicalFlows}}.Jl},
  author = {Constantinou, Navid and Wagner, Gregory and Siegelman, Lia and Pearson, Brodie and Palóczy, André},
  date = {2021-04-21},
  journaltitle = {JOSS},
  volume = {6},
  number = {60},
  pages = {3053},
  issn = {2475-9066},
  doi = {10.21105/joss.03053},
  abstract = {GeophysicalFlows.jl is a Julia (Bezanson et al., 2017) package that contains partial differential equations solvers for a collection of geophysical fluid systems in periodic domains. All modules use Fourier-based pseudospectral numerical methods and leverage the framework provided by the FourierFlows.jl (Constantinou et al., 2021) Julia package for time-stepping, custom diagnostics, and saving output.},
  langid = {english},
  file = {/home/schrist/Zotero/storage/3RGHTGVB/Constantinou et al. - 2021 - GeophysicalFlows.jl Solvers for geophysical fluid.pdf}
}

@article{cufarRipsererJlFlexible2020,
  title = {Ripserer.Jl: Flexible and Efficient Persistent Homology Computation in {{Julia}}},
  shorttitle = {Ripserer.Jl},
  author = {Čufar, Matija},
  date = {2020-10-19},
  journaltitle = {JOSS},
  volume = {5},
  number = {54},
  pages = {2614},
  issn = {2475-9066},
  doi = {10.21105/joss.02614},
  abstract = {Along with its companion package, PersistenceDiagrams.jl5, Ripserer.jl provides a featureful environment for computing persistent homology and integrating it with the rest of Julia’s data science stack. At the time of writing, it offers the following features.},
  langid = {english},
  file = {/home/schrist/Zotero/storage/392CVM4B/Čufar - 2020 - Ripserer.jl flexible and efficient persistent hom.pdf}
}

@article{danischMakieJlFlexible2021,
  title = {Makie.Jl: {{Flexible}} High-Performance Data Visualization for {{Julia}}},
  shorttitle = {Makie.Jl},
  author = {Danisch, Simon and Krumbiegel, Julius},
  date = {2021-09-01},
  journaltitle = {Journal of Open Source Software},
  volume = {6},
  number = {65},
  pages = {3349},
  issn = {2475-9066},
  doi = {10.21105/joss.03349},
  abstract = {Danisch et al., (2021). Makie.jl: Flexible high-performance data visualization for Julia. Journal of Open Source Software, 6(65), 3349, https://doi.org/10.21105/joss.03349},
  langid = {english},
  file = {/home/schrist/Zotero/storage/35JH6QBZ/Danisch und Krumbiegel - 2021 - Makie.jl Flexible high-performance data visualiza.pdf;/home/schrist/Zotero/storage/PKL3KMXK/joss.html}
}

@article{dansereauSimpleSDMLayersJlGBIF2021,
  title = {{{SimpleSDMLayers}}.Jl and {{GBIF}}.Jl: {{A Framework}} for {{Species Distribution Modeling}} in {{Julia}}},
  shorttitle = {{{SimpleSDMLayers}}.Jl and {{GBIF}}.Jl},
  author = {Dansereau, Gabriel and Poisot, Timothée},
  date = {2021-01-27},
  journaltitle = {JOSS},
  volume = {6},
  number = {57},
  pages = {2872},
  issn = {2475-9066},
  doi = {10.21105/joss.02872},
  abstract = {Predicting where species should be found in space is a common question in ecology and biogeography. Species distribution models (SDMs), for instance, aim to predict where environmental conditions are suitable for a given species, often on continuous geographic scales. Such analyses require the use of geo-referenced data on species distributions coupled with climate or land cover information, hence a tight integration between environmental data, species occurrence data, and spatial coordinates. Thus, it requires an efficient way to access these different data types within the same software, as well as a flexible framework on which to build various analysis workflows. Here we present SimpleSDMLayers.jl and GBIF.jl, two packages in the Julia language implementing a simple framework and type-system on which to build SDM analyses, as well as providing access to popular data sources for species occurrences and environmental conditions.},
  langid = {english},
  file = {/home/schrist/Zotero/storage/4FMWVX2E/Dansereau und Poisot - 2021 - SimpleSDMLayers.jl and GBIF.jl A Framework for Sp.pdf}
}

@article{driscollComplexRegionsJlJulia2019,
  title = {{{ComplexRegions}}.Jl: {{A Julia}} Package for Regions in the Complex Plane},
  shorttitle = {{{ComplexRegions}}.Jl},
  author = {Driscoll, Tobin},
  date = {2019-12-02},
  journaltitle = {JOSS},
  volume = {4},
  number = {44},
  pages = {1811},
  issn = {2475-9066},
  doi = {10.21105/joss.01811},
  abstract = {Complex variables offer a unique and powerful way to represent planar regions and maps between them. Since the work of Riemann and others in the 19th century, complex variables have been used to derive quantities and properties of importance to a wide range of applications in science and engineering, in addition to their inherent mathematical importance. The advent of computing accelerated and extended this trend to applications in fluids, electromagnetics, queueing theory, computer graphics, and many other fields; e.g., Dias \& Elcrat (1992); Driscoll (1994); Gaier (1979); Greengard (1990); Martens, Brown, \& Haacke (1992); Trefethen \& Williams (1986); Versnel (1982); Gu, Wang, Chan, Thompson, \& Yau (2004).},
  langid = {english},
  file = {/home/schrist/Zotero/storage/A9EWS9IV/Driscoll - 2019 - ComplexRegions.jl A Julia package for regions in .pdf}
}

@unpublished{fairbrotherGaussianProcessesJlNonparametric2019,
  title = {{{GaussianProcesses}}.Jl: {{A Nonparametric Bayes}} Package for the {{Julia Language}}},
  shorttitle = {{{GaussianProcesses}}.Jl},
  author = {Fairbrother, Jamie and Nemeth, Christopher and Rischard, Maxime and Brea, Johanni and Pinder, Thomas},
  date = {2019-06-30},
  eprint = {1812.09064},
  eprinttype = {arxiv},
  primaryclass = {stat},
  url = {http://arxiv.org/abs/1812.09064},
  urldate = {2021-05-03},
  abstract = {Gaussian processes are a class of flexible nonparametric Bayesian tools that are widely used across the sciences, and in industry, to model complex data sources. Key to applying Gaussian process models is the availability of well-developed open source software, which is available in many programming languages. In this paper, we present a tutorial of the GaussianProcesses.jl package that has been developed for the Julia programming language. GaussianProcesses.jl utilises the inherent computational benefits of the Julia language, including multiple dispatch and just-in-time compilation, to produce a fast, flexible and user-friendly Gaussian processes package. The package provides many mean and kernel functions with supporting inference tools to fit exact Gaussian process models, as well as a range of alternative likelihood functions to handle non-Gaussian data (e.g. binary classification models) and sparse approximations for scalable Gaussian processes. The package makes efficient use of existing Julia packages to provide users with a range of optimization and plotting tools.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Statistics - Computation,Statistics - Machine Learning},
  file = {/home/schrist/Zotero/storage/E65PSKNK/Fairbrother et al. - 2019 - GaussianProcesses.jl A Nonparametric Bayes packag.pdf}
}

@unpublished{fairbrotherGaussianProcessesJlNonparametric2019a,
  title = {{{GaussianProcesses}}.Jl: {{A Nonparametric Bayes}} Package for the {{Julia Language}}},
  shorttitle = {{{GaussianProcesses}}.Jl},
  author = {Fairbrother, Jamie and Nemeth, Christopher and Rischard, Maxime and Brea, Johanni and Pinder, Thomas},
  date = {2019-06-30},
  eprint = {1812.09064},
  eprinttype = {arxiv},
  primaryclass = {stat},
  url = {http://arxiv.org/abs/1812.09064},
  urldate = {2021-05-03},
  abstract = {Gaussian processes are a class of flexible nonparametric Bayesian tools that are widely used across the sciences, and in industry, to model complex data sources. Key to applying Gaussian process models is the availability of well-developed open source software, which is available in many programming languages. In this paper, we present a tutorial of the GaussianProcesses.jl package that has been developed for the Julia programming language. GaussianProcesses.jl utilises the inherent computational benefits of the Julia language, including multiple dispatch and just-in-time compilation, to produce a fast, flexible and user-friendly Gaussian processes package. The package provides many mean and kernel functions with supporting inference tools to fit exact Gaussian process models, as well as a range of alternative likelihood functions to handle non-Gaussian data (e.g. binary classification models) and sparse approximations for scalable Gaussian processes. The package makes efficient use of existing Julia packages to provide users with a range of optimization and plotting tools.},
  archiveprefix = {arXiv},
  keywords = {Statistics - Computation,Statistics - Machine Learning},
  file = {/home/schrist/Zotero/storage/3NVB43N3/Fairbrother et al. - 2019 - GaussianProcesses.jl A Nonparametric Bayes packag.pdf;/home/schrist/Zotero/storage/H9NMW7E2/1812.html}
}

@unpublished{foretsCombiningSetPropagation2021,
  title = {Combining {{Set Propagation}} with {{Finite Element Methods}} for {{Time Integration}} in {{Transient Solid Mechanics Problems}}},
  author = {Forets, Marcelo and Caporale, Daniel Freire and Zerpa, Jorge M. Pérez},
  date = {2021-05-12},
  eprint = {2105.05841},
  eprinttype = {arxiv},
  primaryclass = {cs, math},
  url = {http://arxiv.org/abs/2105.05841},
  urldate = {2021-06-03},
  abstract = {The Finite Element Method (FEM) is the gold standard for spatial discretization in numerical simulations for a wide spectrum of real-world engineering problems. Prototypical areas of interest include linear heat transfer and linear structural dynamics problems modeled with linear partial differential equations (PDEs). While different algorithms for direct integration of the equations of motion exist, exploring all feasible behaviors for varying loads, initial states and fluxes in models with large numbers of degrees of freedom remains a challenging task. In this article we propose a novel approach, based in set propagation methods and motivated by recent advances in the field of Reachability Analysis. Assuming a set of initial states and input states, the proposed method consists in the construction of a union of sets (flowpipe) that enclose the infinite number of solutions of the spatially discretized PDE. We present the numerical results obtained in four examples to illustrate the capabilities of the approach, and draw some comparisons with respect to reference numerical integration methods. We conclude that the proposed method presents specific and promising advantages, but the full potential of reachability analysis in solid mechanics problems is yet to be explored.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computational Engineering; Finance; and Science,Mathematics - Numerical Analysis},
  file = {/home/schrist/Zotero/storage/ZBARFWHY/Forets et al. - 2021 - Combining Set Propagation with Finite Element Meth.pdf;/home/schrist/Zotero/storage/IS6BCI6L/2105.html}
}

@article{giordanoUncertaintyPropagationFunctionally2016,
  title = {Uncertainty Propagation with Functionally Correlated Quantities},
  author = {Giordano, Mosè},
  date = {2016-10},
  journaltitle = {ArXiv e-prints},
  eprint = {1610.08716},
  eprinttype = {arxiv},
  primaryclass = {physics.data-an},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System},
  adsurl = {https://ui.adsabs.harvard.edu/abs/2016arXiv161008716G},
  archiveprefix = {arXiv},
  keywords = {Physics - Data Analysis,Statistics and Probability}
}

@online{GnuplotHomepage,
  title = {Gnuplot Homepage},
  url = {http://www.gnuplot.info/},
  urldate = {2022-05-31},
  file = {/home/schrist/Zotero/storage/PJDATXYA/www.gnuplot.info.html}
}

@online{heinenGRFrameworkGR,
  title = {{{GR Framework}} — {{GR Framework}} 0.64.0 Documentation},
  author = {Heinen, Josef},
  url = {https://gr-framework.org/index.html},
  urldate = {2022-03-03},
  file = {/home/schrist/Zotero/storage/D3QUVFXD/index.html}
}

@online{HomeHDF5Jl,
  title = {Home · {{HDF5}}.Jl},
  url = {https://juliaio.github.io/HDF5.jl/stable/},
  urldate = {2022-03-03},
  file = {/home/schrist/Zotero/storage/I3NEJGTD/stable.html}
}

@online{HowRecipesActually,
  title = {How Do {{Recipes}} Actually Work?},
  url = {https://daschw.github.io/recipes/#what_are_recipes},
  urldate = {2022-03-02},
  file = {/home/schrist/Zotero/storage/4QTVKGCM/recipes.html}
}

@article{Hunter:2007,
  title = {Matplotlib: {{A 2D}} Graphics Environment},
  author = {Hunter, J. D.},
  date = {2007},
  journaltitle = {Computing in Science \& Engineering},
  volume = {9},
  number = {3},
  pages = {90--95},
  publisher = {{IEEE COMPUTER SOC}},
  doi = {10.1109/MCSE.2007.55},
  abstract = {Matplotlib is a 2D graphics package used for Python for application development, interactive scripting, and publication-quality image generation across user interfaces and operating systems.}
}

@online{IntroductionComputationalThinking,
  title = {Introduction to {{Computational Thinking}}},
  url = {https://computationalthinking.mit.edu/Spring21/newton_method/},
  urldate = {2021-05-27},
  file = {/home/schrist/Zotero/storage/586WDBR8/newton_method.html}
}

@article{KellerSilicaCrust2020,
  title = {Constraining Crustal Silica on Ancient {{Earth}}},
  author = {Keller, C. Brenhin and Harrison, T. Mark},
  date = {2020-09},
  journaltitle = {Proceedings of the National Academy of Sciences},
  volume = {117},
  number = {35},
  pages = {21101--21107},
  publisher = {{Proceedings of the National Academy of Sciences}},
  doi = {10.1073/pnas.2009431117},
  file = {/home/schrist/Zotero/storage/G97MQFNR/Keller und Harrison - 2020 - Constraining crustal silica on ancient Earth.pdf}
}

@unpublished{lindnerNetworkDynamicsJlComposing2021,
  title = {{{NetworkDynamics}}.Jl -- {{Composing}} and Simulating Complex Networks in {{Julia}}},
  author = {Lindner, Michael and Lincoln, Lucas and Drauschke, Fenja and Koulen, Julia Monika and Würfel, Hans and Plietzsch, Anton and Hellmann, Frank},
  date = {2021-03-26},
  eprint = {2012.12696},
  eprinttype = {arxiv},
  primaryclass = {physics},
  url = {http://arxiv.org/abs/2012.12696},
  urldate = {2021-05-03},
  abstract = {NetworkDynamics.jl is an easy-to-use and computationally efficient package for working with heterogeneous dynamical systems on complex networks, written in Julia, a high-level, high-performance, dynamic programming language. By combining state of the art solver algorithms from DifferentialEquations.jl with efficient data structures, NetworkDynamics.jl achieves top performance while supporting advanced features like events, algebraic constraints, time-delays, noise terms and automatic differentiation.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Mathematical Software,G.4,Physics - Physics and Society},
  file = {/home/schrist/Zotero/storage/5BYWNQ8X/Lindner et al. - 2021 - NetworkDynamics.jl -- Composing and simulating com.pdf;/home/schrist/Zotero/storage/HJWL7M2G/2012.html}
}

@software{ma-laforgeInspectDRJlFast2022,
  title = {{{InspectDR}}.Jl: {{Fast}}, Interactive Plots},
  shorttitle = {{{InspectDR}}.Jl},
  author = {ma- {laforge}},
  options = {useprefix=true},
  date = {2022-03-03T07:59:21Z},
  origdate = {2016-04-07T20:32:40Z},
  url = {https://github.com/ma-laforge/InspectDR.jl},
  urldate = {2022-03-03},
  abstract = {Fast, interactive Julia/GTK+ plots (+Smith charts +Gtk widget +Cairo-only images)},
  keywords = {bode,eda,mixed-signal,plotting,simulation,smith-chart,transient,visualization,widget}
}

@online{Mermaid,
  title = {About {{Mermaid}}},
  url = {https://mermaid-js.github.io/mermaid/#/README},
  urldate = {2022-03-02},
  file = {/home/schrist/Zotero/storage/MKV2Q2VX/mermaid.html}
}

@online{OverviewPlots,
  title = {Overview · {{Plots}}},
  url = {https://docs.juliaplots.org/latest/attributes/},
  urldate = {2021-05-11},
  file = {/home/schrist/Zotero/storage/DLIY9DLE/attributes.html}
}

@online{PackageDownloadStats,
  title = {Package Download Stats for {{Julia}}},
  url = {https://pkgs.genieframework.com/},
  urldate = {2022-03-02},
  file = {/home/schrist/Zotero/storage/NNKDIM45/pkgs.genieframework.com.html}
}

@online{PGFPlotsLaTeXPackage,
  title = {{{PGFPlots}} - {{A LaTeX}} Package to Create Plots.},
  url = {http://pgfplots.sourceforge.net/},
  urldate = {2022-03-03},
  file = {/home/schrist/Zotero/storage/ZSGTX53J/pgfplots.sourceforge.net.html}
}

@online{PlotlyFrontEnd,
  title = {Plotly: {{The}} Front End for {{ML}} and Data Science Models},
  shorttitle = {Plotly},
  url = {https://plotly.com/},
  urldate = {2022-03-03},
  abstract = {Dash apps go where traditional BI cannot: NLP, object detection, predictive analytics, and more. With 1M+ downloads/month, Dash is the new standard for AI \& data science apps.},
  langid = {english},
  file = {/home/schrist/Zotero/storage/ECMQKYKP/plotly.com.html}
}

@online{PlotlyJavaScriptGraphing,
  title = {Plotly {{JavaScript Graphing Library}}},
  url = {https://plotly.com/javascript/},
  urldate = {2022-03-03},
  abstract = {A free open source interactive javascript graphing library. Plotly.js is built on d3.js and webgl and supports over 20 types of interactive charts.},
  file = {/home/schrist/Zotero/storage/ZPBG79IE/javascript.html}
}

@online{PlotsJuliaHub,
  title = {Plots · {{JuliaHub}}},
  url = {https://juliahub.com/ui/Packages/Plots/ld3vC/1.13.2?t=1},
  urldate = {2021-05-11},
  file = {/home/schrist/Zotero/storage/LIXSMNNX/1.13.html}
}

@online{PlottingSpectralDistances,
  title = {Plotting · {{SpectralDistances}}},
  url = {https://baggepinnen.github.io/SpectralDistances.jl/latest/plotting/},
  urldate = {2021-05-27},
  file = {/home/schrist/Zotero/storage/FVARVTVE/plotting.html}
}

@online{PlotUtilsJuliaHub,
  title = {{{PlotUtils}} · {{JuliaHub}}},
  url = {https://juliahub.com/ui/Packages/PlotUtils/YveHG/1.0.10?t=0},
  urldate = {2021-05-11}
}

@article{rackauckasDifferentialEquationsJlPerformant2017a,
  title = {{{DifferentialEquations}}.Jl – {{A Performant}} and {{Feature-Rich Ecosystem}} for {{Solving Differential Equations}} in {{Julia}}},
  author = {Rackauckas, Christopher and Nie, Qing},
  date = {2017-05-25},
  journaltitle = {Journal of Open Research Software},
  volume = {5},
  number = {1},
  pages = {15},
  publisher = {{Ubiquity Press}},
  issn = {2049-9647},
  doi = {10.5334/jors.151},
  abstract = {Article: DifferentialEquations.jl – A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Julia},
  issue = {1},
  langid = {english},
  file = {/home/schrist/Zotero/storage/FVQHZ829/Rackauckas und Nie - 2017 - DifferentialEquations.jl – A Performant and Featur.pdf;/home/schrist/Zotero/storage/D66SKKUX/jors.151.html}
}

@software{rackauckasSciMLDifferentialEquationsJl2022,
  title = {{{SciML}}/{{DifferentialEquations}}.Jl: V7.1.0},
  shorttitle = {{{SciML}}/{{DifferentialEquations}}.Jl},
  author = {Rackauckas, Christopher and Singhvi, Anshul and Ma, Yingbo and de Graaf, Chris and Hafner, Lilith Orion and Hatherly, Michael and Jones, Scott P. and {dextorious} and Caine, Colin and Saba, Elliot and TagBot, Julia and Kvaz1r and G, Max and Olver, Sheehan and Badger, The Gitter and {c123w} and Gwóźdź, Maja},
  date = {2022-01-11},
  doi = {10.5281/zenodo.5837925},
  abstract = {DifferentialEquations v7.1.0 Diff since v7.0.0 Merged pull requests: Improve defaults and reexport LinearSolve (\#840) (@ChrisRackauckas)},
  organization = {{Zenodo}},
  file = {/home/schrist/Zotero/storage/T9YFABHW/5837925.html}
}

@online{RecipesBaseJuliaHub,
  title = {{{RecipesBase}} · {{JuliaHub}}},
  url = {https://juliahub.com/ui/Packages/RecipesBase/8e2Mm/1.1.1?t=0},
  urldate = {2021-05-11},
  file = {/home/schrist/Zotero/storage/EL9VXPLQ/1.1.html}
}

@software{robert-haasRoberthaasUnifiedplotting2020,
  title = {Robert-Haas/Unified-Plotting},
  author = {robert- {haas}},
  options = {useprefix=true},
  date = {2020-05-19T17:08:45Z},
  origdate = {2020-05-19T16:48:46Z},
  url = {https://github.com/robert-haas/unified-plotting},
  urldate = {2021-05-19},
  abstract = {Quick and easy plotting of tabular and network data.},
  keywords = {3d-force-graph,d3js,data-visualization,matplotlib,network-visualization,plotly,plotting,visjs}
}

@online{shah2020JuliaUser,
  title = {2020 {{Julia User}} and {{Developer Survey}}},
  author = {Shah, Viral B. and Claster, Andrew},
  url = {https://julialang.org/blog/2020/08/2020-julia-user-and-developer-survey/},
  urldate = {2022-05-30},
  abstract = {This year, 2,565 Julia users and developers participated in the second annual Julia User and Developer Survey.},
  langid = {english},
  file = {/home/schrist/Zotero/storage/9NNW3S9Q/2020-julia-user-and-developer-survey.html}
}

@online{shahJuliaUserDeveloper,
  title = {Julia {{User}} - {{Developer Survey}} 2019},
  author = {Shah, Viral B. and Claster, Andrew and C, Abhijith},
  url = {https://julialang.org/blog/2019/08/2019-julia-survey/},
  urldate = {2022-05-30},
  abstract = {Julia User and Developer Survey 2019 | We conducted the first annual Julia User \& Developer Survey in June, and the results were presented by Viral Shah at JuliaCon on July 23....},
  langid = {english},
  file = {/home/schrist/Zotero/storage/UK9ASWN9/2019-julia-survey.html}
}

@software{SrcdHercules2021,
  title = {Src-d/Hercules},
  date = {2021-05-19T15:54:33Z},
  origdate = {2016-12-12T17:30:29Z},
  url = {https://github.com/src-d/hercules},
  urldate = {2021-05-19},
  abstract = {Gaining advanced insights from Git repository history.},
  organization = {{source\{d\}}},
  keywords = {burndown,git,git-analysis,machine-learning,mining-software-repositories,mloncode,tensorboard-visualizations,tensorflow}
}

@online{UCIMachineLearning,
  title = {{{UCI Machine Learning Repository}}: {{Iris Data Set}}},
  url = {https://archive.ics.uci.edu/ml/datasets/Iris/},
  urldate = {2022-04-07},
  file = {/home/schrist/Zotero/storage/3AM3RPD2/Iris.html}
}

@software{UnicodePlots2022,
  title = {{{UnicodePlots}}},
  date = {2022-03-03T07:16:40Z},
  origdate = {2015-08-15T00:21:25Z},
  url = {https://github.com/JuliaPlots/UnicodePlots.jl},
  urldate = {2022-03-03},
  abstract = {Unicode-based scientific plotting for working in the terminal},
  organization = {{JuliaPlots}},
  keywords = {julia,plots,plotting,repl,terminal,unicode}
}

@online{UnifiedPlottingUnifiedplotting,
  title = {Unified {{Plotting}} — Unified-Plotting 0.5.0rc4 Documentation},
  url = {https://robert-haas.github.io/unified-plotting-docs/},
  urldate = {2021-08-04},
  file = {/home/schrist/Zotero/storage/MIQ2K6BB/unified-plotting-docs.html}
}

@misc{veltz:hal-02902346,
  title = {{{BifurcationKit}}.Jl},
  author = {Veltz, Romain},
  date = {2020-07},
  publisher = {{Inria Sophia-Antipolis}},
  url = {https://hal.archives-ouvertes.fr/hal-02902346},
  hal_id = {hal-02902346},
  hal_version = {v1},
  pdf = {https://hal.archives-ouvertes.fr/hal-02902346/file/354c9fb0d148262405609eed2cb7927818706f1f.tar.gz},
  keywords = {bifurcation-diagram,deflation,floquet,gpu,newton-krylov,periodic-orbits,pseudo-arclength-continuation}
}

@preamble{ "\ifdefined\DeclarePrefChars\DeclarePrefChars{'’-}\else\fi " }

