% Generated by IEEEtran.bst, version: 1.12 (2007/01/11)
\begin{thebibliography}{10}
\providecommand{\url}[1]{#1}
\csname url@samestyle\endcsname
\providecommand{\newblock}{\relax}
\providecommand{\bibinfo}[2]{#2}
\providecommand{\BIBentrySTDinterwordspacing}{\spaceskip=0pt\relax}
\providecommand{\BIBentryALTinterwordstretchfactor}{4}
\providecommand{\BIBentryALTinterwordspacing}{\spaceskip=\fontdimen2\font plus
\BIBentryALTinterwordstretchfactor\fontdimen3\font minus
  \fontdimen4\font\relax}
\providecommand{\BIBforeignlanguage}[2]{{%
\expandafter\ifx\csname l@#1\endcsname\relax
\typeout{** WARNING: IEEEtran.bst: No hyphenation pattern has been}%
\typeout{** loaded for the language `#1'. Using the pattern for}%
\typeout{** the default language instead.}%
\else
\language=\csname l@#1\endcsname
\fi
#2}}
\providecommand{\BIBdecl}{\relax}
\BIBdecl

\bibitem{tan2022detecting}
W.~S. Tan, M.~Wagner, and C.~Treude, ``Detecting outdated code element
  references in software repository documentation,'' \emph{arXiv preprint
  arXiv:2212.01479}, 2022.

\bibitem{wen2019large}
F.~Wen, C.~Nagy, G.~Bavota, and M.~Lanza, ``A large-scale empirical study on
  code-comment inconsistencies,'' in \emph{Proc.~Int'l.~Conf.~on Program
  Comprehension}, 2019, pp. 53--64.

\bibitem{tan2012tcomment}
S.~H. Tan, D.~Marinov, L.~Tan, and G.~T. Leavens, ``@tcomment: Testing
  {Javadoc} comments to detect comment-code inconsistencies,'' in
  \emph{Proc.~Int'l.~Conf.~on Software Testing, Verification and Validation},
  2012, pp. 260--269.

\bibitem{ratol2017detecting}
I.~K. Ratol and M.~P. Robillard, ``Detecting fragile comments,'' in
  \emph{Proc.~Int'l.~Conf.~on Automated Software Engineering}, 2017, pp.
  112--122.

\bibitem{panthaplackel2020learning}
S.~Panthaplackel, P.~Nie, M.~Gligoric, J.~J. Li, and R.~Mooney, ``Learning to
  update natural language comments based on code changes,'' in
  \emph{Proc.~Annual Meeting of the Association for Computational Linguistics},
  2020, pp. 1853--1868.

\bibitem{zhong2013detecting}
H.~Zhong and Z.~Su, ``Detecting {API} documentation errors,'' in
  \emph{Proc.~Int'l.~Conf.~on Object Oriented Programming Systems Languages \&
  Applications}, 2013, pp. 803--816.

\bibitem{dagenais2014using}
B.~Dagenais and M.~P. Robillard, ``Using traceability links to recommend
  adaptive changes for documentation evolution,'' \emph{IEEE Transactions on
  Software Engineering}, vol.~40, no.~11, pp. 1126--1146, 2014.

\bibitem{zhou2018automatic}
Y.~Zhou, C.~Wang, X.~Yan, T.~Chen, S.~Panichella, and H.~C. Gall, ``Automatic
  detection and repair recommendation of directive defects in {Java} {API}
  documentation,'' \emph{IEEE Transactions on Software Engineering}, vol.~46,
  no.~9, pp. 1004--1023, 2020.

\bibitem{lee2019automatic}
S.~Lee, R.~Wu, S.-C. Cheung, and S.~Kang, ``Automatic detection and update
  suggestion for outdated {API} names in documentation,'' \emph{IEEE
  Transactions on Software Engineering}, 2019.

\bibitem{lebeuf2017software}
C.~Lebeuf, M.-A. Storey, and A.~Zagalsky, ``Software bots,'' \emph{IEEE
  Software}, vol.~35, no.~1, pp. 18--23, 2017.

\bibitem{wessel2020effects}
M.~Wessel, A.~Serebrenik, I.~Wiese, I.~Steinmacher, and M.~A. Gerosa, ``Effects
  of adopting code review bots on pull requests to oss projects,'' in
  \emph{Proc.~Int'l.~Conf.~on Software Maintenance and Evolution}, 2020, pp.
  1--11.

\end{thebibliography}
